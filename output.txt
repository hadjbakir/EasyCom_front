









// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\AboutTab.tsx
"use client"

import { Box, Typography, Grid, Divider } from "@mui/material"
import { MapPin, Clock, Building, Calendar } from "lucide-react"

interface AboutTabProps {
  space: any
}

const AboutTab = ({ space }: AboutTabProps) => {
  return (
    <div>
      {/* Property Details Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Property Details
      </Typography>
      <Grid container spacing={4} className="mb-6">
        <Grid item xs={12} md={6}>
          <Box className="space-y-3">
            <Box className="flex items-center gap-2">
              <MapPin size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Address</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.address}, {space.propertyDetails.city}, {space.propertyDetails.state} {space.propertyDetails.zipCode}
                </Typography>
              </Box>
            </Box>
            <Box className="flex items-center gap-2">
              <Building size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Property Type</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.type} (Built {space.propertyDetails.yearBuilt})
                </Typography>
              </Box>
            </Box>
            <Box className="flex items-center gap-2">
              <Clock size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Access Hours</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.accessHours}
                </Typography>
              </Box>
            </Box>
          </Box>
        </Grid>
        <Grid item xs={12} md={6}>
          <Box className="space-y-3">
            <Box>
              <Typography variant="subtitle2">Total Area</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {space.propertyDetails.totalArea.toLocaleString()} sq ft
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2">Number of Floors</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {space.propertyDetails.floors}
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2">Additional Features</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {[
                  space.propertyDetails.securitySystem && "Security System",
                  space.propertyDetails.elevatorAccess && "Elevator Access",
                  space.propertyDetails.reception && "Reception"
                ].filter(Boolean).join(", ")}
              </Typography>
            </Box>
          </Box>
        </Grid>
      </Grid>

      <Divider className="my-6" />

      {/* Space Areas Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Space Areas
      </Typography>
      <Grid container spacing={4} className="mb-6">
        {space.spaceAreas.map((area: any, index: number) => (
          <Grid item xs={12} sm={6} md={3} key={index}>
            <Box className="text-center p-4 bg-background rounded-lg">
              <Typography variant="h5" className="font-bold mb-1">
                {area.area.toLocaleString()}
              </Typography>
              <Typography variant="body2" className="text-textSecondary">
                sq ft
              </Typography>
              <Typography variant="subtitle2" className="mt-2">
                {area.name}
              </Typography>
            </Box>
          </Grid>
        ))}
      </Grid>

      <Divider className="my-6" />

      {/* Pricing Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Pricing Details
      </Typography>
      <Grid container spacing={4}>
        <Grid item xs={12} md={8}>
          <Box className="space-y-4">
            <Grid container spacing={2}>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.dayPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Day Pass
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.weekPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Week Pass
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.monthPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Month Pass
                  </Typography>
                </Box>
              </Grid>
            </Grid>

            <Box className="mt-4">
              <Typography variant="subtitle2" className="mb-2">
                Available Discounts
              </Typography>
              {space.pricing.discounts.map((discount: any, index: number) => (
                <Typography key={index} variant="body2" className="text-textSecondary">
                  â€¢ {discount.type}: {discount.amount} off
                </Typography>
              ))}
            </Box>
          </Box>
        </Grid>
        <Grid item xs={12} md={4}>
          <Box className="p-4 bg-background rounded-lg">
            <Typography variant="subtitle2" className="mb-3">
              Additional Rates
            </Typography>
            <Box className="space-y-2">
              <Box className="flex justify-between">
                <Typography variant="body2">Dedicated Desk</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.dedicatedDesk}/mo
                </Typography>
              </Box>
              <Box className="flex justify-between">
                <Typography variant="body2">Private Office</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.privateOffice}/mo
                </Typography>
              </Box>
              <Box className="flex justify-between">
                <Typography variant="body2">Meeting Room</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.meetingRoomHourly}/hr
                </Typography>
              </Box>
            </Box>
          </Box>
        </Grid>
      </Grid>
    </div>
  )
}

export default AboutTab







// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\FeaturesTab.tsx
"use client"

import { Box, Typography, Grid, Chip } from "@mui/material"
import { Users, Monitor, Phone, Twitch as Kitchen, Bath, Bike, Wifi, Coffee, Printer, Car, Wind, DoorClosed, Baby } from "lucide-react"

interface FeaturesTabProps {
  space: any
}

const FeaturesTab = ({ space }: FeaturesTabProps) => {
  // Map of feature icons
  const featureIcons: { [key: string]: any } = {
    totalDesks: Users,
    privateOffices: DoorClosed,
    phoneBooths: Phone,
    kitchenettes: Kitchen,
    restrooms: Bath,
    bikeStorage: Bike,
    wifi: Wifi,
    coffee: Coffee,
    printer: Printer,
    parking: Car,
    airConditioning: Wind,
    meetingRooms: Monitor,
    motherRoom: Baby
  }

  return (
    <div>
      {/* Property Features Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Property Features
      </Typography>
      <Grid container spacing={4} className="mb-8">
        {Object.entries(space.propertyFeatures).map(([key, value]) => {
          if (typeof value === "number") {
            const Icon = featureIcons[key] || Users

            return (
            <Grid item xs={6} sm={4} md={3} key={key}>
                <Box className="text-center p-4 bg-background rounded-lg">
                  <Icon size={24} className="mx-auto mb-2 text-primary" />
                  <Typography variant="h6" className="font-bold mb-1">
                    {value}
                  </Typography>
                  <Typography variant="body2" className="text-textSecondary">
                    {key.replace(/([A-Z])/g, " $1").trim()}
                  </Typography>
                </Box>
              </Grid>
            )
          }

          return null
        })}
      </Grid>

      {/* Amenities Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Amenities
      </Typography>
      <Grid container spacing={2} className="mb-6">
        {space.amenities.map((amenity: any, index: number) => (
          <Grid item xs={12} sm={6} md={4} key={index}>
            <Box className="flex items-center gap-3 p-3 bg-background rounded-lg">

              {featureIcons[amenity.icon.toLowerCase()] && (() => {
                const Icon = featureIcons[amenity.icon.toLowerCase()]

                return <Icon size={20} className="text-primary" />
              })()}
              <Typography variant="body2">
                {amenity.label}
              </Typography>
            </Box>
          </Grid>
        ))}
      </Grid>

      {/* Additional Features */}
      <Typography variant="h6" className="font-medium mb-4">
        Additional Features
      </Typography>
      <Box className="flex flex-wrap gap-2">
        {Object.entries(space.propertyFeatures).map(([key, value]) => {
          if (typeof value === "boolean" && value) {
            return (
              <Chip
                key={key}
                label={key.replace(/([A-Z])/g, " $1").trim()}
                variant="outlined"
                color="primary"
              />
            )
          }

          return null
        })}
      </Box>
    </div>
  )
}

export default FeaturesTab








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\ReviewsTab.tsx
"use client"

import { useState } from "react"

import {
  Box,
  Typography,
  Rating,
  Avatar,
  Divider,
  Button,
  LinearProgress,
  Grid,
  Card,
  CardContent,
  FormControl,
  InputLabel,
  Select,
  MenuItem
} from "@mui/material"
import { Star } from "lucide-react"

interface ReviewsTabProps {
  reviews: any[]
  rating: number
  reviewCount: number
}

const ReviewsTab = ({ reviews, rating, reviewCount }: ReviewsTabProps) => {
  const [filter, setFilter] = useState("all")

  // Calculate rating stats
  const ratingCounts = [5, 4, 3, 2, 1].map(star => ({
    star,
    count: reviews.filter(review => review.rating === star).length,
    percentage: (reviews.filter(review => review.rating === star).length / reviews.length) * 100
  }))

  // Filter reviews based on selection
  const filteredReviews = filter === "all"
    ? reviews
    : reviews.filter(review => review.rating === parseInt(filter))

  return (
    <Grid container spacing={6}>
      {/* Rating Summary Card */}
      <Grid item xs={12} md={4}>
        <Card>
          <CardContent>
            <Typography variant="h6" className="font-medium mb-4">
              Rating Summary
            </Typography>

            <Box className="flex flex-col items-center mb-6">
              <Typography variant="h2" className="font-bold">
                {rating}
              </Typography>
              <Rating value={rating} precision={0.1} readOnly size="large" />
              <Typography variant="body2" className="text-textSecondary mt-1">
                Based on {reviewCount} reviews
              </Typography>
            </Box>

            <Box className="space-y-2">
              {ratingCounts.map((item) => (
                <Box key={item.star} className="flex items-center gap-2">
                  <Box className="flex items-center w-10">
                    <Typography variant="body2">{item.star}</Typography>
                    <Star size={14} className="text-warning ml-0.5" />
                  </Box>
                  <LinearProgress
                    variant="determinate"
                    value={item.percentage}
                    className="flex-1 h-2 rounded-full"
                    color={item.star > 3 ? "success" : item.star > 1 ? "warning" : "error"}
                  />
                  <Typography variant="body2" className="w-8 text-right">
                    {item.count}
                  </Typography>
                </Box>
              ))}
            </Box>
          </CardContent>
        </Card>
      </Grid>

      {/* Reviews List */}
      <Grid item xs={12} md={8}>
        <Box className="flex justify-between items-center mb-6">
          <Typography variant="h6" className="font-medium">
            Reviews
          </Typography>

          <FormControl size="small" className="min-w-[120px]">
            <InputLabel>Filter</InputLabel>
            <Select
              value={filter}
              label="Filter"
              onChange={(e) => setFilter(e.target.value)}
            >
              <MenuItem value="all">All Ratings</MenuItem>
              <MenuItem value="5">5 Stars</MenuItem>
              <MenuItem value="4">4 Stars</MenuItem>
              <MenuItem value="3">3 Stars</MenuItem>
              <MenuItem value="2">2 Stars</MenuItem>
              <MenuItem value="1">1 Star</MenuItem>
            </Select>
          </FormControl>
        </Box>

        {filteredReviews.length > 0 ? (
          <Box className="space-y-4">
            {filteredReviews.map((review) => (
              <Box key={review.id}>
                <Box className="flex gap-4">
                  <Avatar
                    src={review.avatar}
                    alt={review.author}
                    className="w-10 h-10"
                  />
                  <Box className="flex-1">
                    <Box className="flex justify-between items-start">
                      <Box>
                        <Typography variant="subtitle1" className="font-medium">
                          {review.author}
                        </Typography>
                        <Box className="flex items-center gap-1">
                          <Rating value={review.rating} size="small" readOnly />
                          <Typography variant="body2" className="text-textSecondary">
                            â€¢ {review.date}
                          </Typography>
                        </Box>
                      </Box>
                      <Typography
                        variant="caption"
                        className="text-textSecondary bg-background rounded-full px-2 py-0.5"
                      >
                        {review.membershipType}
                      </Typography>
                    </Box>
                    <Typography variant="body2" className="mt-2">
                      {review.comment}
                    </Typography>
                  </Box>
                </Box>
                <Divider className="my-4" />
              </Box>
            ))}

            <Box className="text-center mt-6">
              <Button variant="outlined" color="primary">
                Load more reviews
              </Button>
            </Box>
          </Box>
        ) : (
          <Box className="text-center py-8">
            <Typography variant="body1">
              No reviews match your filter criteria.
            </Typography>
            <Button
              variant="text"
              color="primary"
              onClick={() => setFilter("all")}
              className="mt-2"
            >
              Show all reviews
            </Button>
          </Box>
        )}
      </Grid>
    </Grid>
  )
}

export default ReviewsTab
undefined









// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\index.tsx
"use client"

import { useState, useEffect } from "react"

import { Box } from "@mui/material"

import SpaceHeader from "./SpaceHeader"
import SpaceTabs from "./SpaceTabs"
import RelatedSpaces from "./RelatedSpaces"

// Sample data - in a real app, you would fetch this based on the ID
const mockSpaceData = {
  id: "1",
  title: "Creative Hub Studio",
  type: "Coworking Space",
  images: [
    "https://images.pexels.com/photos/1743555/pexels-photo-1743555.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    "https://images.pexels.com/photos/3932930/pexels-photo-3932930.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    "https://images.pexels.com/photos/1181406/pexels-photo-1181406.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2"
  ],
  featured: true,
  verified: true,
  rating: 4.8,
  reviewCount: 156,
  pricePerDay: 45,
  pricePerMonth: 800,
  capacity: 50,
  amenities: [
    { icon: "wifi", label: "High-Speed WiFi" },
    { icon: "coffee", label: "Coffee Bar" },
    { icon: "printer", label: "Printing Services" },
    { icon: "parking", label: "Parking Available" },
    { icon: "air-conditioning", label: "Air Conditioning" },
    { icon: "meeting-room", label: "Meeting Rooms" }
  ],
  propertyDetails: {
    address: "123 Innovation Street",
    city: "San Francisco",
    state: "CA",
    zipCode: "94105",
    type: "Commercial Building",
    yearBuilt: 2018,
    totalArea: 5000, // sq ft
    floors: 3,
    accessHours: "24/7",
    securitySystem: true,
    elevatorAccess: true,
    reception: true
  },
  propertyFeatures: {
    totalDesks: 50,
    privateOffices: 5,
    meetingRooms: 3,
    conferenceRooms: 1,
    phoneBooths: 4,
    kitchenettes: 2,
    restrooms: 4,
    showers: 2,
    bikeStorage: true,
    motherRoom: true
  },
  spaceAreas: [
    { name: "Open Workspace", area: 2500 },
    { name: "Private Offices", area: 1000 },
    { name: "Meeting Rooms", area: 800 },
    { name: "Common Areas", area: 700 }
  ],
  pricing: {
    dayPass: 45,
    weekPass: 200,
    monthPass: 800,
    dedicatedDesk: 350,
    privateOffice: 1200,
    meetingRoomHourly: 30,
    deposits: {
      required: true,
      amount: 500,
      refundable: true
    },
    discounts: [
      { type: "3-month commitment", amount: "10%" },
      { type: "6-month commitment", amount: "15%" },
      { type: "12-month commitment", amount: "20%" }
    ]
  },
  reviews: [
    {
      id: "1",
      author: "John Smith",
      avatar: "https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&w=600",
      date: "2 weeks ago",
      rating: 5,
      comment: "Fantastic workspace with great amenities. The community here is very welcoming and professional. High-speed internet never disappoints.",
      membershipType: "Monthly Member"
    },
    {
      id: "2",
      author: "Emily Chen",
      avatar: "https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?auto=compress&cs=tinysrgb&w=600",
      date: "1 month ago",
      rating: 4,
      comment: "Love the location and modern facilities. Meeting rooms are well-equipped. Only downside is that it can get a bit noisy during peak hours.",
      membershipType: "Dedicated Desk"
    },
    {
      id: "3",
      author: "Michael Brown",
      avatar: "https://images.pexels.com/photos/1681010/pexels-photo-1681010.jpeg?auto=compress&cs=tinysrgb&w=600",
      date: "2 months ago",
      rating: 5,
      comment: "The private office setup is perfect for our small team. Great value for money considering all the included amenities.",
      membershipType: "Private Office"
    }
  ],
  host: {
    name: "Sarah Wilson",
    avatar: "https://images.pexels.com/photos/774909/pexels-photo-774909.jpeg?auto=compress&cs=tinysrgb&w=600",
    role: "Community Manager",
    responseTime: "within 2 hours",
    memberSince: "2020",
    verifiedHost: true
  }
}

interface SpaceDetailsProps {
  id: string
}

const SpaceDetails = ({ id }: SpaceDetailsProps) => {
  const [spaceData, setSpaceData] = useState(mockSpaceData)

  useEffect(() => {
    // In a real app, fetch space data based on ID
    // For now, using mock data
  }, [id])

  return (
    <Box className="space-details-container">
      <SpaceHeader space={spaceData} />
      <SpaceTabs space={spaceData} />
      <RelatedSpaces currentSpaceId={spaceData.id} />
    </Box>
  )
}

export default SpaceDetails








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\RelatedSpaces.tsx
"use client"

import { Box, Typography, Grid, Card, CardContent, CardMedia, Chip, Button, Rating } from "@mui/material"
import { MapPin, Users, ArrowRight } from "lucide-react"

// Sample data - in a real app, this would be fetched based on the current space
const relatedSpaces = [
  {
    id: "2",
    title: "Downtown Workshop",
    type: "Studio Space",
    image: "https://images.pexels.com/photos/3932930/pexels-photo-3932930.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    location: "New York, NY",
    rating: 4.6,
    reviewCount: 89,
    pricePerDay: 65,
    capacity: 30
  },
  {
    id: "3",
    title: "Tech Innovation Center",
    type: "Coworking Space",
    image: "https://images.pexels.com/photos/1181406/pexels-photo-1181406.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    location: "Austin, TX",
    rating: 4.9,
    reviewCount: 203,
    pricePerDay: 55,
    capacity: 100
  },
  {
    id: "4",
    title: "Creative Studio Loft",
    type: "Studio Space",
    image: "https://images.pexels.com/photos/1743555/pexels-photo-1743555.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    location: "Los Angeles, CA",
    rating: 4.7,
    reviewCount: 156,
    pricePerDay: 75,
    capacity: 40
  }
]

interface RelatedSpacesProps {
  currentSpaceId: string
}

const RelatedSpaces = ({ currentSpaceId }: RelatedSpacesProps) => {
  // Filter out the current space
  const filteredSpaces = relatedSpaces.filter(space => space.id !== currentSpaceId)

  return (
    <Box className="mb-6">
      <Box className="flex justify-between items-center mb-6">
        <Typography variant="h6" className="font-medium">
          Similar Spaces
        </Typography>
        <Button
          variant="text"
          color="primary"
          endIcon={<ArrowRight size={18} />}
          className="text-sm"
        >
          View all
        </Button>
      </Box>

      <Grid container spacing={4}>
        {filteredSpaces.map((space) => (
          <Grid item xs={12} md={4} key={space.id}>
            <Card className="h-full transition-all duration-300 hover:shadow-lg hover:-translate-y-1">
              <CardMedia
                component="img"
                height="200"
                image={space.image}
                alt={space.title}
                className="h-48 object-cover"
              />
              <CardContent>
                <Typography variant="h6" className="font-semibold mb-1">
                  {space.title}
                </Typography>
                <Typography variant="body2" color="textSecondary" className="mb-2">
                  {space.type}
                </Typography>

                <Box className="flex items-center gap-2 mb-3">
                  <MapPin size={16} className="text-textSecondary" />
                  <Typography variant="body2" className="text-textSecondary">
                    {space.location}
                  </Typography>
                </Box>

                <Box className="flex items-center justify-between mb-4">
                  <Box className="flex items-center gap-1">
                    <Rating value={space.rating} precision={0.1} size="small" readOnly />
                    <Typography variant="body2" className="text-textSecondary">
                      ({space.reviewCount})
                    </Typography>
                  </Box>
                  <Box className="flex items-center gap-1">
                    <Users size={16} className="text-textSecondary" />
                    <Typography variant="body2" className="text-textSecondary">
                      Up to {space.capacity}
                    </Typography>
                  </Box>
                </Box>

                <Box className="flex items-center justify-between">
                  <Box>
                    <Typography variant="h6" className="font-semibold">
                      ${space.pricePerDay}
                    </Typography>
                    <Typography variant="caption" className="text-textSecondary">
                      per day
                    </Typography>
                  </Box>
                  <Button variant="outlined" color="primary">
                    View Details
                  </Button>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  )
}

export default RelatedSpaces








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\SpaceHeader.tsx
"use client"

import { useState } from "react"

import { MapPin, Clock, Star, CheckCircle, Share2, Bookmark, Calendar, X } from "lucide-react"


import { Box, Card, CardContent, Typography, Button, Chip, Avatar, Rating, IconButton, Modal } from "@mui/material"

import CustomIconButton from "@core/components/mui/IconButton"

interface SpaceHeaderProps {
  space: any
}

const SpaceHeader = ({ space }: SpaceHeaderProps) => {
  const [currentImageIndex, setCurrentImageIndex] = useState(0)
  const [showGallery, setShowGallery] = useState(false)

  const handleNextImage = () => {
    setCurrentImageIndex((prev) => (prev + 1) % space.images.length)
  }

  const handlePrevImage = () => {
    setCurrentImageIndex((prev) => (prev - 1 + space.images.length) % space.images.length)
  }

  return (
    <Card className="mb-6">
      {/* Image Gallery */}
      <Box className="relative h-[400px]">
        <img
          src='/images/spaces/1.jpg'
          alt={space.title}
          className="w-full h-full object-cover"
        />

        {/* Navigation arrows */}
        <Box className="absolute inset-0 flex items-center justify-between p-4">
          <IconButton
            onClick={handlePrevImage}
            className="bg-primary/80 hover:bg-white"
          >
            <X className="rotate-45" size={24} />
          </IconButton>
          <IconButton
            onClick={handleNextImage}
            className="bg-primary/80 hover:bg-white"
          >
            <X className="-rotate-45" size={24} />
          </IconButton>
        </Box>

        {/* Image counter */}
        <Chip
          label={`${currentImageIndex + 1}/${space.images.length}`}
          className="absolute bottom-4 right-4 bg-white/80"
        />

        {/* Featured badge */}
        {space.featured && (
          <Chip
            label="Featured"
            color="primary"
            className="absolute top-4 left-4"
          />
        )}

        {/* Action buttons */}
        <Box className="absolute top-4 right-4 flex gap-2">
          <CustomIconButton
            color="inherit"
            className="bg-primary/90 hover:bg-white"
            title="Share"
          >
            <Share2 size={20} />
          </CustomIconButton>
          <CustomIconButton
            color="inherit"
            className="bg-primary/90 hover:bg-white"
            title="Save"
          >
            <Bookmark size={20} />
          </CustomIconButton>
        </Box>
      </Box>

      <CardContent>
        <Box className="flex flex-col md:flex-row md:items-start md:justify-between gap-6">
          {/* Left side - Space info */}
          <Box className="flex-1">
            <Box className="flex items-center gap-2 mb-2">
              <Typography variant="h4" className="font-bold">
                {space.title}
              </Typography>
              {space.verified && (
                <CheckCircle className="text-success" size={24} />
              )}
            </Box>

            <Typography variant="h6" color="textSecondary" className="mb-4">
              {space.type}
            </Typography>

            <Box className="flex flex-wrap items-center gap-4 mb-4">
              <Box className="flex items-center gap-1">
                <MapPin size={18} className="text-textSecondary" />
                <Typography variant="body2">
                  {space.propertyDetails.address}, {space.propertyDetails.city}
                </Typography>
              </Box>
              <Box className="flex items-center gap-1">
                <Clock size={18} className="text-textSecondary" />
                <Typography variant="body2">
                  Access: {space.propertyDetails.accessHours}
                </Typography>
              </Box>
              <Box className="flex items-center gap-1">
                <Star size={18} className="text-warning" />
                <Typography variant="body2">
                  <span className="font-medium">{space.rating}</span>
                  <span className="text-textSecondary"> ({space.reviewCount} reviews)</span>
                </Typography>
              </Box>
            </Box>

            {/* Host info */}
            <Box className="flex items-center gap-3">
              <Avatar
                src={space.host.avatar}
                alt={space.host.name}
                className="w-12 h-12"
              />
              <Box>
                <Typography variant="subtitle1" className="font-medium">
                  Hosted by {space.host.name}
                </Typography>
                <Typography variant="body2" className="text-textSecondary">
                  Responds {space.host.responseTime}
                </Typography>
              </Box>
            </Box>
          </Box>

          {/* Right side - Pricing and booking */}
          <Box className="bg-background rounded-lg p-6 min-w-[300px]">
            <Box className="mb-4">
              <Typography variant="h4" className="font-bold mb-1">
                ${space.pricePerDay}
              </Typography>
              <Typography variant="body2" className="text-textSecondary">
                per day
              </Typography>
            </Box>

            <Box className="space-y-3 mb-6">
              <Typography variant="body2">
                <span className="font-medium">Monthly from:</span> ${space.pricePerMonth}
              </Typography>
              <Typography variant="body2">
                <span className="font-medium">Capacity:</span> Up to {space.capacity} people
              </Typography>
              <Typography variant="body2">
                <span className="font-medium">Minimum term:</span> 1 day
              </Typography>
            </Box>

            <Button
              variant="contained"
              color="primary"
              fullWidth
              size="large"
              startIcon={<Calendar size={20} />}
              className="mb-3"
            >
              Book Now
            </Button>

            <Button
              variant="outlined"
              color="primary"
              fullWidth
            >
              Contact Host
            </Button>
          </Box>
        </Box>
      </CardContent>

      {/* Image Gallery Modal */}
      <Modal
        open={showGallery}
        onClose={() => setShowGallery(false)}
        className="flex items-center justify-center"
      >
        <Box className="bg-white p-4 rounded-lg max-w-4xl w-full mx-4">
          <Box className="flex justify-between items-center mb-4">
            <Typography variant="h6">Gallery</Typography>
            <IconButton onClick={() => setShowGallery(false)}>
              <X size={24} />
            </IconButton>
          </Box>
          <Box className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {space.images.map((image: string, index: number) => (
              <img
                key={index}
                src={image}
                alt={`Space image ${index + 1}`}
                className="w-full h-48 object-cover rounded-lg cursor-pointer hover:opacity-90 transition-opacity"
                onClick={() => setCurrentImageIndex(index)}
              />
            ))}
          </Box>
        </Box>
      </Modal>
    </Card>
  )
}

export default SpaceHeader








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\SpaceTabs.tsx
"use client"

import { useState } from "react"

import { Box, Card, CardContent, Tabs, Tab } from "@mui/material"

import AboutTab from "./tabs/AboutTab"
import FeaturesTab from "./tabs/FeaturesTab"
import ReviewsTab from "./tabs/ReviewsTab"

interface TabPanelProps {
  children?: React.ReactNode
  index: number
  value: number
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`space-tabpanel-${index}`}
      aria-labelledby={`space-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ py: 3 }}>
          {children}
        </Box>
      )}
    </div>
  )
}

function a11yProps(index: number) {
  return {
    id: `space-tab-${index}`,
    "aria-controls": `space-tabpanel-${index}`,
  }
}

interface SpaceTabsProps {
  space: any
}

const SpaceTabs = ({ space }: SpaceTabsProps) => {
  const [value, setValue] = useState(0)

  const handleChange = (event: React.SyntheticEvent, newValue: number) => {
    setValue(newValue)
  }

  return (
    <Card className="mb-6">
      <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
        <Tabs
          value={value}
          onChange={handleChange}
          aria-label="space details tabs"
          className="px-4"
        >
          <Tab label="About" {...a11yProps(0)} />
          <Tab label="Features & Amenities" {...a11yProps(1)} />
          <Tab label={`Reviews (${space.reviewCount})`} {...a11yProps(2)} />
        </Tabs>
      </Box>
      <CardContent>
        <TabPanel value={value} index={0}>
          <AboutTab space={space} />
        </TabPanel>
        <TabPanel value={value} index={1}>
          <FeaturesTab space={space} />
        </TabPanel>
        <TabPanel value={value} index={2}>
          <ReviewsTab
            reviews={space.reviews}
            rating={space.rating}
            reviewCount={space.reviewCount}
          />
        </TabPanel>
      </CardContent>
    </Card>
  )
}

export default SpaceTabs
undefined









// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\index.jsx
"use client"

import { useState } from "react"

import { Box, TextField, FormControl, InputLabel, Select, MenuItem, InputAdornment, Typography, Grid, Card, CardContent, CardMedia, Chip, Button, Rating, Tooltip } from "@mui/material"
import { MapPin, Users, Calendar, Wifi, Coffee, Printer, Search, X } from "lucide-react"

import CustomIconButton from "@core/components/mui/IconButton"

// Sample data - in a real app, this would come from an API
const mockSpaces = [
  {
    id: "1",
    title: "Creative Hub Studio",
    type: "Coworking Space",
    image: "/images/spaces/1.jpg",
    location: "San Francisco, CA",
    rating: 4.8,
    reviewCount: 156,
    pricePerDay: 45,
    capacity: 50,
    featured: true,
    amenities: [
      { icon: Wifi, label: "High-Speed WiFi" },
      { icon: Coffee, label: "Coffee Bar" },
      { icon: Printer, label: "Printing Services" }
    ],
    tags: ["24/7 Access", "Meeting Rooms", "Event Space"]
  },
  {
    id: "2",
    title: "Downtown Workshop",
    type: "Studio Space",
    image: "/images/spaces/2.jpg",
    location: "New York, NY",
    rating: 4.6,
    reviewCount: 89,
    pricePerDay: 65,
    capacity: 30,
    featured: false,
    amenities: [
      { icon: Wifi, label: "High-Speed WiFi" },
      { icon: Coffee, label: "Coffee Bar" }
    ],
    tags: ["Natural Light", "Photography Studio", "Equipment Rental"]
  },
  {
    id: "3",
    title: "Tech Innovation Center",
    type: "Coworking Space",
    image: "/images/spaces/3.jpg",
    location: "Austin, TX",
    rating: 4.9,
    reviewCount: 203,
    pricePerDay: 55,
    capacity: 100,
    featured: true,
    amenities: [
      { icon: Wifi, label: "High-Speed WiFi" },
      { icon: Coffee, label: "Coffee Bar" },
      { icon: Printer, label: "Printing Services" }
    ],
    tags: ["Standing Desks", "Private Offices", "Conference Rooms"]
  }
]

const SpacesList = () => {
  const [searchTerm, setSearchTerm] = useState("")
  const [spaceType, setSpaceType] = useState("all")
  const [priceRange, setPriceRange] = useState("all")

  // Filter spaces based on search and filters
  const filteredSpaces = mockSpaces.filter(space => {
    const matchesSearch = space.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         space.location.toLowerCase().includes(searchTerm.toLowerCase())

    const matchesType = spaceType === "all" || space.type.toLowerCase().includes(spaceType.toLowerCase())

    const matchesPrice = priceRange === "all" ||
                        (priceRange === "under50" && space.pricePerDay < 50) ||
                        (priceRange === "50to100" && space.pricePerDay >= 50 && space.pricePerDay <= 100) ||
                        (priceRange === "over100" && space.pricePerDay > 100)

    return matchesSearch && matchesType && matchesPrice
  })

  return (
    <Box>
      {/* Header */}
      <Box className="mb-8">
        <Typography variant="h4" className="font-bold mb-2">
          Explore Spaces
        </Typography>
        <Typography variant="body1" className="text-textSecondary">
          Find the perfect coworking space or studio for your needs
        </Typography>
      </Box>

      {/* Filters */}
      <Box className="mb-8 flex flex-col sm:flex-row gap-4">
        <TextField
          placeholder="Search spaces..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="flex-1"
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <Search className="text-textSecondary" size={20} />
              </InputAdornment>
            ),
            endAdornment: searchTerm && (
              <InputAdornment position="end">
                <CustomIconButton size="small" onClick={() => setSearchTerm("")}>
                  <X size={20} />
                </CustomIconButton>
              </InputAdornment>
            )
          }}
        />

        <FormControl className="min-w-[200px]">
          <InputLabel>Space Type</InputLabel>
          <Select
            value={spaceType}
            label="Space Type"
            onChange={(e) => setSpaceType(e.target.value)}
          >
            <MenuItem value="all">All Types</MenuItem>
            <MenuItem value="coworking">Coworking Space</MenuItem>
            <MenuItem value="studio">Studio Space</MenuItem>
          </Select>
        </FormControl>

        <FormControl className="min-w-[200px]">
          <InputLabel>Price Range</InputLabel>
          <Select
            value={priceRange}
            label="Price Range"
            onChange={(e) => setPriceRange(e.target.value)}
          >
            <MenuItem value="all">All Prices</MenuItem>
            <MenuItem value="under50">Under $50/day</MenuItem>
            <MenuItem value="50to100">$50 - $100/day</MenuItem>
            <MenuItem value="over100">Over $100/day</MenuItem>
          </Select>
        </FormControl>
      </Box>

      {/* Results count */}
      <Typography variant="body2" className="mb-4 text-textSecondary">
        Showing {filteredSpaces.length} {filteredSpaces.length === 1 ? "space" : "spaces"}
      </Typography>

      {/* Spaces Grid */}
      <Grid container spacing={4}>
        {filteredSpaces.map((space) => (
          <Grid item xs={12} md={6} lg={4} key={space.id}>
            <Card className="h-full transition-all duration-300 hover:shadow-lg hover:-translate-y-1">
              <Box className="relative">
                <CardMedia
                  component="img"
                  height="200"
                  image={space.image}
                  alt={space.title}
                  className="h-48 object-cover"
                />
                {space.featured && (
                  <Chip
                    label="Featured"
                    color="primary"
                    size="small"
                    className="absolute top-4 left-4"
                  />
                )}
              </Box>

              <CardContent>
                <Box className="mb-4">
                  <Typography variant="h6" className="font-semibold mb-1">
                    {space.title}
                  </Typography>
                  <Typography variant="body2" color="textSecondary" className="mb-2">
                    {space.type}
                  </Typography>

                  <Box className="flex items-center gap-2 mb-3">
                    <MapPin size={16} className="text-textSecondary" />
                    <Typography variant="body2" className="text-textSecondary">
                      {space.location}
                    </Typography>
                  </Box>

                  <Box className="flex items-center gap-4 mb-4">
                    <Box className="flex items-center gap-1">
                      <Rating value={space.rating} precision={0.1} size="small" readOnly />
                      <Typography variant="body2" className="text-textSecondary">
                        ({space.reviewCount})
                      </Typography>
                    </Box>
                    <Box className="flex items-center gap-1">
                      <Users size={16} className="text-textSecondary" />
                      <Typography variant="body2" className="text-textSecondary">
                        Up to {space.capacity}
                      </Typography>
                    </Box>
                  </Box>

                  {/* Amenities */}
                  <Box className="flex flex-wrap gap-2 mb-4">
                    {space.amenities.map((amenity, index) => (
                      <Tooltip key={index} title={amenity.label}>
                        <Box className="p-1.5 bg-background rounded-full">
                          <amenity.icon size={16} className="text-textSecondary" />
                        </Box>
                      </Tooltip>
                    ))}
                  </Box>

                  {/* Tags */}
                  <Box className="flex flex-wrap gap-2 mb-4">
                    {space.tags.map((tag, index) => (
                      <Chip
                        key={index}
                        label={tag}
                        size="small"
                        variant="tonal"
                        color="primary"
                      />
                    ))}
                  </Box>

                  {/* Price and Action */}
                  <Box className="flex items-center justify-between mt-4">
                    <Box>
                      <Typography variant="h6" className="font-semibold">
                        ${space.pricePerDay}
                      </Typography>
                      <Typography variant="caption" className="text-textSecondary">
                        per day
                      </Typography>
                    </Box>
                    <Button
                      variant="contained"
                      color="primary"
                      startIcon={<Calendar size={18} />}
                    >
                      Book Now
                    </Button>
                  </Box>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  )
}

export default SpacesList










// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\products\ProductDetails\ProductDescription\Reviews\manage-reviews\index.jsx
'use client'

// src/views/apps/explore/products/ProductDetails/ProductDescription/Reviews/manage-reviews/index.jsx
import { useEffect, useMemo, useState } from 'react';

import Link from 'next/link';
import { useParams } from 'next/navigation';

import Card from '@mui/material/Card';
import Button from '@mui/material/Button';
import Checkbox from '@mui/material/Checkbox';
import Chip from '@mui/material/Chip';
import MenuItem from '@mui/material/MenuItem';
import Rating from '@mui/material/Rating';
import TablePagination from '@mui/material/TablePagination';
import Typography from '@mui/material/Typography';
import classnames from 'classnames';
import { rankItem } from '@tanstack/match-sorter-utils';
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
  getFilteredRowModel,
  getFacetedRowModel,
  getFacetedUniqueValues,
  getFacetedMinMaxValues,
  getPaginationRowModel,
  getSortedRowModel,
} from '@tanstack/react-table';

import CustomAvatar from '@core/components/mui/Avatar';
import OptionMenu from '@core/components/option-menu';
import CustomTextField from '@core/components/mui/TextField';
import TablePaginationComponent from '@components/TablePaginationComponent';
import { getLocalizedUrl } from '@/utils/i18n';
import tableStyles from '@core/styles/table.module.css';

const fuzzyFilter = (row, columnId, value, addMeta) => {
  const itemRank = rankItem(row.getValue(columnId), value);

  addMeta({ itemRank });

  return itemRank.passed;
};

const DebouncedInput = ({ value: initialValue, onChange, debounce = 500, ...props }) => {
  const [value, setValue] = useState(initialValue);

  useEffect(() => {
    setValue(initialValue);
  }, [initialValue]);
  useEffect(() => {
    const timeout = setTimeout(() => {
      onChange(value);
    }, debounce);

    return () => clearTimeout(timeout);
  }, [value]);

  return <CustomTextField {...props} value={value} onChange={(e) => setValue(e.target.value)} />;
};

// Static reviews data
const staticReviews = [
  {
    id: 1,
    product: 'iPhone 14 Pro',
    companyName: 'Super Retina XDR display footnote Pro Motion technology',
    productImage: '/images/apps/ecommerce/product-1.png',
    reviewer: 'Zane Scraggs',
    email: 'zscraggs0@flavors.me',
    avatar: '/images/avatars/1.png',
    date: '5/28/2020',
    status: 'Published',
    review: 2,
    head: 'lorem ipsum dolor',
    para: 'Nulla ut erat id mauris vulputate elementum. Nullam varius. Nulla facilisi.',
  },
  {
    id: 2,
    product: 'Echo Dot (4th Gen)',
    companyName: 'Echo Dot Smart speaker with Alexa',
    productImage: '/images/apps/ecommerce/product-2.png',
    reviewer: 'Stacey Hallgalley',
    email: 'shallgalley1@google.nl',
    avatar: '/images/avatars/2.png',
    date: '3/21/2021',
    status: 'Published',
    review: 5,
    head: 'libero ut',
    para: 'Aliquam quis turpis eget elit sodales scelerisque. Mauris sit amet eros. Suspendisse accumsan tortor quis turpis.',
  },
  {
    id: 3,
    product: 'Dohioue Wall Clock',
    companyName: 'Modern 10 Inch Battery Operated Wall Clocks',
    productImage: '/images/apps/ecommerce/product-3.png',
    reviewer: 'Francyne Coulthurst',
    email: 'fcoulthurst2@upenn.edu',
    avatar: '/images/avatars/3.png',
    date: '8/10/2020',
    status: 'Published',
    review: 2,
    head: 'neque libero convallis',
    para: 'Phasellus in felis. Donec semper sapien a libero. Nam dui.',
  },
  {
    id: 4,
    product: 'INZCOU Running Shoes',
    companyName: 'Lightweight Tennis Shoes Non Slip Gym Workout Shoes',
    productImage: '/images/apps/ecommerce/product-4.png',
    reviewer: 'Nate De Mitris',
    email: 'nde3@intel.com',
    avatar: '/images/avatars/4.png',
    date: '12/18/2021',
    status: 'Pending',
    review: 3,
    head: 'accumsan tellus nisi eu',
    para: 'Praesent id massa id nisl venenatis lacinia. Aenean sit amet justo. Morbi ut odio.',
  },
  {
    id: 5,
    product: 'Apple Watch Series 7',
    companyName: 'Starlight Aluminum Case with Starlight Sport Band.',
    productImage: '/images/apps/ecommerce/product-5.png',
    reviewer: 'Ethel Zanardii',
    email: 'ezanardii4@mapy.cz',
    avatar: '/images/avatars/5.png',
    date: '6/12/2020',
    status: 'Pending',
    review: 1,
    head: 'etiam faucibus cursus',
    para: 'Cras non velit nec nisi vulputate nonummy. Maecenas tincidunt lacus at velit. Vivamus vel nulla eget eros elementum pellentesque.',
  },
];

const columnHelper = createColumnHelper();

const ManageReviewsTable = () => {
  const [status, setStatus] = useState('All');
  const [rowSelection, setRowSelection] = useState({});
  const [allData, setAllData] = useState(staticReviews);
  const [data, setData] = useState(staticReviews);
  const [globalFilter, setGlobalFilter] = useState('');
  const { lang: locale } = useParams();

  console.log('allData in ManageReviewsTable:', allData); // Debug log

  const columns = useMemo(
    () => [
      {
        id: 'select',
        header: ({ table }) => (
          <Checkbox
            checked={table.getIsAllRowsSelected()}
            indeterminate={table.getIsSomeRowsSelected()}
            onChange={table.getToggleAllRowsSelectedHandler()}
          />
        ),
        cell: ({ row }) => (
          <Checkbox
            checked={row.getIsSelected()}
            disabled={!row.getCanSelect()}
            indeterminate={row.getIsSomeSelected()}
            onChange={row.getToggleSelectedHandler()}
          />
        ),
      },

      columnHelper.accessor('reviewer', {
        header: 'Reviewer',
        cell: ({ row }) => (
          <div className="flex items-center gap-4">
            <CustomAvatar src={row.original.avatar} size={34} />
            <div className="flex flex-col items-start">
              <Typography
                component={Link}
                href={getLocalizedUrl('/apps/ecommerce/customers/details/879861', locale)}
                color="primary.main"
                className="font-medium"
              >
                {row.original.reviewer}
              </Typography>
              <Typography variant="body2">{row.original.email}</Typography>
            </div>
          </div>
        ),
      }),
      columnHelper.accessor('head', {
        header: 'Review',
        sortingFn: (rowA, rowB) => rowA.original.review - rowB.original.review,
        cell: ({ row }) => (
          <div className="flex flex-col gap-1">
            <Rating
              name="product-review"
              readOnly
              value={row.original.review}
              emptyIcon={<i className="tabler-star-filled" />}
            />
            <Typography className="font-medium" color="text.primary">
              {row.original.head}
            </Typography>
            <Typography variant="body2" className="text-wrap">
              {row.original.para}
            </Typography>
          </div>
        ),
      }),
      columnHelper.accessor('date', {
        header: 'Date',
        sortingFn: (rowA, rowB) => {
          const dateA = new Date(rowA.original.date);
          const dateB = new Date(rowB.original.date);

          return dateA.getTime() - dateB.getTime();
        },
        cell: ({ row }) => {
          const date = new Date(row.original.date).toLocaleDateString('en-US', {
            month: 'short',
            day: '2-digit',
            year: 'numeric',
          });

          return <Typography>{date}</Typography>;
        },
      }),

      columnHelper.accessor('actions', {
        header: 'Actions',
        cell: ({ row }) => (
          <OptionMenu
            iconButtonProps={{ size: 'medium' }}
            iconClassName="text-textSecondary"
            options={[
              {
                text: 'View',
                icon: 'tabler-eye',
                href: getLocalizedUrl('/apps/ecommerce/orders/details/5434', locale),
                linkProps: { className: 'flex items-center gap-2 is-full plb-2 pli-4' },
              },
              {
                text: 'Delete',
                icon: 'tabler-trash',
                menuItemProps: {
                  onClick: () => {
                    const updatedData = allData.filter((review) => review.id !== row.original.id);

                    setAllData(updatedData);
                    setData(updatedData);
                  },
                  className: 'flex items-center',
                },
              },
            ]}
          />
        ),
        enableSorting: false,
      }),
    ],
    [allData, locale]
  );

  const table = useReactTable({
    data,
    columns,
    filterFns: { fuzzy: fuzzyFilter },
    state: { rowSelection, globalFilter },
    initialState: { pagination: { pageSize: 10 } },
    enableRowSelection: true,
    globalFilterFn: fuzzyFilter,
    onRowSelectionChange: setRowSelection,
    onGlobalFilterChange: setGlobalFilter,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getFacetedRowModel: getFacetedRowModel(),
    getFacetedUniqueValues: getFacetedUniqueValues(),
    getFacetedMinMaxValues: getFacetedMinMaxValues(),
  });

  useEffect(() => {
    const filteredData = allData.filter((review) => {
      if (status !== 'All' && review.status !== status) return false;

      return true;
    });

    setData(filteredData);
  }, [status, allData]);

  return (
    <Card>
      <div className="flex flex-wrap justify-between gap-4 p-6">

        <div className="flex max-sm:flex-col sm:items-center gap-4 max-sm:is-full">
          <CustomTextField
            select
            value={table.getState().pagination.pageSize}
            onChange={(e) => table.setPageSize(Number(e.target.value))}
            className="sm:is-[140px] flex-auto is-full"
          >
            <MenuItem value="10">10</MenuItem>
            <MenuItem value="25">25</MenuItem>
            <MenuItem value="50">50</MenuItem>
          </CustomTextField>
          <CustomTextField
            select
            fullWidth
            value={status}
            onChange={(e) => setStatus(e.target.value)}
            className="is-full sm:is-[140px] flex-auto"
          >
            <MenuItem value="All">All</MenuItem>
            <MenuItem value="Published">Published</MenuItem>
            <MenuItem value="Pending">Pending</MenuItem>
          </CustomTextField>

        </div>
      </div>
      <div className="overflow-x-auto">
        <table className={tableStyles.table}>
          <thead>
            {table.getHeaderGroups().map((headerGroup) => (
              <tr key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <th key={header.id}>
                    {header.isPlaceholder ? null : (
                      <div
                        className={classnames({
                          'flex items-center': header.column.getIsSorted(),
                          'cursor-pointer select-none': header.column.getCanSort(),
                        })}
                        onClick={header.column.getToggleSortingHandler()}
                      >
                        {flexRender(header.column.columnDef.header, header.getContext())}
                        {{
                          asc: <i className="tabler-chevron-up text-xl" />,
                          desc: <i className="tabler-chevron-down text-xl" />,
                        }[header.column.getIsSorted()] ?? null}
                      </div>
                    )}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody>
            {table.getFilteredRowModel().rows.length === 0 ? (
              <tr>
                <td colSpan={table.getVisibleFlatColumns().length} className="text-center">
                  <Typography>No reviews available for this product.</Typography>
                </td>
              </tr>
            ) : (
              table
                .getRowModel()
                .rows.slice(0, table.getState().pagination.pageSize)
                .map((row) => (
                  <tr key={row.id} className={classnames({ selected: row.getIsSelected() })}>
                    {row.getVisibleCells().map((cell) => (
                      <td key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</td>
                    ))}
                  </tr>
                ))
            )}
          </tbody>
        </table>
      </div>
      <TablePagination
        component={() => <TablePaginationComponent table={table} />}
        count={table.getFilteredRowModel().rows.length}
        rowsPerPage={table.getState().pagination.pageSize}
        page={table.getState().pagination.pageIndex}
        onPageChange={(_, page) => table.setPageIndex(page)}
      />
    </Card>
  );
};

export default ManageReviewsTable;










// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\products\ProductDetails\ProductDescription\Reviews\ReviewsForm\index.jsx
'use client'
import { Card, Box, Typography, TextField, Button, Rating } from '@mui/material'

const ReviewsForm = () => {
  return (
    <>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h6">Write Feedback Here:</Typography>
        <Rating value={5} readOnly />
      </Box>

      <Card sx={{ p: 3 }}>
        <Box component="form">
          <Box display="grid" gridTemplateColumns="repeat(2, 1fr)" gap={3} mb={3}>
            <TextField label="Your Name" fullWidth />
            <TextField label="Your Email" fullWidth type="email" />
            <TextField label="Your Phone No" fullWidth type="tel" />
            <TextField label="Your Subject" fullWidth />
          </Box>
          <TextField
            label="Write Comment"
            multiline
            rows={6}
            fullWidth
            sx={{ mb: 3 }}
          />
          <Button variant="contained" size="large">
            Submit
          </Button>
        </Box>
      </Card>
    </>
  )
}

export default ReviewsForm
undefinedundefined









// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\products\ProductDetails\ProductDescription\Reviews\index.jsx
'use client'

import { Card, Box, Typography, Stack, LinearProgress, Rating, Avatar } from '@mui/material'

import ReviewsForm from './ReviewsForm'

import ManageReviewsTable from './manage-reviews'

import OrderListTable from '@/views/apps/mybuisnesses/skill/detaille/profile/customer-right/overview/OrderListTable'

import { getStatisticsData, getEcommerceData } from '@/app/server/actions'




const Reviews =  () => {





  return (
    <Card sx={{ mb: 3, p: 3 }}>



      <Typography variant="h6" my={3}>Customers Feedback:</Typography>

      {/* Rating Statistics */}
      <Card sx={{ p: 3, mb: 3 }}>
        <Stack direction={{ xs: 'column', md: 'row' }} spacing={3}>
          <Box flex={2}>
            {[5, 4, 3, 2, 1].map((stars) => (
              <Stack key={stars} direction="row" alignItems="center" spacing={2} mb={2}>
                <Rating value={stars} max={stars} readOnly />
                <LinearProgress
                  variant="determinate"
                  value={stars * 20}
                  sx={{ flex: 1, height: 5 }}
                />
                <Typography>{[359, 208, 124, 89, 4][5 - stars]}</Typography>
              </Stack>
            ))}
          </Box>
          <Box flex={1} textAlign="center">
            <Typography variant="h2">4.28</Typography>
            <Rating value={4.28} precision={0.1} readOnly size="large" />
            <Typography>of 3250 Reviews</Typography>
          </Box>
        </Stack>
      </Card>

      <ReviewsForm />

      <ManageReviewsTable  />

      {/* Reviews List */}
    </Card>
  )
}

export default Reviews
undefined









// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\products\ProductDetails\ProductDescription\Description.jsx
'use client'
import { Card, Typography } from '@mui/material'

const Description = () => {
  return (
    <Card sx={{ mb: 3, p: 3 }}>
      <Typography variant="body1" paragraph>
        The Apple MacBook Pro 16.2 is a cutting-edge laptop designed to
        deliver exceptional performance and advanced features for
        professionals and creative enthusiasts.
      </Typography>
      <Typography variant="body1" paragraph>
        Stay connected with a variety of ports, including Thunderbolt 3,
        USB-C, and audio jacks. These versatile ports support high-speed
        data transfer and external device connections.
      </Typography>
      <Typography variant="body1" paragraph>
        Equipped with the latest processors, ample RAM, and high-performance
        graphics, the MacBook Pro 16.2 ensures smooth multitasking.
      </Typography>
    </Card>
  )
}

export default Description








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\products\ProductDetails\ProductDescription\index.jsx
'use client'


// ** React Imports

import { useState } from 'react'

import { Tab, Tabs, Box } from '@mui/material'


import Description from './Description'
import Specification from './Specification'
import Reviews from './Reviews'

const ProductDescription = () => {
  const [value, setValue] = useState('description')

  const handleChange = (event, newValue) => {
    setValue(newValue)
  }


  return (
    <Box sx={{ width: '100%' }}>
      <Tabs
        value={value}
        onChange={handleChange}
        variant="fullWidth"
        sx={{
          '& .MuiTabs-indicator': {
            backgroundColor: 'primary.main',
          }
        }}
      >
        <Tab label="Description" value="description" />
        <Tab label="Specification" value="specification" />
        <Tab label="Reviews" value="reviews" />
      </Tabs>

      <Box sx={{ mt: 3 }}>
        {value === 'description' && <Description />}
        {value === 'specification' && <Specification />}
        {value === 'reviews' && <Reviews />}
      </Box>
    </Box>
  )
}

export default ProductDescription








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\products\ProductDetails\ProductDescription\Specification.jsx
'use client'
import { Card, Table, TableBody, TableCell, TableRow, Typography } from '@mui/material'

const Specification = () => {
  return (
    <Card sx={{ mb: 3, p: 3 }}>
      <Table>
        <TableBody>
          <TableRow>
            <TableCell sx={{ fontWeight: 'bold' }}>Brand</TableCell>
            <TableCell>Apple</TableCell>
          </TableRow>
          <TableRow>
            <TableCell sx={{ fontWeight: 'bold' }}>Categories</TableCell>
            <TableCell>Brand New</TableCell>
          </TableRow>
          <TableRow>
            <TableCell sx={{ fontWeight: 'bold' }}>SKU</TableCell>
            <TableCell>01</TableCell>
          </TableRow>
          <TableRow>
            <TableCell sx={{ fontWeight: 'bold' }}>Price</TableCell>
            <TableCell>$399</TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </Card>
  )
}

export default Specification










// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\products\ProductDetails\ProductImage\index.jsx
'use client'
import { useState } from 'react'

import Image from 'next/image'

import { Tabs, Tab, Box } from '@mui/material'

const ProductImage = () => {
  const [selectedMedia, setSelectedMedia] = useState(0)

  const mediaItems = [
    { type: 'image', src: '/images/products/product-15.png' },
    { type: 'image', src: '/images/products/product-16.png' },
    { type: 'image', src: '/images/products/product-17.png' },
    {
      type: 'video',
      src: '/images/products/product1647.mp4',
      thumbnail: '/images/products/product-17.png'
    }
  ]

  return (
    <Box>
      {/* Main Product Image (on top) */}
      <Box sx={{
        position: 'relative',
        height: 400,
        width: '100%',
        mb: 2,
        border: 1,
        borderColor: 'divider',
        borderRadius: 2,
        overflow: 'hidden',
        backgroundColor: 'white',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center'
      }}>
        {mediaItems[selectedMedia].type === 'image' ? (
          <Image
            src={mediaItems[selectedMedia].src}
            alt={`Product view ${selectedMedia + 1}`}
            fill
            style={{ objectFit: 'contain' }}
            priority
          />
        ) : (
          <video
            controls
            style={{
              width: '100%',
              height: '100%',
              objectFit: 'contain'
            }}
          >
            <source src={mediaItems[selectedMedia].src} type="video/mp4" />
            Your browser does not support the video tag.
          </video>
        )}
      </Box>

      {/* Thumbnail Navigation */}
      <Tabs
        value={selectedMedia}
        onChange={(_, newValue) => setSelectedMedia(newValue)}
        variant="scrollable"
        scrollButtons="auto"
        sx={{
          '& .MuiTabs-indicator': {
            display: 'none'
          }
        }}
      >
        {mediaItems.map((item, i) => (
          <Tab
            key={i}
            value={i}
            icon={
              <Box sx={{
                position: 'relative',
                width: 80,
                height: 80,
                border: 1,
                borderColor: i === selectedMedia ? 'primary.main' : 'divider',
                borderRadius: 1,
                overflow: 'hidden',
                backgroundColor: 'white'
              }}>

               {item.type === 'image' ? (
                  <Image
                    src={item.src}
                    alt={`Thumbnail ${i+1}`}
                    fill
                    style={{ objectFit: 'contain' }}
                  />
                ) : (
                  <>
                    <Image
                      src={item.thumbnail}
                      alt="Video thumbnail"
                      fill
                      style={{ objectFit: 'cover' }}
                    />
                    <Box sx={{
                      position: 'absolute',
                      top: '50%',
                      left: '50%',
                      transform: 'translate(-50%, -50%)',
                      color: 'white',
                      fontSize: 24
                    }}>
                    â–¶
                  </Box>
                </>
              )}
            </Box>
          }
        />
      ))}
    </Tabs>
  </Box>
)
}

export default ProductImage
undefinedundefined









// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\products\ProductDetails\CapacitySelector.jsx
// CapacitySelector.js
'use client'

import { Radio, RadioGroup, FormControl, FormControlLabel, Typography, Box } from '@mui/material'

const CapacitySelector = () => {
  return (
    <Box sx={{ mb: 3 }}>
      <Typography variant="subtitle2" sx={{ mb: 1 }}>Capacity:</Typography>
      <FormControl>
        <RadioGroup row defaultValue="512 GB">
          <FormControlLabel value="512 GB" control={<Radio />} label="512 GB" />
          <FormControlLabel value="1 TB" control={<Radio />} label="1 TB" />
        </RadioGroup>
      </FormControl>
    </Box>
  )
}

export default CapacitySelector








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\products\ProductDetails\ColorSelector.jsx
// ColorSelector.js
'use client'

import { Typography, Box, IconButton } from '@mui/material'

const ColorSelector = () => {
  return (
    <Box sx={{ mb: 3 }}>
      <Typography variant="subtitle2" sx={{ mb: 1 }}>Color:</Typography>
      <Box sx={{ display: 'flex', gap: 1 }}>
        {['Silver', 'Space Gray'].map((color) => (
          <IconButton
            key={color}
            sx={{
              bgcolor: color === 'Silver' ? '#c0c0c0' : '#4c4c4c',
              width: 40,
              height: 40,
              border: 2,
              borderColor: 'primary.main'
            }}
          />
        ))}
      </Box>
    </Box>
  )
}

export default ColorSelector








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\products\ProductDetails\index.jsx
'use client'

// ** React Imports
import React from 'react'


import { ShoppingCart, FavoriteBorder, RemoveRedEye, Check, Facebook, Twitter, LinkedIn, WhatsApp } from '@mui/icons-material'
import { Card, Box, Typography, Button, Divider, Chip, IconButton } from '@mui/material'

import ProductImage from './ProductImage'
import CapacitySelector from './CapacitySelector'
import StyleSelector from './StyleSelector'
import ColorSelector from './ColorSelector'
import ProductQuantity from './ProductQuantity'
import ProductDescription from './ProductDescription'

const ProductDetails = () => {
  return (
    <>
      {/* Existing Product Details Card */}
      <Card sx={{ mb: 4, borderRadius: 2 }}>
        <Box sx={{ p: 4 }}>
          <Box sx={{ display: 'flex', flexDirection: { xs: 'column', lg: 'row' }, gap: 4 }}>
            {/* Product Image */}
            <Box sx={{ width: { xs: '100%', lg: '50%' } }}>
              <ProductImage />
            </Box>

            {/* Product Details */}
            <Box sx={{ width: { xs: '100%', lg: '70%' }, mt: { xs: 3, lg: 0 } }}>
              <Chip
                label="In stock"
                color="success"
                size="small"
                icon={<Check fontSize="small" />}
                sx={{ mb: 2 }}
              />

              <Typography variant="h6" sx={{ mb: 2 }}>
                Apple MacBook Pro 16.2&quot; with Liquid Retina XDR Display, M2 Max Chip with 12-Core CPU
              </Typography>

              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2, pb: 2, borderBottom: 1, borderColor: 'divider' }}>
                {[...Array(5)].map((_, i) => (
                  <Typography key={i} color="warning.main">
                    â˜…
                  </Typography>
                ))}
                <Typography variant="body2" sx={{ ml: 1 }}>
                  (5 Reviews)
                </Typography>
              </Box>

              <Typography variant="h5" sx={{ mb: 3 }}>
                $3,499{' '}
                <Typography component="span" sx={{ textDecoration: 'line-through', color: 'text.secondary', ml: 1 }}>
                  $3,799
                </Typography>
              </Typography>

              {/* Selectors */}
              <StyleSelector />
              <CapacitySelector />
              <ColorSelector />

              {/* Quantity and Add to Cart */}
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>
                <ProductQuantity />
                <Button variant="contained" startIcon={<ShoppingCart />}>
                  Add To Cart
                </Button>
              </Box>

              {/* Wishlist and Viewers */}
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1, mb: 3 }}>
                <Button startIcon={<FavoriteBorder />} sx={{ justifyContent: 'flex-start' }}>
                  Add to wishlist
                </Button>
                <Button startIcon={<RemoveRedEye />} sx={{ justifyContent: 'flex-start' }}>
                  565 people are viewing the products
                </Button>
              </Box>

              <Divider sx={{ my: 2 }} />

              {/* Features */}
              <Box sx={{ mb: 3 }}>
                {['Free delivery today', '100% money back Guarantee', '7 days product return policy'].map((item) => (
                  <Box key={item} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <Check color="success" sx={{ mr: 1 }} />
                    <Typography variant="body2">{item}</Typography>
                  </Box>
                ))}
              </Box>

              {/* Product Info */}
              <Box sx={{ mb: 3 }}>
                <Typography variant="body2">
                  <strong>SKU:</strong> SMTGS6T45
                </Typography>
                <Typography variant="body2">
                  <strong>Category:</strong> Computer
                </Typography>
                <Typography variant="body2">
                  <strong>Tags:</strong> laptop, macbook, PC
                </Typography>
              </Box>

              {/* Social Sharing */}
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <Typography variant="body2">Share:</Typography>
                {[
                  { icon: <Facebook />, url: 'https://facebook.com/' },
                  { icon: <Twitter />, url: 'https://twitter.com/' },
                  { icon: <LinkedIn />, url: 'https://linkedin.com/' },
                  { icon: <WhatsApp />, url: 'https://whatsapp.com/' },
                ].map((social, i) => (
                  <IconButton key={i} href={social.url} target="_blank" size="small">
                    {social.icon}
                  </IconButton>
                ))}
              </Box>
            </Box>
          </Box>
        </Box>
      </Card>

      {/* New Card for Product Description */}
      <Card sx={{ mb: 4, borderRadius: 2 }}>
        <Box sx={{ p: 4 }}>
          <Typography variant="h6" sx={{ mb: 2 }}>
            Product Description
          </Typography>
          <ProductDescription />
        </Box>
      </Card>
    </>
  )
}

export default ProductDetails








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\products\ProductDetails\ProductQuantity.jsx
'use client'
import { useState } from 'react'

import { IconButton, TextField, Box } from '@mui/material'

import { Add, Remove } from '@mui/icons-material'


const ProductQuantity = () => {
  const [count, setCount] = useState(1)

  return (
    <Box sx={{ display: 'flex', alignItems: 'center' }}>
      <IconButton onClick={() => setCount(c => Math.max(1, c - 1))}>
        <Remove />
      </IconButton>
      <TextField
        value={count}
        size="small"
        sx={{ width: 60, textAlign: 'center' }}
        inputProps={{ style: { textAlign: 'center' }}}
      />
      <IconButton onClick={() => setCount(c => c + 1)}>
        <Add />
      </IconButton>
    </Box>
  )
}

export default ProductQuantity








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\products\ProductDetails\StyleSelector.jsx
// StyleSelector.js
'use client'

import { Radio, RadioGroup, FormControl, FormControlLabel, Typography, Box } from '@mui/material'

const StyleSelector = () => {
  return (
    <Box sx={{ mb: 3 }}>
      <Typography variant="subtitle2" sx={{ mb: 1 }}>Style:</Typography>
      <FormControl>
        <RadioGroup row defaultValue="Apple M1 Max Chip">
          <FormControlLabel
            value="Apple M1 Max Chip"
            control={<Radio />}
            label="Apple M1 Max Chip"
          />
          <FormControlLabel
            value="Apple M1 Pro Chip"
            control={<Radio />}
            label="Apple M1 Pro Chip"
          />
        </RadioGroup>
      </FormControl>
    </Box>
  )
}

export default StyleSelector










// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\skills\profile-details\tabs\AboutTab.tsx
import React from 'react';

import { Box, Typography, Divider } from '@mui/material';
import { Globe, MessageSquare } from 'lucide-react';

interface AboutTabProps {
  profile: any;
}

const AboutTab: React.FC<AboutTabProps> = ({ profile }) => {
  return (
    <div>
      {/* About section */}
      <Typography variant="h6" className="font-medium mb-3">
        About
      </Typography>
      <Typography variant="body1" className="mb-6 whitespace-pre-line">
        {profile.about}
      </Typography>

      <Divider className="my-6" />

      {/* Skills section with progress bars */}
      <Typography variant="h6" className="font-medium mb-4">
        Skills & Expertise
      </Typography>

      <Box className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        {profile.skills.map((skill: any, index: number) => (
          <Box key={index} className="mb-2">
            <Box className="flex justify-between mb-1">
              <Typography variant="body2" className="font-medium">
                {skill.title}
              </Typography>
              <Typography variant="body2" className="text-textSecondary">
                {skill.level}%
              </Typography>
            </Box>
            <Box className="w-full bg-background rounded-full h-2">
              <Box
                className={`h-2 rounded-full`}
                sx={{
                  width: `${skill.level}%`,
                  bgcolor: `${skill.color}.main`
                }}
              />
            </Box>
          </Box>
        ))}
      </Box>

      <Divider className="my-6" />

      {/* Additional Info section */}
      <Typography variant="h6" className="font-medium mb-4">
        Additional Information
      </Typography>

      <Box className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <Box>
          <Typography variant="subtitle2" className="text-textSecondary mb-1">
            Languages
          </Typography>
          <Typography variant="body1">
            {profile.languages.join(', ')}
          </Typography>
        </Box>

        <Box>
          <Typography variant="subtitle2" className="text-textSecondary mb-1">
            Member Since
          </Typography>
          <Typography variant="body1">
            {profile.memberSince}
          </Typography>
        </Box>

        <Box className="col-span-1 sm:col-span-2 flex flex-col sm:flex-row gap-2 sm:gap-4 mt-4">
          <Box className="flex items-center gap-2">
            <Globe size={20} className="text-primary" />
            <Typography variant="body2">
              Available for freelance work
            </Typography>
          </Box>
          <Box className="flex items-center gap-2">
            <MessageSquare size={20} className="text-primary" />
            <Typography variant="body2">
              Responds in {profile.responseTime}
            </Typography>
          </Box>
        </Box>
      </Box>
    </div>
  );
};

export default AboutTab;








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\skills\profile-details\tabs\PortfolioTab.tsx
"use client"

import React, { useState } from 'react';

import {
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  CardMedia,
  Button,
  Modal,
  IconButton,
  CardActionArea
} from '@mui/material';

import { ExternalLink, X, ArrowLeft, ArrowRight } from 'lucide-react';

interface PortfolioItem {
  id: string;
  title: string;
  image: string;
  category: string;
  link: string;
}

interface PortfolioTabProps {
  portfolioItems: PortfolioItem[];
}

const PortfolioTab: React.FC<PortfolioTabProps> = ({ portfolioItems }) => {
  const [open, setOpen] = useState(false);
  const [selectedItem, setSelectedItem] = useState<PortfolioItem | null>(null);

  const handleOpen = (item: PortfolioItem) => {
    setSelectedItem(item);
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  // Navigation in the modal
  const handleNext = () => {
    if (!selectedItem) return;
    const currentIndex = portfolioItems.findIndex(item => item.id === selectedItem.id);
    const nextIndex = (currentIndex + 1) % portfolioItems.length;

    setSelectedItem(portfolioItems[nextIndex]);
  };

  const handlePrev = () => {
    if (!selectedItem) return;
    const currentIndex = portfolioItems.findIndex(item => item.id === selectedItem.id);
    const prevIndex = (currentIndex - 1 + portfolioItems.length) % portfolioItems.length;

    setSelectedItem(portfolioItems[prevIndex]);
  };

  return (
    <div>
      <Typography variant="h6" className="font-medium mb-4">
        Portfolio
      </Typography>

      {portfolioItems.length === 0 ? (
        <Typography variant="body1" className="text-textSecondary">
          No portfolio items to display.
        </Typography>
      ) : (
        <Grid container spacing={3}>
          {portfolioItems.map((item) => (
            <Grid item xs={12} sm={6} md={4} key={item.id}>
              <Card className="h-full transition-all duration-300 hover:shadow-md hover:scale-[1.02]">
                <CardActionArea onClick={() => handleOpen(item)}>
                  <CardMedia
                    component="img"
                    height="140"
                    image={item.image}
                    alt={item.title}
                    className="h-44 object-cover"
                  />
                  <CardContent>
                    <Typography variant="subtitle1" className="font-medium">
                      {item.title}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {item.category}
                    </Typography>
                  </CardContent>
                </CardActionArea>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}

      {/* Portfolio Item Modal */}
      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="portfolio-modal-title"
        aria-describedby="portfolio-modal-description"
      >
        <Box className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-4 md:p-6 rounded-lg shadow-xl max-w-3xl w-[90%] max-h-[90vh] overflow-auto">
          {selectedItem && (
            <>
              <Box className="flex justify-between items-center mb-4">
                <Typography id="portfolio-modal-title" variant="h6" component="h2">
                  {selectedItem.title}
                </Typography>
                <IconButton onClick={handleClose} size="small">
                  <X size={20} />
                </IconButton>
              </Box>

              <Box className="relative">
                <img
                  src={selectedItem.image}
                  alt={selectedItem.title}
                  className="w-full h-auto rounded-md max-h-[50vh] object-contain bg-background"
                />

                {/* Navigation arrows */}
                <IconButton
                  className="absolute left-2 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white shadow-md"
                  onClick={handlePrev}
                >
                  <ArrowLeft size={20} />
                </IconButton>
                <IconButton
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white shadow-md"
                  onClick={handleNext}
                >
                  <ArrowRight size={20} />
                </IconButton>
              </Box>

              <Box className="mt-4">
                <Typography variant="body2" className="text-textSecondary mb-2">
                  {selectedItem.category}
                </Typography>
                <Button

                  color="primary"
                  startIcon={<ExternalLink size={18} />}
                  href={selectedItem.link}
                  target="_blank"
                >
                  View Project
                </Button>
              </Box>
            </>
          )}
        </Box>
      </Modal>
    </div>
  );
};

export default PortfolioTab;








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\skills\profile-details\tabs\ReviewsTab.tsx
import React, { useState } from 'react';

import {
  Box,
  Typography,
  Rating,
  Divider,
  Avatar,
  Card,
  CardContent,
  Button,
  LinearProgress,
  Select,
  MenuItem,
  FormControl,
  InputLabel,

} from '@mui/material';

// eslint-disable-next-line import/named
import { SelectChangeEvent } from '@mui/material/Select';

import { Star } from 'lucide-react';

interface Review {
  id: string;
  author: string;
  avatar: string;
  date: string;
  rating: number;
  comment: string;
  project: string;
}

interface ReviewsTabProps {
  reviews: Review[];
  rating: number;
  reviewCount: number;
}

const ReviewsTab: React.FC<ReviewsTabProps> = ({ reviews, rating, reviewCount }) => {
  const [filter, setFilter] = useState('all');

  // Calculate rating stats
  const ratingCounts = [5, 4, 3, 2, 1].map(star => ({
    star,
    count: reviews.filter(review => review.rating === star).length,
    percentage: (reviews.filter(review => review.rating === star).length / reviews.length) * 100
  }));

  // Filter reviews based on selection
  const filteredReviews = filter === 'all'
    ? reviews
    : reviews.filter(review => review.rating === parseInt(filter));

  const handleFilterChange = (event: SelectChangeEvent) => {
    setFilter(event.target.value);
  };

  return (
    <div>
      <Box className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        {/* Rating summary */}
        <Card className="col-span-1 h-full">
          <CardContent>
            <Typography variant="h6" className="font-medium mb-4">
              Rating Summary
            </Typography>

            <Box className="flex flex-col items-center mb-4">
              <Typography variant="h2" className="font-bold">
                {rating}
              </Typography>
              <Rating value={rating} precision={0.5} readOnly />
              <Typography variant="body2" className="text-textSecondary mt-1">
                Based on {reviewCount} reviews
              </Typography>
            </Box>

            <Box className="space-y-2 mt-6">
              {ratingCounts.map((item) => (
                <Box key={item.star} className="flex items-center gap-2">
                  <Box className="flex items-center w-10">
                    <Typography variant="body2">{item.star}</Typography>
                    <Star size={14} className="text-warning ml-0.5" />
                  </Box>
                  <LinearProgress
                    variant="determinate"
                    value={item.percentage}
                    className="flex-1 h-2 rounded-full"
                    color={item.star > 3 ? "success" : item.star > 1 ? "warning" : "error"}
                  />
                  <Typography variant="body2" className="w-8 text-right">
                    {item.count}
                  </Typography>
                </Box>
              ))}
            </Box>
          </CardContent>
        </Card>

        {/* Reviews filter and list */}
        <Card className="md:col-span-2">
          <CardContent>
            <Box className="flex justify-between items-center mb-4">
              <Typography variant="h6" className="font-medium">
                Client Reviews
              </Typography>

              <FormControl size="small" className="min-w-[120px]">
                <InputLabel id="review-filter-label">Filter</InputLabel>
                <Select
                  labelId="review-filter-label"
                  value={filter}
                  label="Filter"
                  onChange={handleFilterChange}
                >
                  <MenuItem value="all">All Ratings</MenuItem>
                  <MenuItem value="5">5 Stars</MenuItem>
                  <MenuItem value="4">4 Stars</MenuItem>
                  <MenuItem value="3">3 Stars</MenuItem>
                  <MenuItem value="2">2 Stars</MenuItem>
                  <MenuItem value="1">1 Star</MenuItem>
                </Select>
              </FormControl>
            </Box>

            {filteredReviews.length > 0 ? (
              <Box className="space-y-4">
                {filteredReviews.map((review) => (
                  <Box key={review.id} className="mb-4">
                    <Box className="flex gap-4">
                      <Avatar
                        src={review.avatar}
                        alt={review.author}
                        className="w-10 h-10"
                      />
                      <Box className="flex-1">
                        <Box className="flex justify-between items-start">
                          <Box>
                            <Typography variant="subtitle1" className="font-medium">
                              {review.author}
                            </Typography>
                            <Box className="flex items-center gap-1">
                              <Rating value={review.rating} size="small" readOnly />
                              <Typography variant="body2" className="text-textSecondary">
                                â€¢ {review.date}
                              </Typography>
                            </Box>
                          </Box>
                          <Typography variant="caption" className="text-textSecondary bg-background rounded-full px-2 py-0.5">
                            {review.project}
                          </Typography>
                        </Box>
                        <Typography variant="body2" className="mt-2">
                          {review.comment}
                        </Typography>
                      </Box>
                    </Box>
                    <Divider className="mt-4" />
                  </Box>
                ))}

                <Box className="text-center mt-6">
                  <Button variant="contained" color="primary">
                    Load more reviews
                  </Button>
                </Box>
              </Box>
            ) : (
              <Box className="text-center py-8">
                <Typography variant="body1">
                  No reviews match your filter criteria.
                </Typography>
                <Button
                  variant="text"
                  color="primary"
                  onClick={() => setFilter('all')}
                  className="mt-2"
                >
                  Show all reviews
                </Button>
              </Box>
            )}
          </CardContent>
        </Card>
      </Box>
    </div>
  );
};

export default ReviewsTab;
undefined









// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\skills\profile-details\index.tsx
"use client"

import { useState, useEffect } from "react"

import Grid from "@mui/material/Grid"
import Box from "@mui/material/Box"

import ProfileHeader from "./ProfileHeader"
import ProfileTabs from "./ProfileTabs"
import RelatedProfiles from "./RelatedProfiles"

// Sample data - in a real app, you would fetch this based on the ID
const mockProfileData = {
  id: "1",
  name: "Sophie Anderson",
  avatar: "https://images.pexels.com/photos/774909/pexels-photo-774909.jpeg?auto=compress&cs=tinysrgb&w=600",
  designation: "Senior UI/UX Designer",
  location: "San Francisco, CA",
  available: true,
  featured: true,
  verified: true,
  rating: 4.9,
  reviewCount: 123,
  completedProjects: 67,
  startingPrice: 75,
  responseTime: "2 hours",
  languages: ["English", "Spanish", "French"],
  memberSince: "January 2022",
  about: "Creative designer with over 8 years of experience creating user-centered designs for digital products. Specializing in mobile applications, websites, and brand identity. Passionate about creating clean, intuitive interfaces that deliver exceptional user experiences.",
  skills: [
    { title: "UI Design", level: 95, color: "primary" },
    { title: "UX Research", level: 85, color: "secondary" },
    { title: "Wireframing", level: 90, color: "success" },
    { title: "Prototyping", level: 92, color: "info" },
    { title: "Illustration", level: 75, color: "warning" }
  ],
  portfolioItems: [
    {
      id: "1",
      title: "Health App Redesign",
      image: "https://images.pexels.com/photos/3184360/pexels-photo-3184360.jpeg?auto=compress&cs=tinysrgb&w=600",
      category: "Mobile App",
      link: "#"
    },
    {
      id: "2",
      title: "E-commerce Website",
      image: "https://images.pexels.com/photos/230544/pexels-photo-230544.jpeg?auto=compress&cs=tinysrgb&w=600",
      category: "Web Design",
      link: "#"
    },
    {
      id: "3",
      title: "Brand Identity System",
      image: "https://images.pexels.com/photos/669615/pexels-photo-669615.jpeg?auto=compress&cs=tinysrgb&w=600",
      category: "Branding",
      link: "#"
    },
    {
      id: "4",
      title: "Smart Home Dashboard",
      image: "https://images.pexels.com/photos/3183132/pexels-photo-3183132.jpeg?auto=compress&cs=tinysrgb&w=600",
      category: "UI Design",
      link: "#"
    }
  ],
  reviews: [
    {
      id: "1",
      author: "Michael Chen",
      avatar: "https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&w=600",
      date: "2 weeks ago",
      rating: 5,
      comment: "Sophie was incredible to work with. She has an amazing eye for design and really understood our brand. The deliverables exceeded our expectations, and she was always responsive to feedback.",
      project: "Website Redesign"
    },
    {
      id: "2",
      author: "Jessica Kim",
      avatar: "https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?auto=compress&cs=tinysrgb&w=600",
      date: "1 month ago",
      rating: 5,
      comment: "Working with Sophie was a dream. She took our vague ideas and transformed them into a beautiful, functional design. Her communication was excellent throughout the project.",
      project: "Mobile App Design"
    },
    {
      id: "3",
      author: "David Lopez",
      avatar: "https://images.pexels.com/photos/1681010/pexels-photo-1681010.jpeg?auto=compress&cs=tinysrgb&w=600",
      date: "2 months ago",
      rating: 4,
      comment: "Sophie delivered high-quality designs on time and was very professional throughout. The only reason I'm not giving 5 stars is because we needed a few more revision rounds than expected, but the final result was great.",
      project: "Brand Identity"
    }
  ],
  chips: [
    { title: "UI Design", color: "primary" },
    { title: "UX Design", color: "secondary" },
    { title: "Figma", color: "success" },
    { title: "Sketch", color: "info" },
    { title: "Adobe XD", color: "warning" }
  ]
}

interface ProfileDetailsProps {
  id: string
}

const ProfileDetails = ({ id }: ProfileDetailsProps) => {
  const [profileData, setProfileData] = useState(mockProfileData)

  useEffect(() => {
    // In a real app, fetch profile data based on ID
    // For now, using mock data
  }, [id])

  return (
    <Box className="profile-details-container">
      <ProfileHeader profile={profileData} />
      <ProfileTabs profile={profileData} />
      <RelatedProfiles currentProfileId={profileData.id} />
    </Box>
  )
}

export default ProfileDetails








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\skills\profile-details\ProfileHeader.tsx
"use client"

import { MessageCircle, Share2, Bookmark, Award, MapPin, Clock, Star, CheckCircle } from "lucide-react"


import { Badge, Box, Button, Chip, Tooltip, Typography, Avatar, Card } from "@mui/material"

import CustomIconButton from "@core/components/mui/IconButton"


interface ProfileHeaderProps {
  profile: any
}

const ProfileHeader: React.FC<ProfileHeaderProps> = ({ profile }) => {
  return (
    <Card className="mb-6 overflow-hidden">
      {/* Banner */}
      <Box
        className="h-40 md:h-64 w-full relative bg-gradient-to-r from-primary-600 to-primary-800"
      >
        {/* Featured chip */}
        {profile.featured && (
          <Chip
            label="Featured"
            color="primary"
            size="small"
            className="absolute top-4 left-4 z-10"
            sx={{
              backgroundColor: "primary.main",
              color: "white",
            }}
          />
        )}

        {/* Action buttons */}
        <Box className="absolute top-4 right-4 flex gap-2">
          <Tooltip title="Share profile">
            <CustomIconButton color="inherit" variant="contained" className="bg-primary hover:bg-white">
              <Share2 size={18} />
            </CustomIconButton>
          </Tooltip>
          <Tooltip title="Save to favorites">
            <CustomIconButton color="inherit" variant="contained" className="bg-primary hover:bg-white">
              <Bookmark size={18} />
            </CustomIconButton>
          </Tooltip>
        </Box>
      </Box>

      {/* Profile info section */}
      <Box className="px-6 md:px-8 pt-16 pb-6 relative">
        {/* Avatar */}
        <Avatar
          src={profile.avatar}
          alt={profile.name}
          className="absolute -top-16 left-8 w-32 h-32 border-4 border-white shadow-lg"
          sx={{ width: 128, height: 128 }}
        />

        <Box className="md:ml-36 flex flex-col md:flex-row md:items-center md:justify-between">
          <Box>
            {/* Name and verification */}
            <Box className="flex items-center gap-2 mb-1">
              <Typography variant="h4" className="font-semibold">
                {profile.name}
              </Typography>
              {profile.verified && (
                <Tooltip title="Verified Profile">
                  <CheckCircle size={20} className="text-success" />
                </Tooltip>
              )}
            </Box>

            {/* Designation */}
            <Typography variant="h6" className="text-textSecondary mb-2">
              {profile.designation}
            </Typography>

            {/* Location and response time */}
            <Box className="flex flex-wrap items-center gap-x-4 gap-y-1 mb-3">
              <Box className="flex items-center gap-1 text-textSecondary">
                <MapPin size={16} />
                <Typography variant="body2">{profile.location}</Typography>
              </Box>
              <Box className="flex items-center gap-1 text-textSecondary">
                <Clock size={16} />
                <Typography variant="body2">Responds in {profile.responseTime}</Typography>
              </Box>
              <Box className="flex items-center gap-1">
                <Star size={16} className="text-warning" />
                <Typography variant="body2">
                  <span className="font-medium">{profile.rating}</span>
                  <span className="text-textSecondary"> ({profile.reviewCount} reviews)</span>
                </Typography>
              </Box>
            </Box>

            {/* Skills/chips */}
            <Box className="flex flex-wrap gap-2 mt-2">
              {profile.chips.map((chip: any, index: number) => (
                <Chip
                  key={index}
                  label={chip.title}
                  color={chip.color}
                  size="small"
                  variant="outlined"
                  className="transition-all hover:scale-105"
                />
              ))}
            </Box>
          </Box>

          {/* Action buttons */}
          <Box className="flex gap-3 mt-4 md:mt-0">
            <Button
              variant="contained"
              color="primary"
              startIcon={<MessageCircle size={18} />}
              className="shadow-md"
            >
              Contact
            </Button>
            <Button
              variant="outlined"
              color="secondary"
              startIcon={<Award size={18} />}
            >
              View Portfolio
            </Button>
          </Box>
        </Box>
      </Box>

      {/* Stats bar */}
      <Box className="grid grid-cols-3 border-t border-divider bg-background">
        <Box className="py-4 px-2 text-center border-r border-divider">
          <Typography variant="h6" className="font-semibold">
            {profile.completedProjects}
          </Typography>
          <Typography variant="body2" className="text-textSecondary">
            Projects
          </Typography>
        </Box>
        <Box className="py-4 px-2 text-center border-r border-divider">
          <Typography variant="h6" className="font-semibold">
            ${profile.startingPrice}
          </Typography>
          <Typography variant="body2" className="text-textSecondary">
            Starting Price
          </Typography>
        </Box>
        <Box className="py-4 px-2 text-center">
          <Typography variant="h6" className="font-semibold">
            {profile.memberSince}
          </Typography>
          <Typography variant="body2" className="text-textSecondary">
            Member Since
          </Typography>
        </Box>
      </Box>
    </Card>
  )
}

export default ProfileHeader








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\skills\profile-details\ProfileTabs.tsx
"use client"

import { useState } from "react"

import { Box, Tabs, Tab, Typography, Card, CardContent } from "@mui/material"

import AboutTab from "./tabs/AboutTab"
import PortfolioTab from "./tabs/PortfolioTab"
import ReviewsTab from "./tabs/ReviewsTab"

interface TabPanelProps {
  children?: React.ReactNode
  index: number
  value: number
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`profile-tabpanel-${index}`}
      aria-labelledby={`profile-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ py: 3 }}>
          {children}
        </Box>
      )}
    </div>
  )
}

function a11yProps(index: number) {
  return {
    id: `profile-tab-${index}`,
    "aria-controls": `profile-tabpanel-${index}`,
  }
}

interface ProfileTabsProps {
  profile: any
}

const ProfileTabs: React.FC<ProfileTabsProps> = ({ profile }) => {
  const [value, setValue] = useState(0)

  const handleChange = (event: React.SyntheticEvent, newValue: number) => {
    setValue(newValue)
  }

  return (
    <Card className="mb-6">
      <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
        <Tabs
          value={value}
          onChange={handleChange}
          aria-label="profile tabs"
          className="px-4"
          indicatorColor="primary"
          textColor="primary"
        >
          <Tab label="About" {...a11yProps(0)} />
          <Tab label="Portfolio" {...a11yProps(1)} />
          <Tab label={`Reviews (${profile.reviewCount})`} {...a11yProps(2)} />
        </Tabs>
      </Box>
      <CardContent>
        <TabPanel value={value} index={0}>
          <AboutTab profile={profile} />
        </TabPanel>
        <TabPanel value={value} index={1}>
          <PortfolioTab portfolioItems={profile.portfolioItems} />
        </TabPanel>
        <TabPanel value={value} index={2}>
          <ReviewsTab reviews={profile.reviews} rating={profile.rating} reviewCount={profile.reviewCount} />
        </TabPanel>
      </CardContent>
    </Card>
  )
}

export default ProfileTabs








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\skills\profile-details\RelatedProfiles.tsx
"use client"

import { Box, Typography, Grid, Card, CardContent, Avatar, Rating, Chip, Button } from "@mui/material"
import { ArrowRight } from "lucide-react"

// This would typically be fetched from an API
const relatedProfiles = [
  {
    id: "2",
    name: "Alex Johnson",
    avatar: "https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&w=600",
    designation: "Full Stack Developer",
    rating: 4.7,
    reviewCount: 58,
    skills: [
      { title: "React", color: "primary" as "primary" },
      { title: "Node.js", color: "secondary" as "secondary" }
    ]
  },
  {
    id: "3",
    name: "Maya Chen",
    avatar: "https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?auto=compress&cs=tinysrgb&w=600",
    designation: "Product Designer",
    rating: 4.9,
    reviewCount: 72,
    skills: [
      { title: "UI Design", color: "success" as "success" },
      { title: "Figma", color: "info" as "info" }
    ]
  },
  {
    id: "4",
    name: "Marcus Williams",
    avatar: "https://images.pexels.com/photos/1516680/pexels-photo-1516680.jpeg?auto=compress&cs=tinysrgb&w=600",
    designation: "Motion Designer",
    rating: 4.6,
    reviewCount: 41,
    skills: [
      { title: "After Effects", color: "warning" as "warning" },
      { title: "Premiere Pro", color: "error" as "error" }
    ]
  }
]

interface RelatedProfilesProps {
  currentProfileId: string
}

const RelatedProfiles: React.FC<RelatedProfilesProps> = ({ currentProfileId }) => {
  // Filter out the current profile if it's in the list
  const filteredProfiles = relatedProfiles.filter(profile => profile.id !== currentProfileId)

  return (
    <Box className="mb-6">
      <Box className="flex justify-between items-center mb-4">
        <Typography variant="h6" className="font-medium">
          You might also like
        </Typography>
        <Button
          variant="text"
          color="primary"
          endIcon={<ArrowRight size={18} />}
          className="text-sm"
        >
          View all
        </Button>
      </Box>

      <Grid container spacing={3}>
        {filteredProfiles.map((profile) => (
          <Grid item xs={12} sm={6} md={4} key={profile.id}>
            <Card className="transition-all duration-300 hover:shadow-md hover:-translate-y-1">
              <CardContent className="text-center">
                <Avatar
                  src={profile.avatar}
                  alt={profile.name}
                  className="mx-auto mb-3 w-20 h-20 border-4 border-solid border-background"
                  sx={{ width: 80, height: 80 }}
                />

                <Typography variant="h6" className="font-medium">
                  {profile.name}
                </Typography>
                <Typography variant="body2" className="text-textSecondary mb-2">
                  {profile.designation}
                </Typography>

                <Box className="flex items-center justify-center gap-1 mb-3">
                  <Rating value={profile.rating} precision={0.1} size="small" readOnly />
                  <Typography variant="body2" className="text-textSecondary">
                    ({profile.reviewCount})
                  </Typography>
                </Box>

                <Box className="flex flex-wrap gap-2 justify-center mb-4">
                  {profile.skills.map((skill, index) => (
                    <Chip
                      key={index}
                      label={skill.title}
                      color={skill.color}
                      size="small"
                      variant="outlined"
                    />
                  ))}
                </Box>

                <Button variant="outlined" color="primary" fullWidth>
                  View Profile
                </Button>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  )
}

export default RelatedProfiles
undefined









// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\skills\index.jsx
'use client'

import { useState, useEffect } from 'react';

import NextLink from 'next/link';
import { useParams } from 'next/navigation';

import Grid from '@mui/material/Grid2';
import Avatar from '@mui/material/Avatar';
import Chip from '@mui/material/Chip';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import Button from '@mui/material/Button';
import TextField from '@mui/material/TextField';
import InputAdornment from '@mui/material/InputAdornment';
import Box from '@mui/material/Box';
import Rating from '@mui/material/Rating';
import Tooltip from '@mui/material/Tooltip';
import FormControl from '@mui/material/FormControl';
import Select from '@mui/material/Select';
import MenuItem from '@mui/material/MenuItem';
import InputLabel from '@mui/material/InputLabel';
import Badge from '@mui/material/Badge';

import OptionMenu from '@core/components/option-menu';
import CustomIconButton from '@core/components/mui/IconButton';

const SkillProviders = ({ data = [] }) => {
  const [filteredData, setFilteredData] = useState(data);
  const [searchTerm, setSearchTerm] = useState('');
  const [skillFilter, setSkillFilter] = useState('all');

  const skillCategories = ['all', 'design', 'video', 'copywriting', 'voiceover'];
  const { lang: locale } = useParams();

  useEffect(() => {
    let result = [...data];

    if (searchTerm) {
      result = result.filter(
        (item) =>
          item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          item.designation.toLowerCase().includes(searchTerm.toLowerCase()),
      );
    }

    if (skillFilter !== 'all') {
      result = result.filter(
        (item) => item.chips && item.chips.some((chip) => chip.title.toLowerCase() === skillFilter.toLowerCase()),
      );
    }

    setFilteredData(result);
  }, [data, searchTerm, skillFilter]);

  if (!Array.isArray(data)) {
    console.error('SkillProviders: Expected array, got:', data);

    return (
      <Grid container spacing={6}>
        <Grid size={{ xs: 12 }}>
          <Typography variant="body1" align="center" color="error">
            Error: Invalid data format. Please try again later.
          </Typography>
        </Grid>
      </Grid>
    );
  }

  return (
    <Box className="skill-providers-container">
      {/* Search and Filter Controls */}
      <Box className="mb-8 flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
        <TextField
          placeholder="Search skill providers..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          variant="outlined"
          size="small"
          className="min-w-[240px] w-full sm:w-auto"
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <i className="tabler-search text-textSecondary" />
              </InputAdornment>
            ),
            endAdornment: searchTerm && (
              <InputAdornment position="end">
                <CustomIconButton size="small" onClick={() => setSearchTerm('')} className="text-textSecondary">
                  <i className="tabler-x" />
                </CustomIconButton>
              </InputAdornment>
            ),
          }}
        />
        <FormControl size="small" className="min-w-[180px] w-full sm:w-auto">
          <InputLabel id="skill-filter-label">Filter by skill</InputLabel>
          <Select
            labelId="skill-filter-label"
            value={skillFilter}
            label="Filter by skill"
            onChange={(e) => setSkillFilter(e.target.value)}
          >
            {skillCategories.map((category) => (
              <MenuItem key={category} value={category}>
                {category.charAt(0).toUpperCase() + category.slice(1)}
              </MenuItem>
            ))}
          </Select>
        </FormControl>
      </Box>

      {/* Results count */}
      <Typography variant="body2" className="mb-4 text-textSecondary">
        Showing {filteredData.length} {filteredData.length === 1 ? 'provider' : 'providers'}
      </Typography>

      {/* Provider Cards Grid */}
      <Grid container spacing={6}>
        {filteredData.length > 0 ? (
          filteredData.map((item, index) => (
            <Grid size={{ xs: 12, sm: 6, md: 4 }} key={index}>

                <Card
                  sx={{ cursor: 'pointer' }} // Add cursor: pointer via sx
                  className="relative transition-all duration-300 hover:shadow-lg hover:translate-y-[-4px] overflow-hidden"
                  onClick={(e) => {
                    // Prevent navigation if clicking interactive elements
                    if (e.target.closest('button, a, [role="menuitem"], [role="button"]')) {
                      e.stopPropagation();
                    }
                  }}
                >
                  {item.featured && (
                    <Chip label="Featured" color="primary" size="small" className="absolute top-4 left-4 z-10" />
                  )}
                  <OptionMenu
                    iconClassName="text-textDisabled"
                    options={[
                      { text: 'View Profile', icon: 'tabler-user' },
                      { text: 'Share Profile', icon: 'tabler-share' },
                      { divider: true },
                      {
                        text: 'Report',
                        icon: 'tabler-flag',
                        menuItemProps: { className: 'text-error hover:bg-[var(--mui-palette-error-lightOpacity)]' },
                      },
                    ]}
                    iconButtonProps={{ className: 'absolute top-4 end-4 text-textDisabled z-10' }}
                  />
                  <NextLink
                    href={`/${locale}/apps/explore/skills/1`}
                    passHref
                    
                  >
                  <CardContent className="flex flex-col items-center p-6">
                    <Badge
                      overlap="circular"
                      anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
                      badgeContent={
                        <Tooltip title={item.available ? 'Available now' : 'Limited availability'}>
                          <Box
                            className="w-3.5 h-3.5 rounded-full border-2 border-white"
                            sx={{ backgroundColor: item.available ? 'success.main' : 'warning.main' }}
                          />
                        </Tooltip>
                      }
                    >
                      <Avatar src={item.avatar} className="w-24 h-24 border-4 border-solid border-background shadow-md" />
                    </Badge>
                    <Box className="flex flex-col items-center text-center mt-4 mb-2">
                      <Typography variant="h5" className="font-semibold">
                        {item.name}
                      </Typography>
                      <Typography variant="body2" className="text-textSecondary">
                        {item.designation}
                      </Typography>
                    </Box>
                    <Box className="flex items-center justify-center gap-1 mb-4">
                      <Rating value={item.rating || 4.5} precision={0.5} size="small" readOnly />
                      <Typography variant="body2" className="text-textSecondary">
                        ({item.reviewCount || '24'})
                      </Typography>
                    </Box>
                    <Box className="flex items-center gap-2 flex-wrap justify-center mb-5">
                      {Array.isArray(item.chips) &&
                        item.chips.map((chip, chipIndex) => (
                          <NextLink href={`/skills/${chip.title.toLowerCase()}`} passHref key={chipIndex}>
                            <Chip
                              variant="tonal"
                              label={chip.title}
                              color={chip.color}
                              size="small"
                              component="a"
                              clickable
                              className="transition-all hover:scale-105"
                            />
                          </NextLink>
                        ))}
                    </Box>
                    {item.startingPrice && (
                      <Box className="bg-background rounded-lg py-2 px-4 mb-5 text-center">
                        <Typography variant="h6" className="font-semibold">
                          from ${item.startingPrice}
                        </Typography>
                      </Box>
                    )}
                    <Box className="flex gap-3 justify-center w-full">
                      <Button
                        variant="contained"
                        color="primary"
                        fullWidth
                        startIcon={<i className="tabler-message-circle" />}
                        onClick={(e) => e.stopPropagation()} // Prevent card navigation
                      >
                        Contact
                      </Button>
                      <Tooltip title="View portfolio">
                        <CustomIconButton
                          variant="tonal"
                          color="secondary"
                          onClick={(e) => e.stopPropagation()} // Prevent card navigation
                        >
                          <i className="tabler-briefcase" />
                        </CustomIconButton>
                      </Tooltip>
                      <Tooltip title="Save to favorites">
                        <CustomIconButton
                          variant="tonal"
                          color="secondary"
                          onClick={(e) => e.stopPropagation()} // Prevent card navigation
                        >
                          <i className="tabler-bookmark" />
                        </CustomIconButton>
                      </Tooltip>
                    </Box>
                  </CardContent>
                  </NextLink>
                </Card>

            </Grid>
          ))
        ) : (
          <Grid size={{ xs: 12 }}>
            <Box className="flex flex-col items-center justify-center py-12">
              <i className="tabler-search-off text-6xl text-textDisabled mb-4" />
              <Typography variant="h6" align="center">
                No skill providers found
              </Typography>
              <Typography variant="body2" align="center" className="text-textSecondary mt-1">
                Try adjusting your search or filter criteria
              </Typography>
              <Button
                variant="tonal"
                color="primary"
                className="mt-4"
                onClick={() => {
                  setSearchTerm('');
                  setSkillFilter('all');
                }}
              >
                Clear filters
              </Button>
            </Box>
          </Grid>
        )}
      </Grid>
    </Box>
  );
};

export default SkillProviders;










// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\AboutTab.jsx
"use client"

import { Box, Typography, Grid, Divider } from "@mui/material"
import { MapPin, Clock, Building, Calendar } from "lucide-react"

const AboutTab = ({ space }) => {
  return (
    <div>
      {/* Property Details Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Property Details
      </Typography>
      <Grid container spacing={4} className="mb-6">
        <Grid item xs={12} md={6}>
          <Box className="space-y-3">
            <Box className="flex items-center gap-2">
              <MapPin size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Address</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.address}, {space.propertyDetails.city}, {space.propertyDetails.state} {space.propertyDetails.zipCode}
                </Typography>
              </Box>
            </Box>
            <Box className="flex items-center gap-2">
              <Building size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Property Type</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.type} (Built {space.propertyDetails.yearBuilt})
                </Typography>
              </Box>
            </Box>
            <Box className="flex items-center gap-2">
              <Clock size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Access Hours</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.accessHours}
                </Typography>
              </Box>
            </Box>
          </Box>
        </Grid>
        <Grid item xs={12} md={6}>
          <Box className="space-y-3">
            <Box>
              <Typography variant="subtitle2">Total Area</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {space.propertyDetails.totalArea.toLocaleString()} sq ft
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2">Number of Floors</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {space.propertyDetails.floors}
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2">Additional Features</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {[
                  space.propertyDetails.securitySystem && "Security System",
                  space.propertyDetails.elevatorAccess && "Elevator Access",
                  space.propertyDetails.reception && "Reception"
                ].filter(Boolean).join(", ")}
              </Typography>
            </Box>
          </Box>
        </Grid>
      </Grid>

      <Divider className="my-6" />

      {/* Space Areas Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Space Areas
      </Typography>
      <Grid container spacing={4} className="mb-6">
        {space.spaceAreas.map((area, index) => (
          <Grid item xs={12} sm={6} md={3} key={index}>
            <Box className="text-center p-4 bg-background rounded-lg">
              <Typography variant="h5" className="font-bold mb-1">
                {area.area.toLocaleString()}
              </Typography>
              <Typography variant="body2" className="text-textSecondary">
                sq ft
              </Typography>
              <Typography variant="subtitle2" className="mt-2">
                {area.name}
              </Typography>
            </Box>
          </Grid>
        ))}
      </Grid>

      <Divider className="my-6" />

      {/* Pricing Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Pricing Details
      </Typography>
      <Grid container spacing={4}>
        <Grid item xs={12} md={8}>
          <Box className="space-y-4">
            <Grid container spacing={2}>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.dayPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Day Pass
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.weekPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Week Pass
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.monthPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Month Pass
                  </Typography>
                </Box>
              </Grid>
            </Grid>

            <Box className="mt-4">
              <Typography variant="subtitle2" className="mb-2">
                Available Discounts
              </Typography>
              {space.pricing.discounts.map((discount, index) => (
                <Typography key={index} variant="body2" className="text-textSecondary">
                  â€¢ {discount.type}: {discount.amount} off
                </Typography>
              ))}
            </Box>
          </Box>
        </Grid>
        <Grid item xs={12} md={4}>
          <Box className="p-4 bg-background rounded-lg">
            <Typography variant="subtitle2" className="mb-3">
              Additional Rates
            </Typography>
            <Box className="space-y-2">
              <Box className="flex justify-between">
                <Typography variant="body2">Dedicated Desk</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.dedicatedDesk}/mo
                </Typography>
              </Box>
              <Box className="flex justify-between">
                <Typography variant="body2">Private Office</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.privateOffice}/mo
                </Typography>
              </Box>
              <Box className="flex justify-between">
                <Typography variant="body2">Meeting Room</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.meetingRoomHourly}/hr
                </Typography>
              </Box>
            </Box>
          </Box>
        </Grid>
      </Grid>
    </div>
  )
}

export default AboutTab








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\FeaturesTab.jsx
"use client"

import { Box, Typography, Grid, Chip } from "@mui/material"
import { Users, Monitor, Phone, Twitch as Kitchen, Bath, Bike, Wifi, Coffee, Printer, Car, Wind, DoorClosed, Baby } from "lucide-react"

const FeaturesTab = ({ space }) => {
  const featureIcons = {
    totalDesks: Users,
    privateOffices: DoorClosed,
    phoneBooths: Phone,
    kitchenettes: Kitchen,
    restrooms: Bath,
    bikeStorage: Bike,
    wifi: Wifi,
    coffee: Coffee,
    printer: Printer,
    parking: Car,
    airConditioning: Wind,
    meetingRooms: Monitor,
    motherRoom: Baby
  }

  return (
    <div>
      <Typography variant="h6" className="font-medium mb-4">
        Property Features
      </Typography>
      <Grid container spacing={4} className="mb-8">
        {Object.entries(space.propertyFeatures).map(([key, value]) => {
          if (typeof value === "number") {
            const Icon = featureIcons[key] || Users

            return (
              <Grid item xs={6} sm={4} md={3} key={key}>
                <Box className="text-center p-4 bg-background rounded-lg">
                  <Icon size={24} className="mx-auto mb-2 text-primary" />
                  <Typography variant="h6" className="font-bold mb-1">
                    {value}
                  </Typography>
                  <Typography variant="body2" className="text-textSecondary">
                    {key.replace(/([A-Z])/g, " $1").trim()}
                  </Typography>
                </Box>
              </Grid>
            )
          }

          return null
        })}
      </Grid>

      <Typography variant="h6" className="font-medium mb-4">
        Amenities
      </Typography>
      <Grid container spacing={2} className="mb-6">
        {space.amenities.map((amenity, index) => (
          <Grid item xs={12} sm={6} md={4} key={index}>
            <Box className="flex items-center gap-3 p-3 bg-background rounded-lg">
              {featureIcons[amenity.icon.toLowerCase()] && (() => {
                const Icon = featureIcons[amenity.icon.toLowerCase()]

                return <Icon size={20} className="text-primary" />
              })()}
              <Typography variant="body2">
                {amenity.label}
              </Typography>
            </Box>
          </Grid>
        ))}
      </Grid>

      <Typography variant="h6" className="font-medium mb-4">
        Additional Features
      </Typography>
      <Box className="flex flex-wrap gap-2">
        {Object.entries(space.propertyFeatures).map(([key, value]) => {
          if (typeof value === "boolean" && value) {
            return (
              <Chip
                key={key}
                label={key.replace(/([A-Z])/g, " $1").trim()}
                variant="outlined"
                color="primary"
              />
            )
          }

          return null
        })}
      </Box>
    </div>
  )
}

export default FeaturesTab








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\ReviewsTab.jsx
"use client"

import { useState } from "react"

import {
  Box,
  Typography,
  Rating,
  Avatar,
  Divider,
  Button,
  LinearProgress,
  Grid,
  Card,
  CardContent,
  FormControl,
  InputLabel,
  Select,
  MenuItem
} from "@mui/material"
import { Star } from "lucide-react"

const ReviewsTab = ({ reviews, rating, reviewCount }) => {
  const [filter, setFilter] = useState("all")

  const ratingCounts = [5, 4, 3, 2, 1].map(star => ({
    star,
    count: reviews.filter(review => review.rating === star).length,
    percentage: (reviews.filter(review => review.rating === star).length / reviews.length) * 100
  }))

  const filteredReviews = filter === "all"
    ? reviews
    : reviews.filter(review => review.rating === parseInt(filter))

  return (
    <Grid container spacing={6}>
      <Grid item xs={12} md={4}>
        <Card>
          <CardContent>
            <Typography variant="h6" className="font-medium mb-4">
              Rating Summary
            </Typography>

            <Box className="flex flex-col items-center mb-6">
              <Typography variant="h2" className="font-bold">
                {rating}
              </Typography>
              <Rating value={rating} precision={0.1} readOnly size="large" />
              <Typography variant="body2" className="text-textSecondary mt-1">
                Based on {reviewCount} reviews
              </Typography>
            </Box>

            <Box className="space-y-2">
              {ratingCounts.map((item) => (
                <Box key={item.star} className="flex items-center gap-2">
                  <Box className="flex items-center w-10">
                    <Typography variant="body2">{item.star}</Typography>
                    <Star size={14} className="text-warning ml-0.5" />
                  </Box>
                  <LinearProgress
                    variant="determinate"
                    value={item.percentage}
                    className="flex-1 h-2 rounded-full"
                    color={item.star > 3 ? "success" : item.star > 1 ? "warning" : "error"}
                  />
                  <Typography variant="body2" className="w-8 text-right">
                    {item.count}
                  </Typography>
                </Box>
              ))}
            </Box>
          </CardContent>
        </Card>
      </Grid>

      <Grid item xs={12} md={8}>
        <Box className="flex justify-between items-center mb-6">
          <Typography variant="h6" className="font-medium">
            Reviews
          </Typography>

          <FormControl size="small" className="min-w-[120px]">
            <InputLabel>Filter</InputLabel>
            <Select
              value={filter}
              label="Filter"
              onChange={(e) => setFilter(e.target.value)}
            >
              <MenuItem value="all">All Ratings</MenuItem>
              <MenuItem value="5">5 Stars</MenuItem>
              <MenuItem value="4">4 Stars</MenuItem>
              <MenuItem value="3">3 Stars</MenuItem>
              <MenuItem value="2">2 Stars</MenuItem>
              <MenuItem value="1">1 Star</MenuItem>
            </Select>
          </FormControl>
        </Box>

        {filteredReviews.length > 0 ? (
          <Box className="space-y-4">
            {filteredReviews.map((review) => (
              <Box key={review.id}>
                <Box className="flex gap-4">
                  <Avatar
                    src={review.avatar}
                    alt={review.author}
                    className="w-10 h-10"
                  />
                  <Box className="flex-1">
                    <Box className="flex justify-between items-start">
                      <Box>
                        <Typography variant="subtitle1" className="font-medium">
                          {review.author}
                        </Typography>
                        <Box className="flex items-center gap-1">
                          <Rating value={review.rating} size="small" readOnly />
                          <Typography variant="body2" className="text-textSecondary">
                            â€¢ {review.date}
                          </Typography>
                        </Box>
                      </Box>
                      <Typography
                        variant="caption"
                        className="text-textSecondary bg-background rounded-full px-2 py-0.5"
                      >
                        {review.membershipType}
                      </Typography>
                    </Box>
                    <Typography variant="body2" className="mt-2">
                      {review.comment}
                    </Typography>
                  </Box>
                </Box>
                <Divider className="my-4" />
              </Box>
            ))}

            <Box className="text-center mt-6">
              <Button variant="tonal" color="primary">
                Load more reviews
              </Button>
            </Box>
          </Box>
        ) : (
          <Box className="text-center py-8">
            <Typography variant="body1">
              No reviews match your filter criteria.
            </Typography>
            <Button
              variant="text"
              color="primary"
              onClick={() => setFilter("all")}
              className="mt-2"
            >
              Show all reviews
            </Button>
          </Box>
        )}
      </Grid>
    </Grid>
  )
}

export default ReviewsTab
undefined









// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\index.jsx
"use client"

import { useState, useEffect } from "react"

import { Box } from "@mui/material"

import SpaceHeader from "./SpaceHeader"
import SpaceTabs from "./SpaceTabs"
import RelatedSpaces from "./RelatedSpaces"

const mockSpaceData = {
  id: "1",
  title: "Creative Hub Studio",
  type: "Coworking Space",
  images: [
    "/images/spaces/1.jpg",
    "/images/spaces/2.jpg",
    "/images/spaces/3.jpg",
    "/images/spaces/4.jpg",
    "/images/spaces/5.jpg"
  ],
  featured: true,
  verified: true,
  rating: 4.8,
  reviewCount: 156,
  pricePerDay: 45,
  pricePerMonth: 800,
  capacity: 50,
  amenities: [
    { icon: "wifi", label: "High-Speed WiFi" },
    { icon: "coffee", label: "Coffee Bar" },
    { icon: "printer", label: "Printing Services" }
  ],
  propertyDetails: {
    address: "123 Innovation Street",
    city: "San Francisco",
    state: "CA",
    zipCode: "94105",
    type: "Commercial Building",
    yearBuilt: 2018,
    totalArea: 5000,
    floors: 3,
    accessHours: "24/7",
    securitySystem: true,
    elevatorAccess: true,
    reception: true
  },
  propertyFeatures: {
    totalDesks: 50,
    privateOffices: 5,
    meetingRooms: 3,
    phoneBooths: 4,
    kitchenettes: 2,
    restrooms: 4,
    bikeStorage: true
  },
  spaceAreas: [
    { name: "Open Workspace", area: 2500 },
    { name: "Private Offices", area: 1000 },
    { name: "Meeting Rooms", area: 800 }
  ],
  pricing: {
    dayPass: 45,
    weekPass: 200,
    monthPass: 800,
    dedicatedDesk: 350,
    privateOffice: 1200,
    meetingRoomHourly: 30,
    discounts: [
      { type: "3-month commitment", amount: "10%" },
      { type: "6-month commitment", amount: "15%" }
    ]
  },
  reviews: [
    {
      id: "1",
      author: "John Smith",
      avatar: "/images/avatars/1.png",
      date: "2 weeks ago",
      rating: 5,
      comment: "Fantastic workspace with great amenities.",
      membershipType: "Monthly Member"
    }
  ],
  host: {
    name: "Sarah Wilson",
    avatar: "/images/avatars/2.png",
    role: "Community Manager",
    responseTime: "within 2 hours"
  }
}

const SpaceDetails = ({ id }) => {
  const [spaceData, setSpaceData] = useState(mockSpaceData)

  useEffect(() => {
    // In a real app, fetch space data based on ID
  }, [id])

  return (
    <Box className="space-details-container">
      <SpaceHeader space={spaceData} />
      <SpaceTabs space={spaceData} />
      <RelatedSpaces currentSpaceId={spaceData.id} />
    </Box>
  )
}

export default SpaceDetails








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\RelatedSpaces.jsx
"use client"

import Image from "next/image"


import { Box, Typography, Grid, Card, CardContent, CardMedia, Chip, Button, Rating } from "@mui/material"

import { MapPin, Users, ArrowRight } from "lucide-react"



const relatedSpaces = [
  {
    id: "2",
    title: "Downtown Workshop",
    type: "Studio Space",
    image: "/images/spaces/2.jpg",
    location: "New York, NY",
    rating: 4.6,
    reviewCount: 89,
    pricePerDay: 65,
    capacity: 30
  },
  {
    id: "3",
    title: "Tech Innovation Center",
    type: "Coworking Space",
    image: "/images/spaces/3.jpg",
    location: "Austin, TX",
    rating: 4.9,
    reviewCount: 203,
    pricePerDay: 55,
    capacity: 100
  },
  {
    id: "4",
    title: "Creative Studio Loft",
    type: "Studio Space",
    image: "/images/spaces/4.jpg",
    location: "Los Angeles, CA",
    rating: 4.7,
    reviewCount: 156,
    pricePerDay: 75,
    capacity: 40
  }
]

const RelatedSpaces = ({ currentSpaceId }) => {
  const filteredSpaces = relatedSpaces.filter(space => space.id !== currentSpaceId)

  return (
    <Box className="mb-6">
      <Box className="flex justify-between items-center mb-6">
        <Typography variant="h6" className="font-medium">
          Similar Spaces
        </Typography>
        <Button
          variant="text"
          color="primary"
          endIcon={<ArrowRight size={18} />}
          className="text-sm"
        >
          View all
        </Button>
      </Box>

      <Grid container spacing={4}>
        {filteredSpaces.map((space) => (
          <Grid item xs={12} md={4} key={space.id}>
            <Card className="h-full transition-all duration-300 hover:shadow-lg hover:-translate-y-1">
              <Box className="relative h-48">
                <Image
                  src={space.image}
                  alt={space.title}
                  fill
                  className="object-cover"
                />
              </Box>
              <CardContent>
                <Typography variant="h6" className="font-semibold mb-1">
                  {space.title}
                </Typography>
                <Typography variant="body2" color="textSecondary" className="mb-2">
                  {space.type}
                </Typography>

                <Box className="flex items-center gap-2 mb-3">
                  <MapPin size={16} className="text-textSecondary" />
                  <Typography variant="body2" className="text-textSecondary">
                    {space.location}
                  </Typography>
                </Box>

                <Box className="flex items-center justify-between mb-4">
                  <Box className="flex items-center gap-1">
                    <Rating value={space.rating} precision={0.1} size="small" readOnly />
                    <Typography variant="body2" className="text-textSecondary">
                      ({space.reviewCount})
                    </Typography>
                  </Box>
                  <Box className="flex items-center gap-1">
                    <Users size={16} className="text-textSecondary" />
                    <Typography variant="body2" className="text-textSecondary">
                      Up to {space.capacity}
                    </Typography>
                  </Box>
                </Box>

                <Box className="flex items-center justify-between">
                  <Box>
                    <Typography variant="h6" className="font-semibold">
                      ${space.pricePerDay}
                    </Typography>
                    <Typography variant="caption" className="text-textSecondary">
                      per day
                    </Typography>
                  </Box>
                  <Button variant="outlined" color="primary">
                    View Details
                  </Button>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  )
}

export default RelatedSpaces








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\SpaceHeader.jsx
"use client"

import { useState } from "react"

import Image from "next/image"


import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  Avatar,
  Rating,
  IconButton,
  Modal
} from "@mui/material"

import { MapPin, Clock, Star, CheckCircle, Share2, Bookmark, Calendar, X } from "lucide-react"


import CustomIconButton from "@core/components/mui/IconButton"

const SpaceHeader = ({ space }) => {
  const [currentImageIndex, setCurrentImageIndex] = useState(0)
  const [showGallery, setShowGallery] = useState(false)

  const handleNextImage = () => {
    setCurrentImageIndex((prev) => (prev + 1) % space.images.length)
  }

  const handlePrevImage = () => {
    setCurrentImageIndex((prev) => (prev - 1 + space.images.length) % space.images.length)
  }

  return (
    <Card className="mb-6">
      {/* Image Gallery */}
      <Box className="relative h-[400px] cursor-pointer" onClick={() => setShowGallery(true)}>
        <Image
          src={space.images[currentImageIndex]}
          alt={space.title}
          fill
          className="object-cover"
          priority
        />

        {/* Navigation arrows */}
        <Box className="absolute inset-0 flex items-center justify-between p-4">
          <IconButton
            onClick={(e) => {
              e.stopPropagation()
              handlePrevImage()
            }}
            className="bg-white/80 hover:bg-white"
          >
            <X className="rotate-45" size={24} />
          </IconButton>
          <IconButton
            onClick={(e) => {
              e.stopPropagation()
              handleNextImage()
            }}
            className="bg-white/80 hover:bg-white"
          >
            <X className="-rotate-45" size={24} />
          </IconButton>
        </Box>

        {/* Image counter */}
        <Chip
          label={`${currentImageIndex + 1}/${space.images.length}`}
          className="absolute bottom-4 right-4 bg-white/80"
        />

        {/* Featured badge */}
        {space.featured && (
          <Chip
            label="Featured"
            color="primary"
            className="absolute top-4 left-4"
          />
        )}

        {/* Action buttons */}
        <Box className="absolute top-4 right-4 flex gap-2">
          <CustomIconButton
            color="inherit"
            className="bg-primary/80 hover:bg-primary"
            title="Share"
          >
            <Share2 size={20} />
          </CustomIconButton>
          <CustomIconButton
            color="inherit"
            className="bg-primary/80 hover:bg-primary"
            title="Save"
          >
            <Bookmark size={20} />
          </CustomIconButton>
        </Box>
      </Box>

      <CardContent>
        <Box className="flex flex-col md:flex-row md:items-start md:justify-between gap-6">
          {/* Left side - Space info */}
          <Box className="flex-1">
            <Box className="flex items-center gap-2 mb-2">
              <Typography variant="h4" className="font-bold">
                {space.title}
              </Typography>
              {space.verified && (
                <CheckCircle className="text-success" size={24} />
              )}
            </Box>

            <Typography variant="h6" color="textSecondary" className="mb-4">
              {space.type}
            </Typography>

            <Box className="flex flex-wrap items-center gap-4 mb-4">
              <Box className="flex items-center gap-1">
                <MapPin size={18} className="text-textSecondary" />
                <Typography variant="body2">
                  {space.propertyDetails.address}, {space.propertyDetails.city}
                </Typography>
              </Box>
              <Box className="flex items-center gap-1">
                <Clock size={18} className="text-textSecondary" />
                <Typography variant="body2">
                  Access: {space.propertyDetails.accessHours}
                </Typography>
              </Box>
              <Box className="flex items-center gap-1">
                <Star size={18} className="text-warning" />
                <Typography variant="body2">
                  <span className="font-medium">{space.rating}</span>
                  <span className="text-textSecondary"> ({space.reviewCount} reviews)</span>
                </Typography>
              </Box>
            </Box>

            {/* Host info */}
            <Box className="flex items-center gap-3">
              <Avatar
                src={space.host.avatar}
                alt={space.host.name}
                className="w-12 h-12"
              />
              <Box>
                <Typography variant="subtitle1" className="font-medium">
                  Hosted by {space.host.name}
                </Typography>
                <Typography variant="body2" className="text-textSecondary">
                  Responds {space.host.responseTime}
                </Typography>
              </Box>
            </Box>
          </Box>

          {/* Right side - Pricing and booking */}
          <Box className="bg-background rounded-lg p-6 min-w-[300px]">
            <Box className="mb-4">
              <Typography variant="h4" className="font-bold mb-1">
                ${space.pricePerDay}
              </Typography>
              <Typography variant="body2" className="text-textSecondary">
                per day
              </Typography>
            </Box>

            <Box className="space-y-3 mb-6">
              <Typography variant="body2">
                <span className="font-medium">Monthly from:</span> ${space.pricePerMonth}
              </Typography>
              <Typography variant="body2">
                <span className="font-medium">Capacity:</span> Up to {space.capacity} people
              </Typography>
            </Box>

            <Button
              variant="contained"
              color="primary"
              fullWidth
              size="large"
              startIcon={<Calendar size={20} />}
            >
              Book Now
            </Button>
          </Box>
        </Box>
      </CardContent>

      {/* Image Gallery Modal */}
      <Modal open={showGallery} onClose={() => setShowGallery(false)}>
        <Box className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-6 rounded-lg w-full max-w-4xl max-h-[90vh] overflow-auto">
          <Box className="flex justify-between items-center mb-4">
            <Typography variant="h6">Photo Gallery</Typography>
            <IconButton onClick={() => setShowGallery(false)}>
              <X size={24} />
            </IconButton>
          </Box>

          {/* Main Image */}
          <Box className="relative h-96 mb-4">
            <Image
              src={space.images[currentImageIndex]}
              alt={`Space image ${currentImageIndex + 1}`}
              fill
              className="object-contain"
            />
          </Box>

          {/* Thumbnails */}
          <Box className="grid grid-cols-4 gap-2">
            {space.images.map((image, index) => (
              <Box
                key={index}
                className={`relative h-20 cursor-pointer border-2 ${currentImageIndex === index  }`}
                onClick={() => setCurrentImageIndex(index)}
              >
                <Image
                  src={image}
                  alt={`Thumbnail ${index + 1}`}
                  fill
                  className="object-cover"
                />
              </Box>
            ))}
          </Box>
        </Box>
      </Modal>
    </Card>
  )
}

export default SpaceHeader








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\SpaceTabs.jsx
"use client"

import { useState } from "react"

import { Box, Card, CardContent, Tabs, Tab } from "@mui/material"

import AboutTab from "./tabs/AboutTab"
import FeaturesTab from "./tabs/FeaturesTab"
import ReviewsTab from "./tabs/ReviewsTab"

function TabPanel(props) {
  const { children, value, index, ...other } = props

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`space-tabpanel-${index}`}
      aria-labelledby={`space-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ py: 3 }}>
          {children}
        </Box>
      )}
    </div>
  )
}

function a11yProps(index) {
  return {
    id: `space-tab-${index}`,
    "aria-controls": `space-tabpanel-${index}`,
  }
}

const SpaceTabs = ({ space }) => {
  const [value, setValue] = useState(0)

  const handleChange = (event, newValue) => {
    setValue(newValue)
  }

  return (
    <Card className="mb-6">
      <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
        <Tabs
          value={value}
          onChange={handleChange}
          aria-label="space details tabs"
          className="px-4"
        >
          <Tab label="About" {...a11yProps(0)} />
          <Tab label="Features & Amenities" {...a11yProps(1)} />
          <Tab label={`Reviews (${space.reviewCount})`} {...a11yProps(2)} />
        </Tabs>
      </Box>
      <CardContent>
        <TabPanel value={value} index={0}>
          <AboutTab space={space} />
        </TabPanel>
        <TabPanel value={value} index={1}>
          <FeaturesTab space={space} />
        </TabPanel>
        <TabPanel value={value} index={2}>
          <ReviewsTab
            reviews={space.reviews}
            rating={space.rating}
            reviewCount={space.reviewCount}
          />
        </TabPanel>
      </CardContent>
    </Card>
  )
}

export default SpaceTabs










// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\AboutTab.jsx
"use client"

import { Box, Typography, Grid, Divider, Chip } from "@mui/material"

import { MapPin, Clock, Building, Calendar } from "lucide-react"

const AboutTab = ({ space }) => {
  // Add sample availability data
  const availabilityStatus = {
    monday: { available: true, hours: "9:00 AM - 6:00 PM" },
    tuesday: { available: true, hours: "9:00 AM - 6:00 PM" },
    wednesday: { available: true, hours: "9:00 AM - 6:00 PM" },
    thursday: { available: true, hours: "9:00 AM - 6:00 PM" },
    friday: { available: true, hours: "9:00 AM - 6:00 PM" },
    saturday: { available: false, hours: "Closed" },
    sunday: { available: false, hours: "Closed" },
  }

  return (
    <div>
      {/* Property Details Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Property Details
      </Typography>
      <Grid container spacing={4} className="mb-6">
        <Grid item xs={12} md={6}>
          <Box className="space-y-3">
            <Box className="flex items-center gap-2">
              <MapPin size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Address</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.address}, {space.propertyDetails.city}, {space.propertyDetails.state}{" "}
                  {space.propertyDetails.zipCode}
                </Typography>
              </Box>
            </Box>
            <Box className="flex items-center gap-2">
              <Building size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Property Type</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.type} (Built {space.propertyDetails.yearBuilt})
                </Typography>
              </Box>
            </Box>
            <Box className="flex items-center gap-2">
              <Clock size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Access Hours</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.accessHours}
                </Typography>
              </Box>
            </Box>
          </Box>
        </Grid>
        <Grid item xs={12} md={6}>
          <Box className="space-y-3">
            <Box>
              <Typography variant="subtitle2">Total Area</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {space.propertyDetails.totalArea.toLocaleString()} sq ft
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2">Number of Floors</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {space.propertyDetails.floors}
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2">Additional Features</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {[
                  space.propertyDetails.securitySystem && "Security System",
                  space.propertyDetails.elevatorAccess && "Elevator Access",
                  space.propertyDetails.reception && "Reception",
                ]
                  .filter(Boolean)
                  .join(", ")}
              </Typography>
            </Box>
          </Box>
        </Grid>
      </Grid>

      <Divider className="my-6" />

      {/* Add Availability Section */}
      <Typography variant="h6" className="font-medium mb-4">
        <Calendar size={20} className="inline mr-2 text-primary" />
        Availability Schedule
      </Typography>
      <Grid container spacing={2} className="mb-6">
        {Object.entries(availabilityStatus).map(([day, status]) => (
          <Grid item xs={6} sm={4} md={3} key={day}>
            <Box className="p-3 bg-background rounded-lg">
              <Typography variant="subtitle2" className="capitalize mb-1">
                {day}
              </Typography>
              <Box className="flex items-center justify-between">
                <Typography variant="body2" className="text-textSecondary">
                  {status.hours}
                </Typography>
                <Chip
                  size="small"
                  label={status.available ? "Open" : "Closed"}
                  color={status.available ? "success" : "error"}
                />
              </Box>
            </Box>
          </Grid>
        ))}
      </Grid>
      <Typography variant="body2" className="text-textSecondary mb-6">
        Note: Special hours may apply on holidays. Contact the host for specific date availability.
      </Typography>

      <Divider className="my-6" />

      {/* Space Areas Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Space Areas
      </Typography>
      <Grid container spacing={4} className="mb-6">
        {space.spaceAreas.map((area, index) => (
          <Grid item xs={12} sm={6} md={3} key={index}>
            <Box className="text-center p-4 bg-background rounded-lg">
              <Typography variant="h5" className="font-bold mb-1">
                {area.area.toLocaleString()}
              </Typography>
              <Typography variant="body2" className="text-textSecondary">
                sq ft
              </Typography>
              <Typography variant="subtitle2" className="mt-2">
                {area.name}
              </Typography>
            </Box>
          </Grid>
        ))}
      </Grid>

      <Divider className="my-6" />

      {/* Pricing Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Pricing Details
      </Typography>
      <Grid container spacing={4}>
        <Grid item xs={12} md={8}>
          <Box className="space-y-4">
            <Grid container spacing={2}>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.dayPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Day Pass
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.weekPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Week Pass
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.monthPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Month Pass
                  </Typography>
                </Box>
              </Grid>
            </Grid>

            <Box className="mt-4">
              <Typography variant="subtitle2" className="mb-2">
                Available Discounts
              </Typography>
              {space.pricing.discounts.map((discount, index) => (
                <Typography key={index} variant="body2" className="text-textSecondary">
                  â€¢ {discount.type}: {discount.amount} off
                </Typography>
              ))}
            </Box>
          </Box>
        </Grid>
        <Grid item xs={12} md={4}>
          <Box className="p-4 bg-background rounded-lg">
            <Typography variant="subtitle2" className="mb-3">
              Additional Rates
            </Typography>
            <Box className="space-y-2">
              <Box className="flex justify-between">
                <Typography variant="body2">Dedicated Desk</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.dedicatedDesk}/mo
                </Typography>
              </Box>
              <Box className="flex justify-between">
                <Typography variant="body2">Private Office</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.privateOffice}/mo
                </Typography>
              </Box>
              <Box className="flex justify-between">
                <Typography variant="body2">Meeting Room</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.meetingRoomHourly}/hr
                </Typography>
              </Box>
            </Box>
          </Box>
        </Grid>
      </Grid>
    </div>
  )
}

export default AboutTab








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\FeaturesTab.jsx
"use client"

import { Box, Typography, Grid, Chip } from "@mui/material"
import { Users, Monitor, Phone, Twitch as Kitchen, Bath, Bike, Wifi, Coffee, Printer, Car, Wind, DoorClosed, Baby } from "lucide-react"

const FeaturesTab = ({ space }) => {
  const featureIcons = {
    totalDesks: Users,
    privateOffices: DoorClosed,
    phoneBooths: Phone,
    kitchenettes: Kitchen,
    restrooms: Bath,
    bikeStorage: Bike,
    wifi: Wifi,
    coffee: Coffee,
    printer: Printer,
    parking: Car,
    airConditioning: Wind,
    meetingRooms: Monitor,
    motherRoom: Baby
  }

  return (
    <div>
      <Typography variant="h6" className="font-medium mb-4">
        Property Features
      </Typography>
      <Grid container spacing={4} className="mb-8">
        {Object.entries(space.propertyFeatures).map(([key, value]) => {
          if (typeof value === "number") {
            const Icon = featureIcons[key] || Users

            return (
              <Grid item xs={6} sm={4} md={3} key={key}>
                <Box className="text-center p-4 bg-background rounded-lg">
                  <Icon size={24} className="mx-auto mb-2 text-primary" />
                  <Typography variant="h6" className="font-bold mb-1">
                    {value}
                  </Typography>
                  <Typography variant="body2" className="text-textSecondary">
                    {key.replace(/([A-Z])/g, " $1").trim()}
                  </Typography>
                </Box>
              </Grid>
            )
          }

          return null
        })}
      </Grid>

      <Typography variant="h6" className="font-medium mb-4">
        Amenities
      </Typography>
      <Grid container spacing={2} className="mb-6">
        {space.amenities.map((amenity, index) => (
          <Grid item xs={12} sm={6} md={4} key={index}>
            <Box className="flex items-center gap-3 p-3 bg-background rounded-lg">
              {featureIcons[amenity.icon.toLowerCase()] && (() => {
                const Icon = featureIcons[amenity.icon.toLowerCase()]

                return <Icon size={20} className="text-primary" />
              })()}
              <Typography variant="body2">
                {amenity.label}
              </Typography>
            </Box>
          </Grid>
        ))}
      </Grid>

      <Typography variant="h6" className="font-medium mb-4">
        Additional Features
      </Typography>
      <Box className="flex flex-wrap gap-2">
        {Object.entries(space.propertyFeatures).map(([key, value]) => {
          if (typeof value === "boolean" && value) {
            return (
              <Chip
                key={key}
                label={key.replace(/([A-Z])/g, " $1").trim()}
                variant="outlined"
                color="primary"
              />
            )
          }

          return null
        })}
      </Box>
    </div>
  )
}

export default FeaturesTab








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\ReviewsTab.jsx
"use client"

import { useState } from "react"

import {
  Box,
  Typography,
  Rating,
  Avatar,
  Divider,
  Button,
  LinearProgress,
  Grid,
  Card,
  CardContent,
  FormControl,
  InputLabel,
  Select,
  MenuItem
} from "@mui/material"
import { Star } from "lucide-react"

const ReviewsTab = ({ reviews, rating, reviewCount }) => {
  const [filter, setFilter] = useState("all")

  const ratingCounts = [5, 4, 3, 2, 1].map(star => ({
    star,
    count: reviews.filter(review => review.rating === star).length,
    percentage: (reviews.filter(review => review.rating === star).length / reviews.length) * 100
  }))

  const filteredReviews = filter === "all"
    ? reviews
    : reviews.filter(review => review.rating === parseInt(filter))

  return (
    <Grid container spacing={6}>
      <Grid item xs={12} md={4}>
        <Card>
          <CardContent>
            <Typography variant="h6" className="font-medium mb-4">
              Rating Summary
            </Typography>

            <Box className="flex flex-col items-center mb-6">
              <Typography variant="h2" className="font-bold">
                {rating}
              </Typography>
              <Rating value={rating} precision={0.1} readOnly size="large" />
              <Typography variant="body2" className="text-textSecondary mt-1">
                Based on {reviewCount} reviews
              </Typography>
            </Box>

            <Box className="space-y-2">
              {ratingCounts.map((item) => (
                <Box key={item.star} className="flex items-center gap-2">
                  <Box className="flex items-center w-10">
                    <Typography variant="body2">{item.star}</Typography>
                    <Star size={14} className="text-warning ml-0.5" />
                  </Box>
                  <LinearProgress
                    variant="determinate"
                    value={item.percentage}
                    className="flex-1 h-2 rounded-full"
                    color={item.star > 3 ? "success" : item.star > 1 ? "warning" : "error"}
                  />
                  <Typography variant="body2" className="w-8 text-right">
                    {item.count}
                  </Typography>
                </Box>
              ))}
            </Box>
          </CardContent>
        </Card>
      </Grid>

      <Grid item xs={12} md={8}>
        <Box className="flex justify-between items-center mb-6">
          <Typography variant="h6" className="font-medium">
            Reviews
          </Typography>

          <FormControl size="small" className="min-w-[120px]">
            <InputLabel>Filter</InputLabel>
            <Select
              value={filter}
              label="Filter"
              onChange={(e) => setFilter(e.target.value)}
            >
              <MenuItem value="all">All Ratings</MenuItem>
              <MenuItem value="5">5 Stars</MenuItem>
              <MenuItem value="4">4 Stars</MenuItem>
              <MenuItem value="3">3 Stars</MenuItem>
              <MenuItem value="2">2 Stars</MenuItem>
              <MenuItem value="1">1 Star</MenuItem>
            </Select>
          </FormControl>
        </Box>

        {filteredReviews.length > 0 ? (
          <Box className="space-y-4">
            {filteredReviews.map((review) => (
              <Box key={review.id}>
                <Box className="flex gap-4">
                  <Avatar
                    src={review.avatar}
                    alt={review.author}
                    className="w-10 h-10"
                  />
                  <Box className="flex-1">
                    <Box className="flex justify-between items-start">
                      <Box>
                        <Typography variant="subtitle1" className="font-medium">
                          {review.author}
                        </Typography>
                        <Box className="flex items-center gap-1">
                          <Rating value={review.rating} size="small" readOnly />
                          <Typography variant="body2" className="text-textSecondary">
                            â€¢ {review.date}
                          </Typography>
                        </Box>
                      </Box>
                      <Typography
                        variant="caption"
                        className="text-textSecondary bg-background rounded-full px-2 py-0.5"
                      >
                        {review.membershipType}
                      </Typography>
                    </Box>
                    <Typography variant="body2" className="mt-2">
                      {review.comment}
                    </Typography>
                  </Box>
                </Box>
                <Divider className="my-4" />
              </Box>
            ))}

            <Box className="text-center mt-6">
              <Button variant="tonal" color="primary">
                Load more reviews
              </Button>
            </Box>
          </Box>
        ) : (
          <Box className="text-center py-8">
            <Typography variant="body1">
              No reviews match your filter criteria.
            </Typography>
            <Button
              variant="text"
              color="primary"
              onClick={() => setFilter("all")}
              className="mt-2"
            >
              Show all reviews
            </Button>
          </Box>
        )}
      </Grid>
    </Grid>
  )
}

export default ReviewsTab
undefined









// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\BookingCalendar.jsx
"use client"

import { useState } from "react"

import { Box, Typography, Paper, Button, Chip, Tooltip } from "@mui/material"
import { Calendar, Clock, Info } from "lucide-react"

// Date picker components
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns"
import { LocalizationProvider, DateCalendar, PickersDay } from "@mui/x-date-pickers"
import { isSameDay, isWithinInterval, isBefore } from "date-fns"

const BookingCalendar = ({ availableDates, bookedDates, onDateSelect }) => {
  const [selectedDate, setSelectedDate] = useState(null)
  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null)

  // Sample time slots
  const timeSlots = [
    { id: 1, time: "09:00 - 12:00", available: true },
    { id: 2, time: "12:00 - 15:00", available: true },
    { id: 3, time: "15:00 - 18:00", available: false },
    { id: 4, time: "Full Day (09:00 - 18:00)", available: true },
  ]

  const handleDateChange = (date) => {
    setSelectedDate(date)
    setSelectedTimeSlot(null)
  }

  const handleTimeSlotSelect = (slot) => {
    if (!slot.available) return
    setSelectedTimeSlot(slot)

    if (selectedDate && onDateSelect) {
      onDateSelect({
        date: selectedDate,
        timeSlot: slot,
      })
    }
  }

  // Custom day renderer to show availability
  const renderDay = (day, _value, DayComponentProps) => {
    // Ensure we're working with valid date objects
    const currentDay = new Date(day)

    // Check if the day is booked
    const isBooked = bookedDates.some((bookedDate) => {
      const bookedDay = new Date(bookedDate.date)

      return isSameDay(bookedDay, currentDay)
    })

    // Check if the day is available
    const isAvailable = availableDates.some((availableDate) => {
      if (typeof availableDate === "string") {
        return isSameDay(new Date(availableDate), currentDay)
      }

      const startDate = new Date(availableDate.start)
      const endDate = new Date(availableDate.end)

      return isWithinInterval(currentDay, {
        start: startDate,
        end: endDate,
      })
    })

    const isDisabled = !isAvailable || isBooked || isBefore(currentDay, new Date())

    return (
      <Tooltip title={isBooked ? "Booked" : !isAvailable ? "Unavailable" : "Available"}>
        <PickersDay
          {...DayComponentProps}
          disableMargin
          disabled={isDisabled}
          selected={selectedDate && isSameDay(currentDay, selectedDate)}
          sx={{
            ...(isBooked && {
              backgroundColor: "error.lighter",
              color: "error.main",
              "&:hover": {
                backgroundColor: "error.light",
              },
            }),
            ...(isAvailable &&
              !isBooked && {
                backgroundColor: "success.lighter",
                color: "success.main",
                "&:hover": {
                  backgroundColor: "success.light",
                },
              }),
          }}
        />
      </Tooltip>
    )
  }

  return (
    <Paper className="p-4">
      <Box className="flex items-center gap-2 mb-4">
        <Calendar size={20} className="text-primary" />
        <Typography variant="h6">Select Date & Time</Typography>
      </Box>

      <Box className="flex flex-col md:flex-row gap-6">
        <Box className="flex-1">
          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <DateCalendar
              value={selectedDate}
              onChange={handleDateChange}
              slots={{ day: renderDay }}
              disablePast
              sx={{ width: "100%" }}
            />
          </LocalizationProvider>
        </Box>

        <Box className="flex-1">
          <Box className="mb-4">
            <Box className="flex items-center gap-2 mb-2">
              <Clock size={20} className="text-primary" />
              <Typography variant="subtitle1">Available Time Slots</Typography>
            </Box>

            {selectedDate ? (
              <Box className="space-y-2">
                {timeSlots.map((slot) => (
                  <Button
                    key={slot.id}
                    variant={selectedTimeSlot?.id === slot.id ? "contained" : "outlined"}
                    color={slot.available ? "primary" : "error"}
                    disabled={!slot.available}
                    fullWidth
                    onClick={() => handleTimeSlotSelect(slot)}
                    className="justify-start"
                  >
                    {slot.time}
                    {!slot.available && <Chip label="Booked" size="small" color="error" className="ml-auto" />}
                  </Button>
                ))}
              </Box>
            ) : (
              <Box className="flex items-center justify-center h-40 bg-background rounded-lg">
                <Typography variant="body2" className="text-textSecondary text-center">
                  Please select a date to view available time slots
                </Typography>
              </Box>
            )}
          </Box>

          <Box className="flex items-start gap-2 bg-background p-3 rounded-lg">
            <Info size={18} className="text-primary mt-0.5" />
            <Typography variant="body2" className="text-textSecondary">
              Booking is subject to confirmation by the host. You&apos;ll receive a confirmation email once your request is
              approved.
            </Typography>
          </Box>
        </Box>
      </Box>
    </Paper>
  )
}

export default BookingCalendar








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\BookingRequestDialog.jsx
"use client"

import { useState } from "react"

import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Box,
  Typography,
  Divider,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
  Stepper,
  Step,
  StepLabel,
  Alert,
} from "@mui/material"
import { X, Calendar, Users, CreditCard, CheckCircle, Info } from "lucide-react"
import { format, addDays } from "date-fns"

import BookingCalendar from "./BookingCalendar"

// Create proper date objects for sample data
const today = new Date()
const thirtyDaysLater = addDays(today, 30)
const twoDaysLater = addDays(today, 2)
const fiveDaysLater = addDays(today, 5)
const tenDaysLater = addDays(today, 10)

// Sample data for available and booked dates
const sampleAvailableDates = [{ start: today, end: thirtyDaysLater }]

const sampleBookedDates = [
  { date: twoDaysLater, timeSlots: ["09:00 - 12:00"] },
  { date: fiveDaysLater, timeSlots: ["Full Day"] },
  { date: tenDaysLater, timeSlots: ["15:00 - 18:00"] },
]

const BookingRequestDialog = ({ open, onClose, space }) => {
  const [activeStep, setActiveStep] = useState(0)

  const [bookingDetails, setBookingDetails] = useState({
    date: null,
    timeSlot: null,
    guests: 1,
    purpose: "",
    specialRequests: "",
    contactName: "",
    contactEmail: "",
    contactPhone: "",
  })

  const [isSubmitting, setIsSubmitting] = useState(false)
  const [bookingComplete, setBookingComplete] = useState(false)

  const steps = ["Select Date & Time", "Booking Details", "Contact Information", "Review & Confirm"]

  const handleNext = () => {
    setActiveStep((prevStep) => prevStep + 1)
  }

  const handleBack = () => {
    setActiveStep((prevStep) => prevStep - 1)
  }

  const handleDateTimeSelect = (selection) => {
    setBookingDetails({
      ...bookingDetails,
      date: selection.date,
      timeSlot: selection.timeSlot,
    })
  }

  const handleInputChange = (e) => {
    const { name, value } = e.target

    setBookingDetails({
      ...bookingDetails,
      [name]: value,
    })
  }

  const handleSubmit = async () => {
    setIsSubmitting(true)

    // Simulate API call
    setTimeout(() => {
      setIsSubmitting(false)
      setBookingComplete(true)
      setActiveStep(4)
    }, 1500)
  }

  const isStepComplete = (step) => {
    switch (step) {
      case 0:
        return bookingDetails.date && bookingDetails.timeSlot
      case 1:
        return bookingDetails.guests > 0 && bookingDetails.purpose
      case 2:
        return bookingDetails.contactName && bookingDetails.contactEmail && bookingDetails.contactPhone
      default:
        return true
    }
  }

  const renderStepContent = (step) => {
    switch (step) {
      case 0:
        return (
          <BookingCalendar
            availableDates={sampleAvailableDates}
            bookedDates={sampleBookedDates}
            onDateSelect={handleDateTimeSelect}
          />
        )
      case 1:
        return (
          <Box className="space-y-4 py-2">
            <FormControl fullWidth>
              <InputLabel id="guests-label">Number of Guests</InputLabel>
              <Select
                labelId="guests-label"
                name="guests"
                value={bookingDetails.guests}
                label="Number of Guests"
                onChange={handleInputChange}
              >
                {[...Array(space.capacity)].map((_, i) => (
                  <MenuItem key={i} value={i + 1}>
                    {i + 1} {i === 0 ? "Guest" : "Guests"}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth>
              <InputLabel id="purpose-label">Purpose of Booking</InputLabel>
              <Select
                labelId="purpose-label"
                name="purpose"
                value={bookingDetails.purpose}
                label="Purpose of Booking"
                onChange={handleInputChange}
              >
                <MenuItem value="Meeting">Meeting</MenuItem>
                <MenuItem value="Workshop">Workshop</MenuItem>
                <MenuItem value="Event">Event</MenuItem>
                <MenuItem value="Coworking">Coworking</MenuItem>
                <MenuItem value="Other">Other</MenuItem>
              </Select>
            </FormControl>

            <TextField
              label="Special Requests"
              name="specialRequests"
              value={bookingDetails.specialRequests}
              onChange={handleInputChange}
              multiline
              rows={4}
              fullWidth
            />
          </Box>
        )
      case 2:
        return (
          <Box className="space-y-4 py-2">
            <TextField
              label="Full Name"
              name="contactName"
              value={bookingDetails.contactName}
              onChange={handleInputChange}
              fullWidth
              required
            />
            <TextField
              label="Email Address"
              name="contactEmail"
              type="email"
              value={bookingDetails.contactEmail}
              onChange={handleInputChange}
              fullWidth
              required
            />
            <TextField
              label="Phone Number"
              name="contactPhone"
              value={bookingDetails.contactPhone}
              onChange={handleInputChange}
              fullWidth
              required
            />
          </Box>
        )
      case 3:
        return (
          <Box className="py-2">
            <Typography variant="h6" className="mb-4">
              Booking Summary
            </Typography>

            <Box className="space-y-4">
              <Box className="flex items-start gap-3">
                <Calendar size={20} className="text-primary mt-1" />
                <Box>
                  <Typography variant="subtitle2">Date & Time</Typography>
                  <Typography variant="body2">
                    {bookingDetails.date ? format(bookingDetails.date, "EEEE, MMMM d, yyyy") : "Not selected"}
                    {bookingDetails.timeSlot ? ` â€¢ ${bookingDetails.timeSlot.time}` : ""}
                  </Typography>
                </Box>
              </Box>

              <Box className="flex items-start gap-3">
                <Users size={20} className="text-primary mt-1" />
                <Box>
                  <Typography variant="subtitle2">Guests & Purpose</Typography>
                  <Typography variant="body2">
                    {bookingDetails.guests} {bookingDetails.guests === 1 ? "Guest" : "Guests"} â€¢{" "}
                    {bookingDetails.purpose || "Not specified"}
                  </Typography>
                </Box>
              </Box>

              {bookingDetails.specialRequests && (
                <Box className="flex items-start gap-3">
                  <Info size={20} className="text-primary mt-1" />
                  <Box>
                    <Typography variant="subtitle2">Special Requests</Typography>
                    <Typography variant="body2">{bookingDetails.specialRequests}</Typography>
                  </Box>
                </Box>
              )}

              <Divider />

              <Box className="flex items-start gap-3">
                <CreditCard size={20} className="text-primary mt-1" />
                <Box>
                  <Typography variant="subtitle2">Pricing</Typography>
                  <Typography variant="body2">
                    ${bookingDetails.timeSlot?.id === 4 ? space.pricePerDay : Math.round(space.pricePerDay / 3)}
                    {bookingDetails.timeSlot?.id === 4 ? " (Full day rate)" : " (Hourly rate)"}
                  </Typography>
                </Box>
              </Box>

              <Alert severity="info" className="mt-4">
                Payment will be processed after the host confirms your booking request.
              </Alert>
            </Box>
          </Box>
        )
      case 4:
        return (
          <Box className="py-6 text-center">
            <CheckCircle size={60} className="text-success mx-auto mb-4" />
            <Typography variant="h5" className="mb-2">
              Booking Request Submitted!
            </Typography>
            <Typography variant="body1" className="mb-4">
              Your booking request has been sent to the host. You&apos;ll receive a confirmation email once it&apos;s approved.
            </Typography>
            <Typography variant="body2" className="text-textSecondary">
              Booking Reference: #BK
              {Math.floor(Math.random() * 10000)
                .toString()
                .padStart(4, "0")}
            </Typography>
          </Box>
        )
      default:
        return null
    }
  }

  return (
    <Dialog open={open} onClose={bookingComplete ? onClose : undefined} maxWidth="md" fullWidth>
      <DialogTitle className="flex justify-between items-center">
        <Typography variant="h6">
          {activeStep === 4 ? "Booking Confirmed" : `Book ${space?.title || "Space"}`}
        </Typography>
        <IconButton onClick={onClose} size="small">
          <X size={20} />
        </IconButton>
      </DialogTitle>

      {activeStep < 4 && (
        <Stepper activeStep={activeStep} alternativeLabel className="px-6 pt-2">
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>
      )}

      <DialogContent dividers>{renderStepContent(activeStep)}</DialogContent>

      {activeStep < 4 && (
        <DialogActions className="p-4 flex justify-between">
          <Button onClick={activeStep === 0 ? onClose : handleBack} variant="outlined">
            {activeStep === 0 ? "Cancel" : "Back"}
          </Button>
          <Box>
            {activeStep === steps.length - 1 ? (
              <Button
                onClick={handleSubmit}
                variant="contained"
                color="primary"
                disabled={!isStepComplete(activeStep) || isSubmitting}
              >
                {isSubmitting ? "Submitting..." : "Submit Booking Request"}
              </Button>
            ) : (
              <Button onClick={handleNext} variant="contained" color="primary" disabled={!isStepComplete(activeStep)}>
                Next
              </Button>
            )}
          </Box>
        </DialogActions>
      )}

      {activeStep === 4 && (
        <DialogActions className="p-4">
          <Button onClick={onClose} variant="contained" color="primary">
            Close
          </Button>
        </DialogActions>
      )}
    </Dialog>
  )
}

export default BookingRequestDialog








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\index.jsx
"use client"

import { useState, useEffect } from "react"

import { Box } from "@mui/material"

import SpaceHeader from "./SpaceHeader"
import SpaceTabs from "./SpaceTabs"
import RelatedSpaces from "./RelatedSpaces"

const mockSpaceData = {
  id: "1",
  title: "Creative Hub Studio",
  type: "Coworking Space",
  images: [
    "/images/spaces/1.jpg",
    "/images/spaces/2.jpg",
    "/images/spaces/3.jpg",
    "/images/spaces/4.jpg",
    "/images/spaces/5.jpg"
  ],
  featured: true,
  verified: true,
  rating: 4.8,
  reviewCount: 156,
  pricePerDay: 45,
  pricePerMonth: 800,
  capacity: 50,
  amenities: [
    { icon: "wifi", label: "High-Speed WiFi" },
    { icon: "coffee", label: "Coffee Bar" },
    { icon: "printer", label: "Printing Services" }
  ],
  propertyDetails: {
    address: "123 Innovation Street",
    city: "San Francisco",
    state: "CA",
    zipCode: "94105",
    type: "Commercial Building",
    yearBuilt: 2018,
    totalArea: 5000,
    floors: 3,
    accessHours: "24/7",
    securitySystem: true,
    elevatorAccess: true,
    reception: true
  },
  propertyFeatures: {
    totalDesks: 50,
    privateOffices: 5,
    meetingRooms: 3,
    phoneBooths: 4,
    kitchenettes: 2,
    restrooms: 4,
    bikeStorage: true
  },
  spaceAreas: [
    { name: "Open Workspace", area: 2500 },
    { name: "Private Offices", area: 1000 },
    { name: "Meeting Rooms", area: 800 }
  ],
  pricing: {
    dayPass: 45,
    weekPass: 200,
    monthPass: 800,
    dedicatedDesk: 350,
    privateOffice: 1200,
    meetingRoomHourly: 30,
    discounts: [
      { type: "3-month commitment", amount: "10%" },
      { type: "6-month commitment", amount: "15%" }
    ]
  },
  reviews: [
    {
      id: "1",
      author: "John Smith",
      avatar: "/images/avatars/1.png",
      date: "2 weeks ago",
      rating: 5,
      comment: "Fantastic workspace with great amenities.",
      membershipType: "Monthly Member"
    }
  ],
  host: {
    name: "Sarah Wilson",
    avatar: "/images/avatars/2.png",
    role: "Community Manager",
    responseTime: "within 2 hours"
  }
}

const SpaceDetails = ({ id }) => {
  const [spaceData, setSpaceData] = useState(mockSpaceData)

  useEffect(() => {
    // In a real app, fetch space data based on ID
  }, [id])

  return (
    <Box className="space-details-container">
      <SpaceHeader space={spaceData} />
      <SpaceTabs space={spaceData} />
      <RelatedSpaces currentSpaceId={spaceData.id} />
    </Box>
  )
}

export default SpaceDetails








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\RelatedSpaces.jsx
"use client"

import Image from "next/image"


import { Box, Typography, Grid, Card, CardContent, CardMedia, Chip, Button, Rating } from "@mui/material"

import { MapPin, Users, ArrowRight } from "lucide-react"



const relatedSpaces = [
  {
    id: "2",
    title: "Downtown Workshop",
    type: "Studio Space",
    image: "/images/spaces/2.jpg",
    location: "New York, NY",
    rating: 4.6,
    reviewCount: 89,
    pricePerDay: 65,
    capacity: 30
  },
  {
    id: "3",
    title: "Tech Innovation Center",
    type: "Coworking Space",
    image: "/images/spaces/3.jpg",
    location: "Austin, TX",
    rating: 4.9,
    reviewCount: 203,
    pricePerDay: 55,
    capacity: 100
  },
  {
    id: "4",
    title: "Creative Studio Loft",
    type: "Studio Space",
    image: "/images/spaces/4.jpg",
    location: "Los Angeles, CA",
    rating: 4.7,
    reviewCount: 156,
    pricePerDay: 75,
    capacity: 40
  }
]

const RelatedSpaces = ({ currentSpaceId }) => {
  const filteredSpaces = relatedSpaces.filter(space => space.id !== currentSpaceId)

  return (
    <Box className="mb-6">
      <Box className="flex justify-between items-center mb-6">
        <Typography variant="h6" className="font-medium">
          Similar Spaces
        </Typography>
        <Button
          variant="text"
          color="primary"
          endIcon={<ArrowRight size={18} />}
          className="text-sm"
        >
          View all
        </Button>
      </Box>

      <Grid container spacing={4}>
        {filteredSpaces.map((space) => (
          <Grid item xs={12} md={4} key={space.id}>
            <Card className="h-full transition-all duration-300 hover:shadow-lg hover:-translate-y-1">
              <Box className="relative h-48">
                <Image
                  src={space.image}
                  alt={space.title}
                  fill
                  className="object-cover"
                />
              </Box>
              <CardContent>
                <Typography variant="h6" className="font-semibold mb-1">
                  {space.title}
                </Typography>
                <Typography variant="body2" color="textSecondary" className="mb-2">
                  {space.type}
                </Typography>

                <Box className="flex items-center gap-2 mb-3">
                  <MapPin size={16} className="text-textSecondary" />
                  <Typography variant="body2" className="text-textSecondary">
                    {space.location}
                  </Typography>
                </Box>

                <Box className="flex items-center justify-between mb-4">
                  <Box className="flex items-center gap-1">
                    <Rating value={space.rating} precision={0.1} size="small" readOnly />
                    <Typography variant="body2" className="text-textSecondary">
                      ({space.reviewCount})
                    </Typography>
                  </Box>
                  <Box className="flex items-center gap-1">
                    <Users size={16} className="text-textSecondary" />
                    <Typography variant="body2" className="text-textSecondary">
                      Up to {space.capacity}
                    </Typography>
                  </Box>
                </Box>

                <Box className="flex items-center justify-between">
                  <Box>
                    <Typography variant="h6" className="font-semibold">
                      ${space.pricePerDay}
                    </Typography>
                    <Typography variant="caption" className="text-textSecondary">
                      per day
                    </Typography>
                  </Box>
                  <Button variant="outlined" color="primary">
                    View Details
                  </Button>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  )
}

export default RelatedSpaces








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\SpaceHeader.jsx
"use client"

import { useState } from "react"

import Image from "next/image"

import { Box, Card, CardContent, Typography, Button, Chip, Avatar, IconButton, Modal, Badge } from "@mui/material"

import { MapPin, Clock, Star, CheckCircle, Share2, Bookmark, Calendar, X, Users } from "lucide-react"

import CustomIconButton from "@core/components/mui/IconButton"
import BookingRequestDialog from "./BookingRequestDialog"

const SpaceHeader = ({ space }) => {
  const [currentImageIndex, setCurrentImageIndex] = useState(0)
  const [showGallery, setShowGallery] = useState(false)
  const [showBookingDialog, setShowBookingDialog] = useState(false)

  const handleNextImage = () => {
    setCurrentImageIndex((prev) => (prev + 1) % space.images.length)
  }

  const handlePrevImage = () => {
    setCurrentImageIndex((prev) => (prev - 1 + space.images.length) % space.images.length)
  }

  // Add this function to open the booking dialog
  const handleBookNowClick = () => {
    setShowBookingDialog(true)
  }

  return (
    <Card className="mb-6">
      {/* Image Gallery */}
      <Box className="relative h-[400px] cursor-pointer" onClick={() => setShowGallery(true)}>
        <Image
          src={space.images[currentImageIndex] || "/placeholder.svg"}
          alt={space.title}
          fill
          className="object-cover"
          priority
        />

        {/* Navigation arrows */}
        <Box className="absolute inset-0 flex items-center justify-between p-4">
          <IconButton
            onClick={(e) => {
              e.stopPropagation()
              handlePrevImage()
            }}
            className="bg-white/80 hover:bg-white"
          >
            <X className="rotate-45" size={24} />
          </IconButton>
          <IconButton
            onClick={(e) => {
              e.stopPropagation()
              handleNextImage()
            }}
            className="bg-white/80 hover:bg-white"
          >
            <X className="-rotate-45" size={24} />
          </IconButton>
        </Box>

        {/* Image counter */}
        <Chip
          label={`${currentImageIndex + 1}/${space.images.length}`}
          className="absolute bottom-4 right-4 bg-white/80"
        />

        {/* Featured badge */}
        {space.featured && <Chip label="Featured" color="primary" className="absolute top-4 left-4" />}

        {/* Action buttons */}
        <Box className="absolute top-4 right-4 flex gap-2">
          <CustomIconButton color="inherit" className="bg-primary/80 hover:bg-primary" title="Share">
            <Share2 size={20} />
          </CustomIconButton>
          <CustomIconButton color="inherit" className="bg-primary/80 hover:bg-primary" title="Save">
            <Bookmark size={20} />
          </CustomIconButton>
        </Box>
      </Box>

      <CardContent>
        <Box className="flex flex-col md:flex-row md:items-start md:justify-between gap-6">
          {/* Left side - Space info */}
          <Box className="flex-1">
            <Box className="flex items-center gap-2 mb-2">
              <Typography variant="h4" className="font-bold">
                {space.title}
              </Typography>
              {space.verified && <CheckCircle className="text-success" size={24} />}
            </Box>

            <Typography variant="h6" color="textSecondary" className="mb-4">
              {space.type}
            </Typography>

            <Box className="flex flex-wrap items-center gap-4 mb-4">
              <Box className="flex items-center gap-1">
                <MapPin size={18} className="text-textSecondary" />
                <Typography variant="body2">
                  {space.propertyDetails.address}, {space.propertyDetails.city}
                </Typography>
              </Box>
              <Box className="flex items-center gap-1">
                <Clock size={18} className="text-textSecondary" />
                <Typography variant="body2">Access: {space.propertyDetails.accessHours}</Typography>
              </Box>
              <Box className="flex items-center gap-1">
                <Star size={18} className="text-warning" />
                <Typography variant="body2">
                  <span className="font-medium">{space.rating}</span>
                  <span className="text-textSecondary"> ({space.reviewCount} reviews)</span>
                </Typography>
              </Box>
            </Box>

            {/* Host info */}
            <Box className="flex items-center gap-3">
              <Avatar src={space.host.avatar} alt={space.host.name} className="w-12 h-12" />
              <Box>
                <Typography variant="subtitle1" className="font-medium">
                  Hosted by {space.host.name}
                </Typography>
                <Typography variant="body2" className="text-textSecondary">
                  Responds {space.host.responseTime}
                </Typography>
              </Box>
            </Box>
          </Box>

          {/* Right side - Pricing and booking */}
          <Box className="bg-background rounded-lg p-6 min-w-[300px]">
            <Box className="mb-4">
              <Typography variant="h4" className="font-bold mb-1">
                ${space.pricePerDay}
              </Typography>
              <Typography variant="body2" className="text-textSecondary">
                per day
              </Typography>
            </Box>

            <Box className="space-y-3 mb-6">
              <Typography variant="body2">
                <span className="font-medium">Monthly from:</span> ${space.pricePerMonth}
              </Typography>
              <Box className="flex items-center gap-1">
                <Users size={16} className="text-textSecondary" />
                <Typography variant="body2">
                  <span className="font-medium">Capacity:</span> Up to {space.capacity} people
                </Typography>
              </Box>
              <Badge color="success" badgeContent="Available" className="w-full">
                <Button
                  variant="contained"
                  color="primary"
                  fullWidth
                  size="large"
                  startIcon={<Calendar size={20} />}
                  onClick={handleBookNowClick}
                  className="mb-3"
                >
                  Book Now
                </Button>
              </Badge>
            </Box>

            <Button variant="outlined" color="primary" fullWidth>
              Contact Host
            </Button>
          </Box>
        </Box>
      </CardContent>

      {/* Image Gallery Modal */}
      <Modal open={showGallery} onClose={() => setShowGallery(false)}>
        <Box className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-6 rounded-lg w-full max-w-4xl max-h-[90vh] overflow-auto">
          <Box className="flex justify-between items-center mb-4">
            <Typography variant="h6">Photo Gallery</Typography>
            <IconButton onClick={() => setShowGallery(false)}>
              <X size={24} />
            </IconButton>
          </Box>

          {/* Main Image */}
          <Box className="relative h-96 mb-4">
            <Image
              src={space.images[currentImageIndex] || "/placeholder.svg"}
              alt={`Space image ${currentImageIndex + 1}`}
              fill
              className="object-contain"
            />
          </Box>

          {/* Thumbnails */}
          <Box className="grid grid-cols-4 gap-2">
            {space.images.map((image, index) => (
              <Box
                key={index}
                className={`relative h-20 cursor-pointer border-2 ${currentImageIndex === index ? "border-primary" : "border-transparent"}`}
                onClick={() => setCurrentImageIndex(index)}
              >
                <Image src={image || "/placeholder.svg"} alt={`Thumbnail ${index + 1}`} fill className="object-cover" />
              </Box>
            ))}
          </Box>
        </Box>
      </Modal>

      {/* Add the Booking Request Dialog */}
      <BookingRequestDialog open={showBookingDialog} onClose={() => setShowBookingDialog(false)} space={space} />
    </Card>
  )
}

export default SpaceHeader








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\SpaceTabs.jsx
"use client"

import { useState } from "react"

import { Box, Card, CardContent, Tabs, Tab } from "@mui/material"
import { addDays } from "date-fns"

import AboutTab from "./tabs/AboutTab"
import FeaturesTab from "./tabs/FeaturesTab"
import ReviewsTab from "./tabs/ReviewsTab"
import BookingCalendar from "./BookingCalendar"

function TabPanel(props) {
  const { children, value, index, ...other } = props

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`space-tabpanel-${index}`}
      aria-labelledby={`space-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
    </div>
  )
}

function a11yProps(index) {
  return {
    id: `space-tab-${index}`,
    "aria-controls": `space-tabpanel-${index}`,
  }
}

// Create proper date objects for sample data
const today = new Date()
const thirtyDaysLater = addDays(today, 30)
const twoDaysLater = addDays(today, 2)
const fiveDaysLater = addDays(today, 5)
const tenDaysLater = addDays(today, 10)

// Sample data for available and booked dates
const sampleAvailableDates = [{ start: today, end: thirtyDaysLater }]

const sampleBookedDates = [
  { date: twoDaysLater, timeSlots: ["09:00 - 12:00"] },
  { date: fiveDaysLater, timeSlots: ["Full Day"] },
  { date: tenDaysLater, timeSlots: ["15:00 - 18:00"] },
]

const SpaceTabs = ({ space }) => {
  const [value, setValue] = useState(0)

  const handleChange = (event, newValue) => {
    setValue(newValue)
  }

  return (
    <Card className="mb-6">
      <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
        <Tabs value={value} onChange={handleChange} aria-label="space details tabs" className="px-4">
          <Tab label="About" {...a11yProps(0)} />
          <Tab label="Features & Amenities" {...a11yProps(1)} />
          <Tab label="Availability" {...a11yProps(2)} />
          <Tab label={`Reviews (${space.reviewCount})`} {...a11yProps(3)} />
        </Tabs>
      </Box>
      <CardContent>
        <TabPanel value={value} index={0}>
          <AboutTab space={space} />
        </TabPanel>
        <TabPanel value={value} index={1}>
          <FeaturesTab space={space} />
        </TabPanel>
        <TabPanel value={value} index={2}>
          <BookingCalendar
            availableDates={sampleAvailableDates}
            bookedDates={sampleBookedDates}
            onDateSelect={() => {}}
          />
        </TabPanel>
        <TabPanel value={value} index={3}>
          <ReviewsTab reviews={space.reviews} rating={space.rating} reviewCount={space.reviewCount} />
        </TabPanel>
      </CardContent>
    </Card>
  )
}

export default SpaceTabs










// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\AboutTab.jsx
"use client"

import { Box, Typography, Grid, Divider } from "@mui/material"
import { MapPin, Clock, Building, Calendar } from "lucide-react"

const AboutTab = ({ space }) => {
  return (
    <div>
      {/* Property Details Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Property Details
      </Typography>
      <Grid container spacing={4} className="mb-6">
        <Grid item xs={12} md={6}>
          <Box className="space-y-3">
            <Box className="flex items-center gap-2">
              <MapPin size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Address</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.address}, {space.propertyDetails.city}, {space.propertyDetails.state} {space.propertyDetails.zipCode}
                </Typography>
              </Box>
            </Box>
            <Box className="flex items-center gap-2">
              <Building size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Property Type</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.type} (Built {space.propertyDetails.yearBuilt})
                </Typography>
              </Box>
            </Box>
            <Box className="flex items-center gap-2">
              <Clock size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Access Hours</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.accessHours}
                </Typography>
              </Box>
            </Box>
          </Box>
        </Grid>
        <Grid item xs={12} md={6}>
          <Box className="space-y-3">
            <Box>
              <Typography variant="subtitle2">Total Area</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {space.propertyDetails.totalArea.toLocaleString()} sq ft
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2">Number of Floors</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {space.propertyDetails.floors}
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2">Additional Features</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {[
                  space.propertyDetails.securitySystem && "Security System",
                  space.propertyDetails.elevatorAccess && "Elevator Access",
                  space.propertyDetails.reception && "Reception"
                ].filter(Boolean).join(", ")}
              </Typography>
            </Box>
          </Box>
        </Grid>
      </Grid>

      <Divider className="my-6" />

      {/* Space Areas Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Space Areas
      </Typography>
      <Grid container spacing={4} className="mb-6">
        {space.spaceAreas.map((area, index) => (
          <Grid item xs={12} sm={6} md={3} key={index}>
            <Box className="text-center p-4 bg-background rounded-lg">
              <Typography variant="h5" className="font-bold mb-1">
                {area.area.toLocaleString()}
              </Typography>
              <Typography variant="body2" className="text-textSecondary">
                sq ft
              </Typography>
              <Typography variant="subtitle2" className="mt-2">
                {area.name}
              </Typography>
            </Box>
          </Grid>
        ))}
      </Grid>

      <Divider className="my-6" />

      {/* Pricing Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Pricing Details
      </Typography>
      <Grid container spacing={4}>
        <Grid item xs={12} md={8}>
          <Box className="space-y-4">
            <Grid container spacing={2}>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.dayPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Day Pass
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.weekPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Week Pass
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.monthPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Month Pass
                  </Typography>
                </Box>
              </Grid>
            </Grid>

            <Box className="mt-4">
              <Typography variant="subtitle2" className="mb-2">
                Available Discounts
              </Typography>
              {space.pricing.discounts.map((discount, index) => (
                <Typography key={index} variant="body2" className="text-textSecondary">
                  â€¢ {discount.type}: {discount.amount} off
                </Typography>
              ))}
            </Box>
          </Box>
        </Grid>
        <Grid item xs={12} md={4}>
          <Box className="p-4 bg-background rounded-lg">
            <Typography variant="subtitle2" className="mb-3">
              Additional Rates
            </Typography>
            <Box className="space-y-2">
              <Box className="flex justify-between">
                <Typography variant="body2">Dedicated Desk</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.dedicatedDesk}/mo
                </Typography>
              </Box>
              <Box className="flex justify-between">
                <Typography variant="body2">Private Office</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.privateOffice}/mo
                </Typography>
              </Box>
              <Box className="flex justify-between">
                <Typography variant="body2">Meeting Room</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.meetingRoomHourly}/hr
                </Typography>
              </Box>
            </Box>
          </Box>
        </Grid>
      </Grid>
    </div>
  )
}

export default AboutTab








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\FeaturesTab.jsx
"use client"

import { Box, Typography, Grid, Chip } from "@mui/material"
import { Users, Monitor, Phone, Twitch as Kitchen, Bath, Bike, Wifi, Coffee, Printer, Car, Wind, DoorClosed, Baby } from "lucide-react"

const FeaturesTab = ({ space }) => {
  const featureIcons = {
    totalDesks: Users,
    privateOffices: DoorClosed,
    phoneBooths: Phone,
    kitchenettes: Kitchen,
    restrooms: Bath,
    bikeStorage: Bike,
    wifi: Wifi,
    coffee: Coffee,
    printer: Printer,
    parking: Car,
    airConditioning: Wind,
    meetingRooms: Monitor,
    motherRoom: Baby
  }

  return (
    <div>
      <Typography variant="h6" className="font-medium mb-4">
        Property Features
      </Typography>
      <Grid container spacing={4} className="mb-8">
        {Object.entries(space.propertyFeatures).map(([key, value]) => {
          if (typeof value === "number") {
            const Icon = featureIcons[key] || Users

            return (
              <Grid item xs={6} sm={4} md={3} key={key}>
                <Box className="text-center p-4 bg-background rounded-lg">
                  <Icon size={24} className="mx-auto mb-2 text-primary" />
                  <Typography variant="h6" className="font-bold mb-1">
                    {value}
                  </Typography>
                  <Typography variant="body2" className="text-textSecondary">
                    {key.replace(/([A-Z])/g, " $1").trim()}
                  </Typography>
                </Box>
              </Grid>
            )
          }

          return null
        })}
      </Grid>

      <Typography variant="h6" className="font-medium mb-4">
        Amenities
      </Typography>
      <Grid container spacing={2} className="mb-6">
        {space.amenities.map((amenity, index) => (
          <Grid item xs={12} sm={6} md={4} key={index}>
            <Box className="flex items-center gap-3 p-3 bg-background rounded-lg">
              {featureIcons[amenity.icon.toLowerCase()] && (() => {
                const Icon = featureIcons[amenity.icon.toLowerCase()]

                return <Icon size={20} className="text-primary" />
              })()}
              <Typography variant="body2">
                {amenity.label}
              </Typography>
            </Box>
          </Grid>
        ))}
      </Grid>

      <Typography variant="h6" className="font-medium mb-4">
        Additional Features
      </Typography>
      <Box className="flex flex-wrap gap-2">
        {Object.entries(space.propertyFeatures).map(([key, value]) => {
          if (typeof value === "boolean" && value) {
            return (
              <Chip
                key={key}
                label={key.replace(/([A-Z])/g, " $1").trim()}
                variant="outlined"
                color="primary"
              />
            )
          }

          return null
        })}
      </Box>
    </div>
  )
}

export default FeaturesTab








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\ReviewsTab.jsx
"use client"

import { useState } from "react"

import {
  Box,
  Typography,
  Rating,
  Avatar,
  Divider,
  Button,
  LinearProgress,
  Grid,
  Card,
  CardContent,
  FormControl,
  InputLabel,
  Select,
  MenuItem
} from "@mui/material"
import { Star } from "lucide-react"

const ReviewsTab = ({ reviews, rating, reviewCount }) => {
  const [filter, setFilter] = useState("all")

  const ratingCounts = [5, 4, 3, 2, 1].map(star => ({
    star,
    count: reviews.filter(review => review.rating === star).length,
    percentage: (reviews.filter(review => review.rating === star).length / reviews.length) * 100
  }))

  const filteredReviews = filter === "all"
    ? reviews
    : reviews.filter(review => review.rating === parseInt(filter))

  return (
    <Grid container spacing={6}>
      <Grid item xs={12} md={4}>
        <Card>
          <CardContent>
            <Typography variant="h6" className="font-medium mb-4">
              Rating Summary
            </Typography>

            <Box className="flex flex-col items-center mb-6">
              <Typography variant="h2" className="font-bold">
                {rating}
              </Typography>
              <Rating value={rating} precision={0.1} readOnly size="large" />
              <Typography variant="body2" className="text-textSecondary mt-1">
                Based on {reviewCount} reviews
              </Typography>
            </Box>

            <Box className="space-y-2">
              {ratingCounts.map((item) => (
                <Box key={item.star} className="flex items-center gap-2">
                  <Box className="flex items-center w-10">
                    <Typography variant="body2">{item.star}</Typography>
                    <Star size={14} className="text-warning ml-0.5" />
                  </Box>
                  <LinearProgress
                    variant="determinate"
                    value={item.percentage}
                    className="flex-1 h-2 rounded-full"
                    color={item.star > 3 ? "success" : item.star > 1 ? "warning" : "error"}
                  />
                  <Typography variant="body2" className="w-8 text-right">
                    {item.count}
                  </Typography>
                </Box>
              ))}
            </Box>
          </CardContent>
        </Card>
      </Grid>

      <Grid item xs={12} md={8}>
        <Box className="flex justify-between items-center mb-6">
          <Typography variant="h6" className="font-medium">
            Reviews
          </Typography>

          <FormControl size="small" className="min-w-[120px]">
            <InputLabel>Filter</InputLabel>
            <Select
              value={filter}
              label="Filter"
              onChange={(e) => setFilter(e.target.value)}
            >
              <MenuItem value="all">All Ratings</MenuItem>
              <MenuItem value="5">5 Stars</MenuItem>
              <MenuItem value="4">4 Stars</MenuItem>
              <MenuItem value="3">3 Stars</MenuItem>
              <MenuItem value="2">2 Stars</MenuItem>
              <MenuItem value="1">1 Star</MenuItem>
            </Select>
          </FormControl>
        </Box>

        {filteredReviews.length > 0 ? (
          <Box className="space-y-4">
            {filteredReviews.map((review) => (
              <Box key={review.id}>
                <Box className="flex gap-4">
                  <Avatar
                    src={review.avatar}
                    alt={review.author}
                    className="w-10 h-10"
                  />
                  <Box className="flex-1">
                    <Box className="flex justify-between items-start">
                      <Box>
                        <Typography variant="subtitle1" className="font-medium">
                          {review.author}
                        </Typography>
                        <Box className="flex items-center gap-1">
                          <Rating value={review.rating} size="small" readOnly />
                          <Typography variant="body2" className="text-textSecondary">
                            â€¢ {review.date}
                          </Typography>
                        </Box>
                      </Box>
                      <Typography
                        variant="caption"
                        className="text-textSecondary bg-background rounded-full px-2 py-0.5"
                      >
                        {review.membershipType}
                      </Typography>
                    </Box>
                    <Typography variant="body2" className="mt-2">
                      {review.comment}
                    </Typography>
                  </Box>
                </Box>
                <Divider className="my-4" />
              </Box>
            ))}

            <Box className="text-center mt-6">
              <Button variant="tonal" color="primary">
                Load more reviews
              </Button>
            </Box>
          </Box>
        ) : (
          <Box className="text-center py-8">
            <Typography variant="body1">
              No reviews match your filter criteria.
            </Typography>
            <Button
              variant="text"
              color="primary"
              onClick={() => setFilter("all")}
              className="mt-2"
            >
              Show all reviews
            </Button>
          </Box>
        )}
      </Grid>
    </Grid>
  )
}

export default ReviewsTab
undefined









// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\index.jsx
"use client"

import { useState, useEffect } from "react"

import { Box } from "@mui/material"

import SpaceHeader from "./SpaceHeader"
import SpaceTabs from "./SpaceTabs"
import RelatedSpaces from "./RelatedSpaces"

const mockSpaceData = {
  id: "1",
  title: "Creative Hub Studio",
  type: "Coworking Space",
  images: [
    "/images/spaces/1.jpg",
    "/images/spaces/2.jpg",
    "/images/spaces/3.jpg",
    "/images/spaces/4.jpg",
    "/images/spaces/5.jpg"
  ],
  featured: true,
  verified: true,
  rating: 4.8,
  reviewCount: 156,
  pricePerDay: 45,
  pricePerMonth: 800,
  capacity: 50,
  amenities: [
    { icon: "wifi", label: "High-Speed WiFi" },
    { icon: "coffee", label: "Coffee Bar" },
    { icon: "printer", label: "Printing Services" }
  ],
  propertyDetails: {
    address: "123 Innovation Street",
    city: "San Francisco",
    state: "CA",
    zipCode: "94105",
    type: "Commercial Building",
    yearBuilt: 2018,
    totalArea: 5000,
    floors: 3,
    accessHours: "24/7",
    securitySystem: true,
    elevatorAccess: true,
    reception: true
  },
  propertyFeatures: {
    totalDesks: 50,
    privateOffices: 5,
    meetingRooms: 3,
    phoneBooths: 4,
    kitchenettes: 2,
    restrooms: 4,
    bikeStorage: true
  },
  spaceAreas: [
    { name: "Open Workspace", area: 2500 },
    { name: "Private Offices", area: 1000 },
    { name: "Meeting Rooms", area: 800 }
  ],
  pricing: {
    dayPass: 45,
    weekPass: 200,
    monthPass: 800,
    dedicatedDesk: 350,
    privateOffice: 1200,
    meetingRoomHourly: 30,
    discounts: [
      { type: "3-month commitment", amount: "10%" },
      { type: "6-month commitment", amount: "15%" }
    ]
  },
  reviews: [
    {
      id: "1",
      author: "John Smith",
      avatar: "/images/avatars/1.png",
      date: "2 weeks ago",
      rating: 5,
      comment: "Fantastic workspace with great amenities.",
      membershipType: "Monthly Member"
    }
  ],
  host: {
    name: "Sarah Wilson",
    avatar: "/images/avatars/2.png",
    role: "Community Manager",
    responseTime: "within 2 hours"
  }
}

const SpaceDetails = ({ id }) => {
  const [spaceData, setSpaceData] = useState(mockSpaceData)

  useEffect(() => {
    // In a real app, fetch space data based on ID
  }, [id])

  return (
    <Box className="space-details-container">
      <SpaceHeader space={spaceData} />
      <SpaceTabs space={spaceData} />
      <RelatedSpaces currentSpaceId={spaceData.id} />
    </Box>
  )
}

export default SpaceDetails








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\RelatedSpaces.jsx
"use client"

import Image from "next/image"


import { Box, Typography, Grid, Card, CardContent, CardMedia, Chip, Button, Rating } from "@mui/material"

import { MapPin, Users, ArrowRight } from "lucide-react"



const relatedSpaces = [
  {
    id: "2",
    title: "Downtown Workshop",
    type: "Studio Space",
    image: "/images/spaces/2.jpg",
    location: "New York, NY",
    rating: 4.6,
    reviewCount: 89,
    pricePerDay: 65,
    capacity: 30
  },
  {
    id: "3",
    title: "Tech Innovation Center",
    type: "Coworking Space",
    image: "/images/spaces/3.jpg",
    location: "Austin, TX",
    rating: 4.9,
    reviewCount: 203,
    pricePerDay: 55,
    capacity: 100
  },
  {
    id: "4",
    title: "Creative Studio Loft",
    type: "Studio Space",
    image: "/images/spaces/4.jpg",
    location: "Los Angeles, CA",
    rating: 4.7,
    reviewCount: 156,
    pricePerDay: 75,
    capacity: 40
  }
]

const RelatedSpaces = ({ currentSpaceId }) => {
  const filteredSpaces = relatedSpaces.filter(space => space.id !== currentSpaceId)

  return (
    <Box className="mb-6">
      <Box className="flex justify-between items-center mb-6">
        <Typography variant="h6" className="font-medium">
          Similar Spaces
        </Typography>
        <Button
          variant="text"
          color="primary"
          endIcon={<ArrowRight size={18} />}
          className="text-sm"
        >
          View all
        </Button>
      </Box>

      <Grid container spacing={4}>
        {filteredSpaces.map((space) => (
          <Grid item xs={12} md={4} key={space.id}>
            <Card className="h-full transition-all duration-300 hover:shadow-lg hover:-translate-y-1">
              <Box className="relative h-48">
                <Image
                  src={space.image}
                  alt={space.title}
                  fill
                  className="object-cover"
                />
              </Box>
              <CardContent>
                <Typography variant="h6" className="font-semibold mb-1">
                  {space.title}
                </Typography>
                <Typography variant="body2" color="textSecondary" className="mb-2">
                  {space.type}
                </Typography>

                <Box className="flex items-center gap-2 mb-3">
                  <MapPin size={16} className="text-textSecondary" />
                  <Typography variant="body2" className="text-textSecondary">
                    {space.location}
                  </Typography>
                </Box>

                <Box className="flex items-center justify-between mb-4">
                  <Box className="flex items-center gap-1">
                    <Rating value={space.rating} precision={0.1} size="small" readOnly />
                    <Typography variant="body2" className="text-textSecondary">
                      ({space.reviewCount})
                    </Typography>
                  </Box>
                  <Box className="flex items-center gap-1">
                    <Users size={16} className="text-textSecondary" />
                    <Typography variant="body2" className="text-textSecondary">
                      Up to {space.capacity}
                    </Typography>
                  </Box>
                </Box>

                <Box className="flex items-center justify-between">
                  <Box>
                    <Typography variant="h6" className="font-semibold">
                      ${space.pricePerDay}
                    </Typography>
                    <Typography variant="caption" className="text-textSecondary">
                      per day
                    </Typography>
                  </Box>
                  <Button variant="outlined" color="primary">
                    View Details
                  </Button>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  )
}

export default RelatedSpaces








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\SpaceHeader.jsx
"use client"

import { useState } from "react"

import Image from "next/image"


import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  Avatar,
  Rating,
  IconButton,
  Modal
} from "@mui/material"

import { MapPin, Clock, Star, CheckCircle, Share2, Bookmark, Calendar, X } from "lucide-react"


import CustomIconButton from "@core/components/mui/IconButton"

const SpaceHeader = ({ space }) => {
  const [currentImageIndex, setCurrentImageIndex] = useState(0)
  const [showGallery, setShowGallery] = useState(false)

  const handleNextImage = () => {
    setCurrentImageIndex((prev) => (prev + 1) % space.images.length)
  }

  const handlePrevImage = () => {
    setCurrentImageIndex((prev) => (prev - 1 + space.images.length) % space.images.length)
  }

  return (
    <Card className="mb-6">
      {/* Image Gallery */}
      <Box className="relative h-[400px] cursor-pointer" onClick={() => setShowGallery(true)}>
        <Image
          src={space.images[currentImageIndex]}
          alt={space.title}
          fill
          className="object-cover"
          priority
        />

        {/* Navigation arrows */}
        <Box className="absolute inset-0 flex items-center justify-between p-4">
          <IconButton
            onClick={(e) => {
              e.stopPropagation()
              handlePrevImage()
            }}
            className="bg-white/80 hover:bg-white"
          >
            <X className="rotate-45" size={24} />
          </IconButton>
          <IconButton
            onClick={(e) => {
              e.stopPropagation()
              handleNextImage()
            }}
            className="bg-white/80 hover:bg-white"
          >
            <X className="-rotate-45" size={24} />
          </IconButton>
        </Box>

        {/* Image counter */}
        <Chip
          label={`${currentImageIndex + 1}/${space.images.length}`}
          className="absolute bottom-4 right-4 bg-white/80"
        />

        {/* Featured badge */}
        {space.featured && (
          <Chip
            label="Featured"
            color="primary"
            className="absolute top-4 left-4"
          />
        )}

        {/* Action buttons */}
        <Box className="absolute top-4 right-4 flex gap-2">
          <CustomIconButton
            color="inherit"
            className="bg-primary/80 hover:bg-primary"
            title="Share"
          >
            <Share2 size={20} />
          </CustomIconButton>
          <CustomIconButton
            color="inherit"
            className="bg-primary/80 hover:bg-primary"
            title="Save"
          >
            <Bookmark size={20} />
          </CustomIconButton>
        </Box>
      </Box>

      <CardContent>
        <Box className="flex flex-col md:flex-row md:items-start md:justify-between gap-6">
          {/* Left side - Space info */}
          <Box className="flex-1">
            <Box className="flex items-center gap-2 mb-2">
              <Typography variant="h4" className="font-bold">
                {space.title}
              </Typography>
              {space.verified && (
                <CheckCircle className="text-success" size={24} />
              )}
            </Box>

            <Typography variant="h6" color="textSecondary" className="mb-4">
              {space.type}
            </Typography>

            <Box className="flex flex-wrap items-center gap-4 mb-4">
              <Box className="flex items-center gap-1">
                <MapPin size={18} className="text-textSecondary" />
                <Typography variant="body2">
                  {space.propertyDetails.address}, {space.propertyDetails.city}
                </Typography>
              </Box>
              <Box className="flex items-center gap-1">
                <Clock size={18} className="text-textSecondary" />
                <Typography variant="body2">
                  Access: {space.propertyDetails.accessHours}
                </Typography>
              </Box>
              <Box className="flex items-center gap-1">
                <Star size={18} className="text-warning" />
                <Typography variant="body2">
                  <span className="font-medium">{space.rating}</span>
                  <span className="text-textSecondary"> ({space.reviewCount} reviews)</span>
                </Typography>
              </Box>
            </Box>

            {/* Host info */}
            <Box className="flex items-center gap-3">
              <Avatar
                src={space.host.avatar}
                alt={space.host.name}
                className="w-12 h-12"
              />
              <Box>
                <Typography variant="subtitle1" className="font-medium">
                  Hosted by {space.host.name}
                </Typography>
                <Typography variant="body2" className="text-textSecondary">
                  Responds {space.host.responseTime}
                </Typography>
              </Box>
            </Box>
          </Box>

          {/* Right side - Pricing and booking */}
          <Box className="bg-background rounded-lg p-6 min-w-[300px]">
            <Box className="mb-4">
              <Typography variant="h4" className="font-bold mb-1">
                ${space.pricePerDay}
              </Typography>
              <Typography variant="body2" className="text-textSecondary">
                per day
              </Typography>
            </Box>

            <Box className="space-y-3 mb-6">
              <Typography variant="body2">
                <span className="font-medium">Monthly from:</span> ${space.pricePerMonth}
              </Typography>
              <Typography variant="body2">
                <span className="font-medium">Capacity:</span> Up to {space.capacity} people
              </Typography>
            </Box>

            <Button
              variant="contained"
              color="primary"
              fullWidth
              size="large"
              startIcon={<Calendar size={20} />}
            >
              Book Now
            </Button>
          </Box>
        </Box>
      </CardContent>

      {/* Image Gallery Modal */}
      <Modal open={showGallery} onClose={() => setShowGallery(false)}>
        <Box className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-6 rounded-lg w-full max-w-4xl max-h-[90vh] overflow-auto">
          <Box className="flex justify-between items-center mb-4">
            <Typography variant="h6">Photo Gallery</Typography>
            <IconButton onClick={() => setShowGallery(false)}>
              <X size={24} />
            </IconButton>
          </Box>

          {/* Main Image */}
          <Box className="relative h-96 mb-4">
            <Image
              src={space.images[currentImageIndex]}
              alt={`Space image ${currentImageIndex + 1}`}
              fill
              className="object-contain"
            />
          </Box>

          {/* Thumbnails */}
          <Box className="grid grid-cols-4 gap-2">
            {space.images.map((image, index) => (
              <Box
                key={index}
                className={`relative h-20 cursor-pointer border-2 ${currentImageIndex === index  }`}
                onClick={() => setCurrentImageIndex(index)}
              >
                <Image
                  src={image}
                  alt={`Thumbnail ${index + 1}`}
                  fill
                  className="object-cover"
                />
              </Box>
            ))}
          </Box>
        </Box>
      </Modal>
    </Card>
  )
}

export default SpaceHeader








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\SpaceTabs.jsx
"use client"

import { useState } from "react"

import { Box, Card, CardContent, Tabs, Tab } from "@mui/material"

import AboutTab from "./tabs/AboutTab"
import FeaturesTab from "./tabs/FeaturesTab"
import ReviewsTab from "./tabs/ReviewsTab"

function TabPanel(props) {
  const { children, value, index, ...other } = props

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`space-tabpanel-${index}`}
      aria-labelledby={`space-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ py: 3 }}>
          {children}
        </Box>
      )}
    </div>
  )
}

function a11yProps(index) {
  return {
    id: `space-tab-${index}`,
    "aria-controls": `space-tabpanel-${index}`,
  }
}

const SpaceTabs = ({ space }) => {
  const [value, setValue] = useState(0)

  const handleChange = (event, newValue) => {
    setValue(newValue)
  }

  return (
    <Card className="mb-6">
      <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
        <Tabs
          value={value}
          onChange={handleChange}
          aria-label="space details tabs"
          className="px-4"
        >
          <Tab label="About" {...a11yProps(0)} />
          <Tab label="Features & Amenities" {...a11yProps(1)} />
          <Tab label={`Reviews (${space.reviewCount})`} {...a11yProps(2)} />
        </Tabs>
      </Box>
      <CardContent>
        <TabPanel value={value} index={0}>
          <AboutTab space={space} />
        </TabPanel>
        <TabPanel value={value} index={1}>
          <FeaturesTab space={space} />
        </TabPanel>
        <TabPanel value={value} index={2}>
          <ReviewsTab
            reviews={space.reviews}
            rating={space.rating}
            reviewCount={space.reviewCount}
          />
        </TabPanel>
      </CardContent>
    </Card>
  )
}

export default SpaceTabs










// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\AboutTab.jsx
"use client"

import { Box, Typography, Grid, Divider } from "@mui/material"
import { MapPin, Clock, Building, Calendar } from "lucide-react"

const AboutTab = ({ space }) => {
  return (
    <div>
      {/* Property Details Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Property Details
      </Typography>
      <Grid container spacing={4} className="mb-6">
        <Grid item xs={12} md={6}>
          <Box className="space-y-3">
            <Box className="flex items-center gap-2">
              <MapPin size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Address</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.address}, {space.propertyDetails.city}, {space.propertyDetails.state} {space.propertyDetails.zipCode}
                </Typography>
              </Box>
            </Box>
            <Box className="flex items-center gap-2">
              <Building size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Property Type</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.type} (Built {space.propertyDetails.yearBuilt})
                </Typography>
              </Box>
            </Box>
            <Box className="flex items-center gap-2">
              <Clock size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Access Hours</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.accessHours}
                </Typography>
              </Box>
            </Box>
          </Box>
        </Grid>
        <Grid item xs={12} md={6}>
          <Box className="space-y-3">
            <Box>
              <Typography variant="subtitle2">Total Area</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {space.propertyDetails.totalArea.toLocaleString()} sq ft
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2">Number of Floors</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {space.propertyDetails.floors}
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2">Additional Features</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {[
                  space.propertyDetails.securitySystem && "Security System",
                  space.propertyDetails.elevatorAccess && "Elevator Access",
                  space.propertyDetails.reception && "Reception"
                ].filter(Boolean).join(", ")}
              </Typography>
            </Box>
          </Box>
        </Grid>
      </Grid>

      <Divider className="my-6" />

      {/* Space Areas Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Space Areas
      </Typography>
      <Grid container spacing={4} className="mb-6">
        {space.spaceAreas.map((area, index) => (
          <Grid item xs={12} sm={6} md={3} key={index}>
            <Box className="text-center p-4 bg-background rounded-lg">
              <Typography variant="h5" className="font-bold mb-1">
                {area.area.toLocaleString()}
              </Typography>
              <Typography variant="body2" className="text-textSecondary">
                sq ft
              </Typography>
              <Typography variant="subtitle2" className="mt-2">
                {area.name}
              </Typography>
            </Box>
          </Grid>
        ))}
      </Grid>

      <Divider className="my-6" />

      {/* Pricing Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Pricing Details
      </Typography>
      <Grid container spacing={4}>
        <Grid item xs={12} md={8}>
          <Box className="space-y-4">
            <Grid container spacing={2}>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.dayPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Day Pass
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.weekPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Week Pass
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.monthPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Month Pass
                  </Typography>
                </Box>
              </Grid>
            </Grid>

            <Box className="mt-4">
              <Typography variant="subtitle2" className="mb-2">
                Available Discounts
              </Typography>
              {space.pricing.discounts.map((discount, index) => (
                <Typography key={index} variant="body2" className="text-textSecondary">
                  â€¢ {discount.type}: {discount.amount} off
                </Typography>
              ))}
            </Box>
          </Box>
        </Grid>
        <Grid item xs={12} md={4}>
          <Box className="p-4 bg-background rounded-lg">
            <Typography variant="subtitle2" className="mb-3">
              Additional Rates
            </Typography>
            <Box className="space-y-2">
              <Box className="flex justify-between">
                <Typography variant="body2">Dedicated Desk</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.dedicatedDesk}/mo
                </Typography>
              </Box>
              <Box className="flex justify-between">
                <Typography variant="body2">Private Office</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.privateOffice}/mo
                </Typography>
              </Box>
              <Box className="flex justify-between">
                <Typography variant="body2">Meeting Room</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.meetingRoomHourly}/hr
                </Typography>
              </Box>
            </Box>
          </Box>
        </Grid>
      </Grid>
    </div>
  )
}

export default AboutTab








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\FeaturesTab.jsx
"use client"

import { Box, Typography, Grid, Chip } from "@mui/material"
import { Users, Monitor, Phone, Twitch as Kitchen, Bath, Bike, Wifi, Coffee, Printer, Car, Wind, DoorClosed, Baby } from "lucide-react"

const FeaturesTab = ({ space }) => {
  const featureIcons = {
    totalDesks: Users,
    privateOffices: DoorClosed,
    phoneBooths: Phone,
    kitchenettes: Kitchen,
    restrooms: Bath,
    bikeStorage: Bike,
    wifi: Wifi,
    coffee: Coffee,
    printer: Printer,
    parking: Car,
    airConditioning: Wind,
    meetingRooms: Monitor,
    motherRoom: Baby
  }

  return (
    <div>
      <Typography variant="h6" className="font-medium mb-4">
        Property Features
      </Typography>
      <Grid container spacing={4} className="mb-8">
        {Object.entries(space.propertyFeatures).map(([key, value]) => {
          if (typeof value === "number") {
            const Icon = featureIcons[key] || Users

            return (
              <Grid item xs={6} sm={4} md={3} key={key}>
                <Box className="text-center p-4 bg-background rounded-lg">
                  <Icon size={24} className="mx-auto mb-2 text-primary" />
                  <Typography variant="h6" className="font-bold mb-1">
                    {value}
                  </Typography>
                  <Typography variant="body2" className="text-textSecondary">
                    {key.replace(/([A-Z])/g, " $1").trim()}
                  </Typography>
                </Box>
              </Grid>
            )
          }

          return null
        })}
      </Grid>

      <Typography variant="h6" className="font-medium mb-4">
        Amenities
      </Typography>
      <Grid container spacing={2} className="mb-6">
        {space.amenities.map((amenity, index) => (
          <Grid item xs={12} sm={6} md={4} key={index}>
            <Box className="flex items-center gap-3 p-3 bg-background rounded-lg">
              {featureIcons[amenity.icon.toLowerCase()] && (() => {
                const Icon = featureIcons[amenity.icon.toLowerCase()]

                return <Icon size={20} className="text-primary" />
              })()}
              <Typography variant="body2">
                {amenity.label}
              </Typography>
            </Box>
          </Grid>
        ))}
      </Grid>

      <Typography variant="h6" className="font-medium mb-4">
        Additional Features
      </Typography>
      <Box className="flex flex-wrap gap-2">
        {Object.entries(space.propertyFeatures).map(([key, value]) => {
          if (typeof value === "boolean" && value) {
            return (
              <Chip
                key={key}
                label={key.replace(/([A-Z])/g, " $1").trim()}
                variant="outlined"
                color="primary"
              />
            )
          }

          return null
        })}
      </Box>
    </div>
  )
}

export default FeaturesTab








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\ReviewsTab.jsx
"use client"

import { useState } from "react"

import {
  Box,
  Typography,
  Rating,
  Avatar,
  Divider,
  Button,
  LinearProgress,
  Grid,
  Card,
  CardContent,
  FormControl,
  InputLabel,
  Select,
  MenuItem
} from "@mui/material"
import { Star } from "lucide-react"

const ReviewsTab = ({ reviews, rating, reviewCount }) => {
  const [filter, setFilter] = useState("all")

  const ratingCounts = [5, 4, 3, 2, 1].map(star => ({
    star,
    count: reviews.filter(review => review.rating === star).length,
    percentage: (reviews.filter(review => review.rating === star).length / reviews.length) * 100
  }))

  const filteredReviews = filter === "all"
    ? reviews
    : reviews.filter(review => review.rating === parseInt(filter))

  return (
    <Grid container spacing={6}>
      <Grid item xs={12} md={4}>
        <Card>
          <CardContent>
            <Typography variant="h6" className="font-medium mb-4">
              Rating Summary
            </Typography>

            <Box className="flex flex-col items-center mb-6">
              <Typography variant="h2" className="font-bold">
                {rating}
              </Typography>
              <Rating value={rating} precision={0.1} readOnly size="large" />
              <Typography variant="body2" className="text-textSecondary mt-1">
                Based on {reviewCount} reviews
              </Typography>
            </Box>

            <Box className="space-y-2">
              {ratingCounts.map((item) => (
                <Box key={item.star} className="flex items-center gap-2">
                  <Box className="flex items-center w-10">
                    <Typography variant="body2">{item.star}</Typography>
                    <Star size={14} className="text-warning ml-0.5" />
                  </Box>
                  <LinearProgress
                    variant="determinate"
                    value={item.percentage}
                    className="flex-1 h-2 rounded-full"
                    color={item.star > 3 ? "success" : item.star > 1 ? "warning" : "error"}
                  />
                  <Typography variant="body2" className="w-8 text-right">
                    {item.count}
                  </Typography>
                </Box>
              ))}
            </Box>
          </CardContent>
        </Card>
      </Grid>

      <Grid item xs={12} md={8}>
        <Box className="flex justify-between items-center mb-6">
          <Typography variant="h6" className="font-medium">
            Reviews
          </Typography>

          <FormControl size="small" className="min-w-[120px]">
            <InputLabel>Filter</InputLabel>
            <Select
              value={filter}
              label="Filter"
              onChange={(e) => setFilter(e.target.value)}
            >
              <MenuItem value="all">All Ratings</MenuItem>
              <MenuItem value="5">5 Stars</MenuItem>
              <MenuItem value="4">4 Stars</MenuItem>
              <MenuItem value="3">3 Stars</MenuItem>
              <MenuItem value="2">2 Stars</MenuItem>
              <MenuItem value="1">1 Star</MenuItem>
            </Select>
          </FormControl>
        </Box>

        {filteredReviews.length > 0 ? (
          <Box className="space-y-4">
            {filteredReviews.map((review) => (
              <Box key={review.id}>
                <Box className="flex gap-4">
                  <Avatar
                    src={review.avatar}
                    alt={review.author}
                    className="w-10 h-10"
                  />
                  <Box className="flex-1">
                    <Box className="flex justify-between items-start">
                      <Box>
                        <Typography variant="subtitle1" className="font-medium">
                          {review.author}
                        </Typography>
                        <Box className="flex items-center gap-1">
                          <Rating value={review.rating} size="small" readOnly />
                          <Typography variant="body2" className="text-textSecondary">
                            â€¢ {review.date}
                          </Typography>
                        </Box>
                      </Box>
                      <Typography
                        variant="caption"
                        className="text-textSecondary bg-background rounded-full px-2 py-0.5"
                      >
                        {review.membershipType}
                      </Typography>
                    </Box>
                    <Typography variant="body2" className="mt-2">
                      {review.comment}
                    </Typography>
                  </Box>
                </Box>
                <Divider className="my-4" />
              </Box>
            ))}

            <Box className="text-center mt-6">
              <Button variant="tonal" color="primary">
                Load more reviews
              </Button>
            </Box>
          </Box>
        ) : (
          <Box className="text-center py-8">
            <Typography variant="body1">
              No reviews match your filter criteria.
            </Typography>
            <Button
              variant="text"
              color="primary"
              onClick={() => setFilter("all")}
              className="mt-2"
            >
              Show all reviews
            </Button>
          </Box>
        )}
      </Grid>
    </Grid>
  )
}

export default ReviewsTab
undefined









// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\index.jsx
"use client"

import { useState, useEffect } from "react"

import { Box } from "@mui/material"

import SpaceHeader from "./SpaceHeader"
import SpaceTabs from "./SpaceTabs"
import RelatedSpaces from "./RelatedSpaces"

const mockSpaceData = {
  id: "1",
  title: "Creative Hub Studio",
  type: "Coworking Space",
  images: [
    "/images/spaces/1.jpg",
    "/images/spaces/2.jpg",
    "/images/spaces/3.jpg",
    "/images/spaces/4.jpg",
    "/images/spaces/5.jpg"
  ],
  featured: true,
  verified: true,
  rating: 4.8,
  reviewCount: 156,
  pricePerDay: 45,
  pricePerMonth: 800,
  capacity: 50,
  amenities: [
    { icon: "wifi", label: "High-Speed WiFi" },
    { icon: "coffee", label: "Coffee Bar" },
    { icon: "printer", label: "Printing Services" }
  ],
  propertyDetails: {
    address: "123 Innovation Street",
    city: "San Francisco",
    state: "CA",
    zipCode: "94105",
    type: "Commercial Building",
    yearBuilt: 2018,
    totalArea: 5000,
    floors: 3,
    accessHours: "24/7",
    securitySystem: true,
    elevatorAccess: true,
    reception: true
  },
  propertyFeatures: {
    totalDesks: 50,
    privateOffices: 5,
    meetingRooms: 3,
    phoneBooths: 4,
    kitchenettes: 2,
    restrooms: 4,
    bikeStorage: true
  },
  spaceAreas: [
    { name: "Open Workspace", area: 2500 },
    { name: "Private Offices", area: 1000 },
    { name: "Meeting Rooms", area: 800 }
  ],
  pricing: {
    dayPass: 45,
    weekPass: 200,
    monthPass: 800,
    dedicatedDesk: 350,
    privateOffice: 1200,
    meetingRoomHourly: 30,
    discounts: [
      { type: "3-month commitment", amount: "10%" },
      { type: "6-month commitment", amount: "15%" }
    ]
  },
  reviews: [
    {
      id: "1",
      author: "John Smith",
      avatar: "/images/avatars/1.png",
      date: "2 weeks ago",
      rating: 5,
      comment: "Fantastic workspace with great amenities.",
      membershipType: "Monthly Member"
    }
  ],
  host: {
    name: "Sarah Wilson",
    avatar: "/images/avatars/2.png",
    role: "Community Manager",
    responseTime: "within 2 hours"
  }
}

const SpaceDetails = ({ id }) => {
  const [spaceData, setSpaceData] = useState(mockSpaceData)

  useEffect(() => {
    // In a real app, fetch space data based on ID
  }, [id])

  return (
    <Box className="space-details-container">
      <SpaceHeader space={spaceData} />
      <SpaceTabs space={spaceData} />
      <RelatedSpaces currentSpaceId={spaceData.id} />
    </Box>
  )
}

export default SpaceDetails








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\RelatedSpaces.jsx
"use client"

import Image from "next/image"


import { Box, Typography, Grid, Card, CardContent, CardMedia, Chip, Button, Rating } from "@mui/material"

import { MapPin, Users, ArrowRight } from "lucide-react"



const relatedSpaces = [
  {
    id: "2",
    title: "Downtown Workshop",
    type: "Studio Space",
    image: "/images/spaces/2.jpg",
    location: "New York, NY",
    rating: 4.6,
    reviewCount: 89,
    pricePerDay: 65,
    capacity: 30
  },
  {
    id: "3",
    title: "Tech Innovation Center",
    type: "Coworking Space",
    image: "/images/spaces/3.jpg",
    location: "Austin, TX",
    rating: 4.9,
    reviewCount: 203,
    pricePerDay: 55,
    capacity: 100
  },
  {
    id: "4",
    title: "Creative Studio Loft",
    type: "Studio Space",
    image: "/images/spaces/4.jpg",
    location: "Los Angeles, CA",
    rating: 4.7,
    reviewCount: 156,
    pricePerDay: 75,
    capacity: 40
  }
]

const RelatedSpaces = ({ currentSpaceId }) => {
  const filteredSpaces = relatedSpaces.filter(space => space.id !== currentSpaceId)

  return (
    <Box className="mb-6">
      <Box className="flex justify-between items-center mb-6">
        <Typography variant="h6" className="font-medium">
          Similar Spaces
        </Typography>
        <Button
          variant="text"
          color="primary"
          endIcon={<ArrowRight size={18} />}
          className="text-sm"
        >
          View all
        </Button>
      </Box>

      <Grid container spacing={4}>
        {filteredSpaces.map((space) => (
          <Grid item xs={12} md={4} key={space.id}>
            <Card className="h-full transition-all duration-300 hover:shadow-lg hover:-translate-y-1">
              <Box className="relative h-48">
                <Image
                  src={space.image}
                  alt={space.title}
                  fill
                  className="object-cover"
                />
              </Box>
              <CardContent>
                <Typography variant="h6" className="font-semibold mb-1">
                  {space.title}
                </Typography>
                <Typography variant="body2" color="textSecondary" className="mb-2">
                  {space.type}
                </Typography>

                <Box className="flex items-center gap-2 mb-3">
                  <MapPin size={16} className="text-textSecondary" />
                  <Typography variant="body2" className="text-textSecondary">
                    {space.location}
                  </Typography>
                </Box>

                <Box className="flex items-center justify-between mb-4">
                  <Box className="flex items-center gap-1">
                    <Rating value={space.rating} precision={0.1} size="small" readOnly />
                    <Typography variant="body2" className="text-textSecondary">
                      ({space.reviewCount})
                    </Typography>
                  </Box>
                  <Box className="flex items-center gap-1">
                    <Users size={16} className="text-textSecondary" />
                    <Typography variant="body2" className="text-textSecondary">
                      Up to {space.capacity}
                    </Typography>
                  </Box>
                </Box>

                <Box className="flex items-center justify-between">
                  <Box>
                    <Typography variant="h6" className="font-semibold">
                      ${space.pricePerDay}
                    </Typography>
                    <Typography variant="caption" className="text-textSecondary">
                      per day
                    </Typography>
                  </Box>
                  <Button variant="outlined" color="primary">
                    View Details
                  </Button>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  )
}

export default RelatedSpaces








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\SpaceHeader.jsx
"use client"

import { useState } from "react"

import Image from "next/image"


import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  Avatar,
  Rating,
  IconButton,
  Modal
} from "@mui/material"

import { MapPin, Clock, Star, CheckCircle, Share2, Bookmark, Calendar, X } from "lucide-react"


import CustomIconButton from "@core/components/mui/IconButton"

const SpaceHeader = ({ space }) => {
  const [currentImageIndex, setCurrentImageIndex] = useState(0)
  const [showGallery, setShowGallery] = useState(false)

  const handleNextImage = () => {
    setCurrentImageIndex((prev) => (prev + 1) % space.images.length)
  }

  const handlePrevImage = () => {
    setCurrentImageIndex((prev) => (prev - 1 + space.images.length) % space.images.length)
  }

  return (
    <Card className="mb-6">
      {/* Image Gallery */}
      <Box className="relative h-[400px] cursor-pointer" onClick={() => setShowGallery(true)}>
        <Image
          src={space.images[currentImageIndex]}
          alt={space.title}
          fill
          className="object-cover"
          priority
        />

        {/* Navigation arrows */}
        <Box className="absolute inset-0 flex items-center justify-between p-4">
          <IconButton
            onClick={(e) => {
              e.stopPropagation()
              handlePrevImage()
            }}
            className="bg-white/80 hover:bg-white"
          >
            <X className="rotate-45" size={24} />
          </IconButton>
          <IconButton
            onClick={(e) => {
              e.stopPropagation()
              handleNextImage()
            }}
            className="bg-white/80 hover:bg-white"
          >
            <X className="-rotate-45" size={24} />
          </IconButton>
        </Box>

        {/* Image counter */}
        <Chip
          label={`${currentImageIndex + 1}/${space.images.length}`}
          className="absolute bottom-4 right-4 bg-white/80"
        />

        {/* Featured badge */}
        {space.featured && (
          <Chip
            label="Featured"
            color="primary"
            className="absolute top-4 left-4"
          />
        )}

        {/* Action buttons */}
        <Box className="absolute top-4 right-4 flex gap-2">
          <CustomIconButton
            color="inherit"
            className="bg-primary/80 hover:bg-primary"
            title="Share"
          >
            <Share2 size={20} />
          </CustomIconButton>
          <CustomIconButton
            color="inherit"
            className="bg-primary/80 hover:bg-primary"
            title="Save"
          >
            <Bookmark size={20} />
          </CustomIconButton>
        </Box>
      </Box>

      <CardContent>
        <Box className="flex flex-col md:flex-row md:items-start md:justify-between gap-6">
          {/* Left side - Space info */}
          <Box className="flex-1">
            <Box className="flex items-center gap-2 mb-2">
              <Typography variant="h4" className="font-bold">
                {space.title}
              </Typography>
              {space.verified && (
                <CheckCircle className="text-success" size={24} />
              )}
            </Box>

            <Typography variant="h6" color="textSecondary" className="mb-4">
              {space.type}
            </Typography>

            <Box className="flex flex-wrap items-center gap-4 mb-4">
              <Box className="flex items-center gap-1">
                <MapPin size={18} className="text-textSecondary" />
                <Typography variant="body2">
                  {space.propertyDetails.address}, {space.propertyDetails.city}
                </Typography>
              </Box>
              <Box className="flex items-center gap-1">
                <Clock size={18} className="text-textSecondary" />
                <Typography variant="body2">
                  Access: {space.propertyDetails.accessHours}
                </Typography>
              </Box>
              <Box className="flex items-center gap-1">
                <Star size={18} className="text-warning" />
                <Typography variant="body2">
                  <span className="font-medium">{space.rating}</span>
                  <span className="text-textSecondary"> ({space.reviewCount} reviews)</span>
                </Typography>
              </Box>
            </Box>

            {/* Host info */}
            <Box className="flex items-center gap-3">
              <Avatar
                src={space.host.avatar}
                alt={space.host.name}
                className="w-12 h-12"
              />
              <Box>
                <Typography variant="subtitle1" className="font-medium">
                  Hosted by {space.host.name}
                </Typography>
                <Typography variant="body2" className="text-textSecondary">
                  Responds {space.host.responseTime}
                </Typography>
              </Box>
            </Box>
          </Box>

          {/* Right side - Pricing and booking */}
          <Box className="bg-background rounded-lg p-6 min-w-[300px]">
            <Box className="mb-4">
              <Typography variant="h4" className="font-bold mb-1">
                ${space.pricePerDay}
              </Typography>
              <Typography variant="body2" className="text-textSecondary">
                per day
              </Typography>
            </Box>

            <Box className="space-y-3 mb-6">
              <Typography variant="body2">
                <span className="font-medium">Monthly from:</span> ${space.pricePerMonth}
              </Typography>
              <Typography variant="body2">
                <span className="font-medium">Capacity:</span> Up to {space.capacity} people
              </Typography>
            </Box>

            <Button
              variant="contained"
              color="primary"
              fullWidth
              size="large"
              startIcon={<Calendar size={20} />}
            >
              Book Now
            </Button>
          </Box>
        </Box>
      </CardContent>

      {/* Image Gallery Modal */}
      <Modal open={showGallery} onClose={() => setShowGallery(false)}>
        <Box className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-6 rounded-lg w-full max-w-4xl max-h-[90vh] overflow-auto">
          <Box className="flex justify-between items-center mb-4">
            <Typography variant="h6">Photo Gallery</Typography>
            <IconButton onClick={() => setShowGallery(false)}>
              <X size={24} />
            </IconButton>
          </Box>

          {/* Main Image */}
          <Box className="relative h-96 mb-4">
            <Image
              src={space.images[currentImageIndex]}
              alt={`Space image ${currentImageIndex + 1}`}
              fill
              className="object-contain"
            />
          </Box>

          {/* Thumbnails */}
          <Box className="grid grid-cols-4 gap-2">
            {space.images.map((image, index) => (
              <Box
                key={index}
                className={`relative h-20 cursor-pointer border-2 ${currentImageIndex === index  }`}
                onClick={() => setCurrentImageIndex(index)}
              >
                <Image
                  src={image}
                  alt={`Thumbnail ${index + 1}`}
                  fill
                  className="object-cover"
                />
              </Box>
            ))}
          </Box>
        </Box>
      </Modal>
    </Card>
  )
}

export default SpaceHeader








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\SpaceTabs.jsx
"use client"

import { useState } from "react"

import { Box, Card, CardContent, Tabs, Tab } from "@mui/material"

import AboutTab from "./tabs/AboutTab"
import FeaturesTab from "./tabs/FeaturesTab"
import ReviewsTab from "./tabs/ReviewsTab"

function TabPanel(props) {
  const { children, value, index, ...other } = props

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`space-tabpanel-${index}`}
      aria-labelledby={`space-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ py: 3 }}>
          {children}
        </Box>
      )}
    </div>
  )
}

function a11yProps(index) {
  return {
    id: `space-tab-${index}`,
    "aria-controls": `space-tabpanel-${index}`,
  }
}

const SpaceTabs = ({ space }) => {
  const [value, setValue] = useState(0)

  const handleChange = (event, newValue) => {
    setValue(newValue)
  }

  return (
    <Card className="mb-6">
      <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
        <Tabs
          value={value}
          onChange={handleChange}
          aria-label="space details tabs"
          className="px-4"
        >
          <Tab label="About" {...a11yProps(0)} />
          <Tab label="Features & Amenities" {...a11yProps(1)} />
          <Tab label={`Reviews (${space.reviewCount})`} {...a11yProps(2)} />
        </Tabs>
      </Box>
      <CardContent>
        <TabPanel value={value} index={0}>
          <AboutTab space={space} />
        </TabPanel>
        <TabPanel value={value} index={1}>
          <FeaturesTab space={space} />
        </TabPanel>
        <TabPanel value={value} index={2}>
          <ReviewsTab
            reviews={space.reviews}
            rating={space.rating}
            reviewCount={space.reviewCount}
          />
        </TabPanel>
      </CardContent>
    </Card>
  )
}

export default SpaceTabs










// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\AboutTab.jsx
"use client"

import { Box, Typography, Grid, Divider } from "@mui/material"
import { MapPin, Clock, Building, Calendar } from "lucide-react"

const AboutTab = ({ space }) => {
  return (
    <div>
      {/* Property Details Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Property Details
      </Typography>
      <Grid container spacing={4} className="mb-6">
        <Grid item xs={12} md={6}>
          <Box className="space-y-3">
            <Box className="flex items-center gap-2">
              <MapPin size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Address</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.address}, {space.propertyDetails.city}, {space.propertyDetails.state} {space.propertyDetails.zipCode}
                </Typography>
              </Box>
            </Box>
            <Box className="flex items-center gap-2">
              <Building size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Property Type</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.type} (Built {space.propertyDetails.yearBuilt})
                </Typography>
              </Box>
            </Box>
            <Box className="flex items-center gap-2">
              <Clock size={20} className="text-primary" />
              <Box>
                <Typography variant="subtitle2">Access Hours</Typography>
                <Typography variant="body2" className="text-textSecondary">
                  {space.propertyDetails.accessHours}
                </Typography>
              </Box>
            </Box>
          </Box>
        </Grid>
        <Grid item xs={12} md={6}>
          <Box className="space-y-3">
            <Box>
              <Typography variant="subtitle2">Total Area</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {space.propertyDetails.totalArea.toLocaleString()} sq ft
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2">Number of Floors</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {space.propertyDetails.floors}
              </Typography>
            </Box>
            <Box>
              <Typography variant="subtitle2">Additional Features</Typography>
              <Typography variant="body2" className="text-textSecondary">
                {[
                  space.propertyDetails.securitySystem && "Security System",
                  space.propertyDetails.elevatorAccess && "Elevator Access",
                  space.propertyDetails.reception && "Reception"
                ].filter(Boolean).join(", ")}
              </Typography>
            </Box>
          </Box>
        </Grid>
      </Grid>

      <Divider className="my-6" />

      {/* Space Areas Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Space Areas
      </Typography>
      <Grid container spacing={4} className="mb-6">
        {space.spaceAreas.map((area, index) => (
          <Grid item xs={12} sm={6} md={3} key={index}>
            <Box className="text-center p-4 bg-background rounded-lg">
              <Typography variant="h5" className="font-bold mb-1">
                {area.area.toLocaleString()}
              </Typography>
              <Typography variant="body2" className="text-textSecondary">
                sq ft
              </Typography>
              <Typography variant="subtitle2" className="mt-2">
                {area.name}
              </Typography>
            </Box>
          </Grid>
        ))}
      </Grid>

      <Divider className="my-6" />

      {/* Pricing Section */}
      <Typography variant="h6" className="font-medium mb-4">
        Pricing Details
      </Typography>
      <Grid container spacing={4}>
        <Grid item xs={12} md={8}>
          <Box className="space-y-4">
            <Grid container spacing={2}>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.dayPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Day Pass
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.weekPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Week Pass
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={4}>
                <Box className="p-3 bg-background rounded-lg text-center">
                  <Typography variant="h6" className="font-bold">
                    ${space.pricing.monthPass}
                  </Typography>
                  <Typography variant="caption" className="text-textSecondary">
                    Month Pass
                  </Typography>
                </Box>
              </Grid>
            </Grid>

            <Box className="mt-4">
              <Typography variant="subtitle2" className="mb-2">
                Available Discounts
              </Typography>
              {space.pricing.discounts.map((discount, index) => (
                <Typography key={index} variant="body2" className="text-textSecondary">
                  â€¢ {discount.type}: {discount.amount} off
                </Typography>
              ))}
            </Box>
          </Box>
        </Grid>
        <Grid item xs={12} md={4}>
          <Box className="p-4 bg-background rounded-lg">
            <Typography variant="subtitle2" className="mb-3">
              Additional Rates
            </Typography>
            <Box className="space-y-2">
              <Box className="flex justify-between">
                <Typography variant="body2">Dedicated Desk</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.dedicatedDesk}/mo
                </Typography>
              </Box>
              <Box className="flex justify-between">
                <Typography variant="body2">Private Office</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.privateOffice}/mo
                </Typography>
              </Box>
              <Box className="flex justify-between">
                <Typography variant="body2">Meeting Room</Typography>
                <Typography variant="body2" className="font-medium">
                  ${space.pricing.meetingRoomHourly}/hr
                </Typography>
              </Box>
            </Box>
          </Box>
        </Grid>
      </Grid>
    </div>
  )
}

export default AboutTab








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\FeaturesTab.jsx
"use client"

import { Box, Typography, Grid, Chip } from "@mui/material"
import { Users, Monitor, Phone, Twitch as Kitchen, Bath, Bike, Wifi, Coffee, Printer, Car, Wind, DoorClosed, Baby } from "lucide-react"

const FeaturesTab = ({ space }) => {
  const featureIcons = {
    totalDesks: Users,
    privateOffices: DoorClosed,
    phoneBooths: Phone,
    kitchenettes: Kitchen,
    restrooms: Bath,
    bikeStorage: Bike,
    wifi: Wifi,
    coffee: Coffee,
    printer: Printer,
    parking: Car,
    airConditioning: Wind,
    meetingRooms: Monitor,
    motherRoom: Baby
  }

  return (
    <div>
      <Typography variant="h6" className="font-medium mb-4">
        Property Features
      </Typography>
      <Grid container spacing={4} className="mb-8">
        {Object.entries(space.propertyFeatures).map(([key, value]) => {
          if (typeof value === "number") {
            const Icon = featureIcons[key] || Users

            return (
              <Grid item xs={6} sm={4} md={3} key={key}>
                <Box className="text-center p-4 bg-background rounded-lg">
                  <Icon size={24} className="mx-auto mb-2 text-primary" />
                  <Typography variant="h6" className="font-bold mb-1">
                    {value}
                  </Typography>
                  <Typography variant="body2" className="text-textSecondary">
                    {key.replace(/([A-Z])/g, " $1").trim()}
                  </Typography>
                </Box>
              </Grid>
            )
          }

          return null
        })}
      </Grid>

      <Typography variant="h6" className="font-medium mb-4">
        Amenities
      </Typography>
      <Grid container spacing={2} className="mb-6">
        {space.amenities.map((amenity, index) => (
          <Grid item xs={12} sm={6} md={4} key={index}>
            <Box className="flex items-center gap-3 p-3 bg-background rounded-lg">
              {featureIcons[amenity.icon.toLowerCase()] && (() => {
                const Icon = featureIcons[amenity.icon.toLowerCase()]

                return <Icon size={20} className="text-primary" />
              })()}
              <Typography variant="body2">
                {amenity.label}
              </Typography>
            </Box>
          </Grid>
        ))}
      </Grid>

      <Typography variant="h6" className="font-medium mb-4">
        Additional Features
      </Typography>
      <Box className="flex flex-wrap gap-2">
        {Object.entries(space.propertyFeatures).map(([key, value]) => {
          if (typeof value === "boolean" && value) {
            return (
              <Chip
                key={key}
                label={key.replace(/([A-Z])/g, " $1").trim()}
                variant="outlined"
                color="primary"
              />
            )
          }

          return null
        })}
      </Box>
    </div>
  )
}

export default FeaturesTab








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\tabs\ReviewsTab.jsx
"use client"

import { useState } from "react"

import {
  Box,
  Typography,
  Rating,
  Avatar,
  Divider,
  Button,
  LinearProgress,
  Grid,
  Card,
  CardContent,
  FormControl,
  InputLabel,
  Select,
  MenuItem
} from "@mui/material"
import { Star } from "lucide-react"

const ReviewsTab = ({ reviews, rating, reviewCount }) => {
  const [filter, setFilter] = useState("all")

  const ratingCounts = [5, 4, 3, 2, 1].map(star => ({
    star,
    count: reviews.filter(review => review.rating === star).length,
    percentage: (reviews.filter(review => review.rating === star).length / reviews.length) * 100
  }))

  const filteredReviews = filter === "all"
    ? reviews
    : reviews.filter(review => review.rating === parseInt(filter))

  return (
    <Grid container spacing={6}>
      <Grid item xs={12} md={4}>
        <Card>
          <CardContent>
            <Typography variant="h6" className="font-medium mb-4">
              Rating Summary
            </Typography>

            <Box className="flex flex-col items-center mb-6">
              <Typography variant="h2" className="font-bold">
                {rating}
              </Typography>
              <Rating value={rating} precision={0.1} readOnly size="large" />
              <Typography variant="body2" className="text-textSecondary mt-1">
                Based on {reviewCount} reviews
              </Typography>
            </Box>

            <Box className="space-y-2">
              {ratingCounts.map((item) => (
                <Box key={item.star} className="flex items-center gap-2">
                  <Box className="flex items-center w-10">
                    <Typography variant="body2">{item.star}</Typography>
                    <Star size={14} className="text-warning ml-0.5" />
                  </Box>
                  <LinearProgress
                    variant="determinate"
                    value={item.percentage}
                    className="flex-1 h-2 rounded-full"
                    color={item.star > 3 ? "success" : item.star > 1 ? "warning" : "error"}
                  />
                  <Typography variant="body2" className="w-8 text-right">
                    {item.count}
                  </Typography>
                </Box>
              ))}
            </Box>
          </CardContent>
        </Card>
      </Grid>

      <Grid item xs={12} md={8}>
        <Box className="flex justify-between items-center mb-6">
          <Typography variant="h6" className="font-medium">
            Reviews
          </Typography>

          <FormControl size="small" className="min-w-[120px]">
            <InputLabel>Filter</InputLabel>
            <Select
              value={filter}
              label="Filter"
              onChange={(e) => setFilter(e.target.value)}
            >
              <MenuItem value="all">All Ratings</MenuItem>
              <MenuItem value="5">5 Stars</MenuItem>
              <MenuItem value="4">4 Stars</MenuItem>
              <MenuItem value="3">3 Stars</MenuItem>
              <MenuItem value="2">2 Stars</MenuItem>
              <MenuItem value="1">1 Star</MenuItem>
            </Select>
          </FormControl>
        </Box>

        {filteredReviews.length > 0 ? (
          <Box className="space-y-4">
            {filteredReviews.map((review) => (
              <Box key={review.id}>
                <Box className="flex gap-4">
                  <Avatar
                    src={review.avatar}
                    alt={review.author}
                    className="w-10 h-10"
                  />
                  <Box className="flex-1">
                    <Box className="flex justify-between items-start">
                      <Box>
                        <Typography variant="subtitle1" className="font-medium">
                          {review.author}
                        </Typography>
                        <Box className="flex items-center gap-1">
                          <Rating value={review.rating} size="small" readOnly />
                          <Typography variant="body2" className="text-textSecondary">
                            â€¢ {review.date}
                          </Typography>
                        </Box>
                      </Box>
                      <Typography
                        variant="caption"
                        className="text-textSecondary bg-background rounded-full px-2 py-0.5"
                      >
                        {review.membershipType}
                      </Typography>
                    </Box>
                    <Typography variant="body2" className="mt-2">
                      {review.comment}
                    </Typography>
                  </Box>
                </Box>
                <Divider className="my-4" />
              </Box>
            ))}

            <Box className="text-center mt-6">
              <Button variant="tonal" color="primary">
                Load more reviews
              </Button>
            </Box>
          </Box>
        ) : (
          <Box className="text-center py-8">
            <Typography variant="body1">
              No reviews match your filter criteria.
            </Typography>
            <Button
              variant="text"
              color="primary"
              onClick={() => setFilter("all")}
              className="mt-2"
            >
              Show all reviews
            </Button>
          </Box>
        )}
      </Grid>
    </Grid>
  )
}

export default ReviewsTab
undefined









// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\index.jsx
"use client"

import { useState, useEffect } from "react"

import { Box } from "@mui/material"

import SpaceHeader from "./SpaceHeader"
import SpaceTabs from "./SpaceTabs"
import RelatedSpaces from "./RelatedSpaces"

const mockSpaceData = {
  id: "1",
  title: "Creative Hub Studio",
  type: "Coworking Space",
  images: [
    "/images/spaces/1.jpg",
    "/images/spaces/2.jpg",
    "/images/spaces/3.jpg",
    "/images/spaces/4.jpg",
    "/images/spaces/5.jpg"
  ],
  featured: true,
  verified: true,
  rating: 4.8,
  reviewCount: 156,
  pricePerDay: 45,
  pricePerMonth: 800,
  capacity: 50,
  amenities: [
    { icon: "wifi", label: "High-Speed WiFi" },
    { icon: "coffee", label: "Coffee Bar" },
    { icon: "printer", label: "Printing Services" }
  ],
  propertyDetails: {
    address: "123 Innovation Street",
    city: "San Francisco",
    state: "CA",
    zipCode: "94105",
    type: "Commercial Building",
    yearBuilt: 2018,
    totalArea: 5000,
    floors: 3,
    accessHours: "24/7",
    securitySystem: true,
    elevatorAccess: true,
    reception: true
  },
  propertyFeatures: {
    totalDesks: 50,
    privateOffices: 5,
    meetingRooms: 3,
    phoneBooths: 4,
    kitchenettes: 2,
    restrooms: 4,
    bikeStorage: true
  },
  spaceAreas: [
    { name: "Open Workspace", area: 2500 },
    { name: "Private Offices", area: 1000 },
    { name: "Meeting Rooms", area: 800 }
  ],
  pricing: {
    dayPass: 45,
    weekPass: 200,
    monthPass: 800,
    dedicatedDesk: 350,
    privateOffice: 1200,
    meetingRoomHourly: 30,
    discounts: [
      { type: "3-month commitment", amount: "10%" },
      { type: "6-month commitment", amount: "15%" }
    ]
  },
  reviews: [
    {
      id: "1",
      author: "John Smith",
      avatar: "/images/avatars/1.png",
      date: "2 weeks ago",
      rating: 5,
      comment: "Fantastic workspace with great amenities.",
      membershipType: "Monthly Member"
    }
  ],
  host: {
    name: "Sarah Wilson",
    avatar: "/images/avatars/2.png",
    role: "Community Manager",
    responseTime: "within 2 hours"
  }
}

const SpaceDetails = ({ id }) => {
  const [spaceData, setSpaceData] = useState(mockSpaceData)

  useEffect(() => {
    // In a real app, fetch space data based on ID
  }, [id])

  return (
    <Box className="space-details-container">
      <SpaceHeader space={spaceData} />
      <SpaceTabs space={spaceData} />
      <RelatedSpaces currentSpaceId={spaceData.id} />
    </Box>
  )
}

export default SpaceDetails








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\RelatedSpaces.jsx
"use client"

import Image from "next/image"


import { Box, Typography, Grid, Card, CardContent, CardMedia, Chip, Button, Rating } from "@mui/material"

import { MapPin, Users, ArrowRight } from "lucide-react"



const relatedSpaces = [
  {
    id: "2",
    title: "Downtown Workshop",
    type: "Studio Space",
    image: "/images/spaces/2.jpg",
    location: "New York, NY",
    rating: 4.6,
    reviewCount: 89,
    pricePerDay: 65,
    capacity: 30
  },
  {
    id: "3",
    title: "Tech Innovation Center",
    type: "Coworking Space",
    image: "/images/spaces/3.jpg",
    location: "Austin, TX",
    rating: 4.9,
    reviewCount: 203,
    pricePerDay: 55,
    capacity: 100
  },
  {
    id: "4",
    title: "Creative Studio Loft",
    type: "Studio Space",
    image: "/images/spaces/4.jpg",
    location: "Los Angeles, CA",
    rating: 4.7,
    reviewCount: 156,
    pricePerDay: 75,
    capacity: 40
  }
]

const RelatedSpaces = ({ currentSpaceId }) => {
  const filteredSpaces = relatedSpaces.filter(space => space.id !== currentSpaceId)

  return (
    <Box className="mb-6">
      <Box className="flex justify-between items-center mb-6">
        <Typography variant="h6" className="font-medium">
          Similar Spaces
        </Typography>
        <Button
          variant="text"
          color="primary"
          endIcon={<ArrowRight size={18} />}
          className="text-sm"
        >
          View all
        </Button>
      </Box>

      <Grid container spacing={4}>
        {filteredSpaces.map((space) => (
          <Grid item xs={12} md={4} key={space.id}>
            <Card className="h-full transition-all duration-300 hover:shadow-lg hover:-translate-y-1">
              <Box className="relative h-48">
                <Image
                  src={space.image}
                  alt={space.title}
                  fill
                  className="object-cover"
                />
              </Box>
              <CardContent>
                <Typography variant="h6" className="font-semibold mb-1">
                  {space.title}
                </Typography>
                <Typography variant="body2" color="textSecondary" className="mb-2">
                  {space.type}
                </Typography>

                <Box className="flex items-center gap-2 mb-3">
                  <MapPin size={16} className="text-textSecondary" />
                  <Typography variant="body2" className="text-textSecondary">
                    {space.location}
                  </Typography>
                </Box>

                <Box className="flex items-center justify-between mb-4">
                  <Box className="flex items-center gap-1">
                    <Rating value={space.rating} precision={0.1} size="small" readOnly />
                    <Typography variant="body2" className="text-textSecondary">
                      ({space.reviewCount})
                    </Typography>
                  </Box>
                  <Box className="flex items-center gap-1">
                    <Users size={16} className="text-textSecondary" />
                    <Typography variant="body2" className="text-textSecondary">
                      Up to {space.capacity}
                    </Typography>
                  </Box>
                </Box>

                <Box className="flex items-center justify-between">
                  <Box>
                    <Typography variant="h6" className="font-semibold">
                      ${space.pricePerDay}
                    </Typography>
                    <Typography variant="caption" className="text-textSecondary">
                      per day
                    </Typography>
                  </Box>
                  <Button variant="outlined" color="primary">
                    View Details
                  </Button>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  )
}

export default RelatedSpaces








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\SpaceHeader.jsx
"use client"

import { useState } from "react"

import Image from "next/image"


import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  Avatar,
  Rating,
  IconButton,
  Modal
} from "@mui/material"

import { MapPin, Clock, Star, CheckCircle, Share2, Bookmark, Calendar, X } from "lucide-react"


import CustomIconButton from "@core/components/mui/IconButton"

const SpaceHeader = ({ space }) => {
  const [currentImageIndex, setCurrentImageIndex] = useState(0)
  const [showGallery, setShowGallery] = useState(false)

  const handleNextImage = () => {
    setCurrentImageIndex((prev) => (prev + 1) % space.images.length)
  }

  const handlePrevImage = () => {
    setCurrentImageIndex((prev) => (prev - 1 + space.images.length) % space.images.length)
  }

  return (
    <Card className="mb-6">
      {/* Image Gallery */}
      <Box className="relative h-[400px] cursor-pointer" onClick={() => setShowGallery(true)}>
        <Image
          src={space.images[currentImageIndex]}
          alt={space.title}
          fill
          className="object-cover"
          priority
        />

        {/* Navigation arrows */}
        <Box className="absolute inset-0 flex items-center justify-between p-4">
          <IconButton
            onClick={(e) => {
              e.stopPropagation()
              handlePrevImage()
            }}
            className="bg-white/80 hover:bg-white"
          >
            <X className="rotate-45" size={24} />
          </IconButton>
          <IconButton
            onClick={(e) => {
              e.stopPropagation()
              handleNextImage()
            }}
            className="bg-white/80 hover:bg-white"
          >
            <X className="-rotate-45" size={24} />
          </IconButton>
        </Box>

        {/* Image counter */}
        <Chip
          label={`${currentImageIndex + 1}/${space.images.length}`}
          className="absolute bottom-4 right-4 bg-white/80"
        />

        {/* Featured badge */}
        {space.featured && (
          <Chip
            label="Featured"
            color="primary"
            className="absolute top-4 left-4"
          />
        )}

        {/* Action buttons */}
        <Box className="absolute top-4 right-4 flex gap-2">
          <CustomIconButton
            color="inherit"
            className="bg-primary/80 hover:bg-primary"
            title="Share"
          >
            <Share2 size={20} />
          </CustomIconButton>
          <CustomIconButton
            color="inherit"
            className="bg-primary/80 hover:bg-primary"
            title="Save"
          >
            <Bookmark size={20} />
          </CustomIconButton>
        </Box>
      </Box>

      <CardContent>
        <Box className="flex flex-col md:flex-row md:items-start md:justify-between gap-6">
          {/* Left side - Space info */}
          <Box className="flex-1">
            <Box className="flex items-center gap-2 mb-2">
              <Typography variant="h4" className="font-bold">
                {space.title}
              </Typography>
              {space.verified && (
                <CheckCircle className="text-success" size={24} />
              )}
            </Box>

            <Typography variant="h6" color="textSecondary" className="mb-4">
              {space.type}
            </Typography>

            <Box className="flex flex-wrap items-center gap-4 mb-4">
              <Box className="flex items-center gap-1">
                <MapPin size={18} className="text-textSecondary" />
                <Typography variant="body2">
                  {space.propertyDetails.address}, {space.propertyDetails.city}
                </Typography>
              </Box>
              <Box className="flex items-center gap-1">
                <Clock size={18} className="text-textSecondary" />
                <Typography variant="body2">
                  Access: {space.propertyDetails.accessHours}
                </Typography>
              </Box>
              <Box className="flex items-center gap-1">
                <Star size={18} className="text-warning" />
                <Typography variant="body2">
                  <span className="font-medium">{space.rating}</span>
                  <span className="text-textSecondary"> ({space.reviewCount} reviews)</span>
                </Typography>
              </Box>
            </Box>

            {/* Host info */}
            <Box className="flex items-center gap-3">
              <Avatar
                src={space.host.avatar}
                alt={space.host.name}
                className="w-12 h-12"
              />
              <Box>
                <Typography variant="subtitle1" className="font-medium">
                  Hosted by {space.host.name}
                </Typography>
                <Typography variant="body2" className="text-textSecondary">
                  Responds {space.host.responseTime}
                </Typography>
              </Box>
            </Box>
          </Box>

          {/* Right side - Pricing and booking */}
          <Box className="bg-background rounded-lg p-6 min-w-[300px]">
            <Box className="mb-4">
              <Typography variant="h4" className="font-bold mb-1">
                ${space.pricePerDay}
              </Typography>
              <Typography variant="body2" className="text-textSecondary">
                per day
              </Typography>
            </Box>

            <Box className="space-y-3 mb-6">
              <Typography variant="body2">
                <span className="font-medium">Monthly from:</span> ${space.pricePerMonth}
              </Typography>
              <Typography variant="body2">
                <span className="font-medium">Capacity:</span> Up to {space.capacity} people
              </Typography>
            </Box>

            <Button
              variant="contained"
              color="primary"
              fullWidth
              size="large"
              startIcon={<Calendar size={20} />}
            >
              Book Now
            </Button>
          </Box>
        </Box>
      </CardContent>

      {/* Image Gallery Modal */}
      <Modal open={showGallery} onClose={() => setShowGallery(false)}>
        <Box className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-6 rounded-lg w-full max-w-4xl max-h-[90vh] overflow-auto">
          <Box className="flex justify-between items-center mb-4">
            <Typography variant="h6">Photo Gallery</Typography>
            <IconButton onClick={() => setShowGallery(false)}>
              <X size={24} />
            </IconButton>
          </Box>

          {/* Main Image */}
          <Box className="relative h-96 mb-4">
            <Image
              src={space.images[currentImageIndex]}
              alt={`Space image ${currentImageIndex + 1}`}
              fill
              className="object-contain"
            />
          </Box>

          {/* Thumbnails */}
          <Box className="grid grid-cols-4 gap-2">
            {space.images.map((image, index) => (
              <Box
                key={index}
                className={`relative h-20 cursor-pointer border-2 ${currentImageIndex === index  }`}
                onClick={() => setCurrentImageIndex(index)}
              >
                <Image
                  src={image}
                  alt={`Thumbnail ${index + 1}`}
                  fill
                  className="object-cover"
                />
              </Box>
            ))}
          </Box>
        </Box>
      </Modal>
    </Card>
  )
}

export default SpaceHeader








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\explore\spaces\space-details\SpaceTabs.jsx
"use client"

import { useState } from "react"

import { Box, Card, CardContent, Tabs, Tab } from "@mui/material"

import AboutTab from "./tabs/AboutTab"
import FeaturesTab from "./tabs/FeaturesTab"
import ReviewsTab from "./tabs/ReviewsTab"

function TabPanel(props) {
  const { children, value, index, ...other } = props

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`space-tabpanel-${index}`}
      aria-labelledby={`space-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ py: 3 }}>
          {children}
        </Box>
      )}
    </div>
  )
}

function a11yProps(index) {
  return {
    id: `space-tab-${index}`,
    "aria-controls": `space-tabpanel-${index}`,
  }
}

const SpaceTabs = ({ space }) => {
  const [value, setValue] = useState(0)

  const handleChange = (event, newValue) => {
    setValue(newValue)
  }

  return (
    <Card className="mb-6">
      <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
        <Tabs
          value={value}
          onChange={handleChange}
          aria-label="space details tabs"
          className="px-4"
        >
          <Tab label="About" {...a11yProps(0)} />
          <Tab label="Features & Amenities" {...a11yProps(1)} />
          <Tab label={`Reviews (${space.reviewCount})`} {...a11yProps(2)} />
        </Tabs>
      </Box>
      <CardContent>
        <TabPanel value={value} index={0}>
          <AboutTab space={space} />
        </TabPanel>
        <TabPanel value={value} index={1}>
          <FeaturesTab space={space} />
        </TabPanel>
        <TabPanel value={value} index={2}>
          <ReviewsTab
            reviews={space.reviews}
            rating={space.rating}
            reviewCount={space.reviewCount}
          />
        </TabPanel>
      </CardContent>
    </Card>
  )
}

export default SpaceTabs










// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\become-buisness\CreateService\rent\CoworkingTab.jsx
"use client"

import { useState } from "react"
import { useForm, Controller } from "react-hook-form"
import { yupResolver } from "@hookform/resolvers/yup"
import * as yup from "yup"
import apiClient from "@/libs/api"

// MUI Imports
import {
  Box,
  Grid,
  TextField,
  Button,
  FormControlLabel,
  Switch,
  Typography,
  Divider,
  CircularProgress,
  InputAdornment,
} from "@mui/material"

// Icon Imports
import { Upload, Clock, Users } from "lucide-react"

// Component Imports
import OpeningHoursInput from "./OpeningHoursInput"
import ImageUpload from "./ImageUpload"

// Form validation schema
const coworkingSchema = yup.object({
  business_name: yup.string().required("Business name is required"),
  phone_number: yup.string().required("Phone number is required"),
  email: yup.string().email("Enter a valid email").required("Email is required"),
  location: yup.string().required("Location is required"),
  address: yup.string().required("Address is required"),
  description: yup.string().required("Description is required"),
  is_active: yup.boolean(),
  price_per_day: yup.number().positive("Price must be positive").required("Price per day is required"),
  price_per_month: yup.number().positive("Price must be positive").required("Price per month is required"),
  seating_capacity: yup
    .number()
    .positive("Capacity must be positive")
    .integer("Capacity must be a whole number")
    .required("Seating capacity is required"),
  meeting_rooms: yup
    .number()
    .min(0, "Cannot be negative")
    .integer("Must be a whole number")
    .required("Number of meeting rooms is required"),
})

const CoworkingTab = ({ onSuccess, onError }) => {
  const [loading, setLoading] = useState(false)
  const [images, setImages] = useState([])
  const [openingHours, setOpeningHours] = useState({
    monday: { open: true, openTime: "09:00", closeTime: "17:00" },
    tuesday: { open: true, openTime: "09:00", closeTime: "17:00" },
    wednesday: { open: true, openTime: "09:00", closeTime: "17:00" },
    thursday: { open: true, openTime: "09:00", closeTime: "17:00" },
    friday: { open: true, openTime: "09:00", closeTime: "17:00" },
    saturday: { open: false, openTime: "10:00", closeTime: "15:00" },
    sunday: { open: false, openTime: "10:00", closeTime: "15:00" },
  })

  const {
    control,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm({
    defaultValues: {
      business_name: "",
      phone_number: "",
      email: "",
      location: "",
      address: "",
      description: "",
      is_active: true,
      price_per_day: "",
      price_per_month: "",
      seating_capacity: "",
      meeting_rooms: "",
    },
    resolver: yupResolver(coworkingSchema),
  })

  const handleImageChange = (newImages) => {
    setImages(newImages)
  }

  const handleOpeningHoursChange = (day, field, value) => {
    setOpeningHours((prev) => ({
      ...prev,
      [day]: {
        ...prev[day],
        [field]: value,
      },
    }))
  }

  const onSubmit = async (data) => {
    try {
      setLoading(true)

      // Prepare the form data
      const formData = {
        ...data,
        opening_hours: JSON.stringify(openingHours),
        type: "coworking",
      }

      // Create the coworking space
      const response = await apiClient.post("/workspaces/coworking/create", formData)

      // If successful, upload images
      if (response.data && response.data.data && response.data.data.id) {
        const workspaceId = response.data.data.id

        if (images.length > 0) {
          await uploadImages(workspaceId)
        }

        onSuccess("Coworking space created successfully!")
        reset()
        setImages([])
      }
    } catch (error) {
      console.error("Error creating coworking space:", error)
      onError(error.response?.data?.message || "Failed to create coworking space. Please try again.")
    } finally {
      setLoading(false)
    }
  }

  const uploadImages = async (workspaceId) => {
    try {
      const formData = new FormData()

      images.forEach((image, index) => {
        formData.append(`images[${index}]`, image)
      })

      await apiClient.post(`/workspaces/${workspaceId}/coworking/images`, formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      })
    } catch (error) {
      console.error("Error uploading images:", error)
      throw error
    }
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <Box className="mb-6">
        <Typography variant="h6" className="mb-4">
          Basic Information
        </Typography>
        <Grid container spacing={4}>
          {/* Business Name */}
          <Grid item xs={12} md={6}>
            <Controller
              name="business_name"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Business Name"
                  fullWidth
                  error={!!errors.business_name}
                  helperText={errors.business_name?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Phone Number */}
          <Grid item xs={12} md={6}>
            <Controller
              name="phone_number"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Phone Number"
                  fullWidth
                  error={!!errors.phone_number}
                  helperText={errors.phone_number?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Email */}
          <Grid item xs={12} md={6}>
            <Controller
              name="email"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Email"
                  fullWidth
                  error={!!errors.email}
                  helperText={errors.email?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Location */}
          <Grid item xs={12} md={6}>
            <Controller
              name="location"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Location (City)"
                  fullWidth
                  error={!!errors.location}
                  helperText={errors.location?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Address */}
          <Grid item xs={12}>
            <Controller
              name="address"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Full Address"
                  fullWidth
                  error={!!errors.address}
                  helperText={errors.address?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Description */}
          <Grid item xs={12}>
            <Controller
              name="description"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Description"
                  fullWidth
                  multiline
                  rows={4}
                  error={!!errors.description}
                  helperText={errors.description?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Is Active */}
          <Grid item xs={12}>
            <Controller
              name="is_active"
              control={control}
              render={({ field }) => (
                <FormControlLabel
                  control={
                    <Switch
                      checked={field.value}
                      onChange={(e) => field.onChange(e.target.checked)}
                      disabled={loading}
                    />
                  }
                  label="Coworking space is active and available for booking"
                />
              )}
            />
          </Grid>
        </Grid>
      </Box>

      <Divider className="my-6" />

      {/* Opening Hours */}
      <Box className="mb-6">
        <Typography variant="h6" className="mb-4 flex items-center">
          <Clock size={20} className="mr-2" />
          Opening Hours
        </Typography>
        <OpeningHoursInput openingHours={openingHours} onChange={handleOpeningHoursChange} disabled={loading} />
      </Box>

      <Divider className="my-6" />

      {/* Coworking-specific fields */}
      <Box className="mb-6">
        <Typography variant="h6" className="mb-4 flex items-center">
          <Users size={20} className="mr-2" />
          Coworking Details
        </Typography>

        <Grid container spacing={4}>
          {/* Price per day */}
          <Grid item xs={12} md={6}>
            <Controller
              name="price_per_day"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Price per Day"
                  fullWidth
                  type="number"
                  InputProps={{
                    startAdornment: <InputAdornment position="start">$</InputAdornment>,
                  }}
                  error={!!errors.price_per_day}
                  helperText={errors.price_per_day?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Price per month */}
          <Grid item xs={12} md={6}>
            <Controller
              name="price_per_month"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Price per Month"
                  fullWidth
                  type="number"
                  InputProps={{
                    startAdornment: <InputAdornment position="start">$</InputAdornment>,
                  }}
                  error={!!errors.price_per_month}
                  helperText={errors.price_per_month?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Seating capacity */}
          <Grid item xs={12} md={6}>
            <Controller
              name="seating_capacity"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Seating Capacity"
                  fullWidth
                  type="number"
                  error={!!errors.seating_capacity}
                  helperText={errors.seating_capacity?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Meeting rooms */}
          <Grid item xs={12} md={6}>
            <Controller
              name="meeting_rooms"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Number of Meeting Rooms"
                  fullWidth
                  type="number"
                  error={!!errors.meeting_rooms}
                  helperText={errors.meeting_rooms?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>
        </Grid>
      </Box>

      <Divider className="my-6" />

      {/* Image Upload */}
      <Box className="mb-6">
        <Typography variant="h6" className="mb-4 flex items-center">
          <Upload size={20} className="mr-2" />
          Coworking Space Images
        </Typography>
        <ImageUpload images={images} onChange={handleImageChange} disabled={loading} />
      </Box>

      {/* Submit Button */}
      <Box className="mt-8 flex justify-end">
        <Button
          type="submit"
          variant="contained"
          color="primary"
          size="large"
          disabled={loading}
          startIcon={loading ? <CircularProgress size={20} /> : null}
        >
          {loading ? "Creating..." : "Create Coworking Space"}
        </Button>
      </Box>
    </form>
  )
}

export default CoworkingTab








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\become-buisness\CreateService\rent\ImageUpload.jsx
"use client"

import { useState, useCallback } from "react"
import { useDropzone } from "react-dropzone"
import { Box, Typography, Button, CircularProgress, IconButton } from "@mui/material"
import { Upload, X, ImageIcon } from "lucide-react"

const ImageUpload = ({ images, onChange, disabled }) => {
  const [uploading, setUploading] = useState(false)

  const onDrop = useCallback(
    (acceptedFiles) => {
      setUploading(true)

      // Filter for image files only
      const imageFiles = acceptedFiles.filter((file) => file.type.startsWith("image/"))

      // Add new images to existing ones
      const newImages = [...images, ...imageFiles]
      onChange(newImages)

      setUploading(false)
    },
    [images, onChange],
  )

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      "image/*": [],
    },
    disabled: disabled || uploading,
  })

  const removeImage = (index) => {
    const newImages = [...images]
    newImages.splice(index, 1)
    onChange(newImages)
  }

  return (
    <Box>
      {/* Dropzone */}
      <Box
        {...getRootProps()}
        className={`border-2 border-dashed rounded-md p-6 text-center cursor-pointer transition-colors ${
          isDragActive ? "border-primary bg-primary/10" : "border-divider"
        } ${disabled || uploading ? "opacity-60 cursor-not-allowed" : ""}`}
      >
        <input {...getInputProps()} />
        <Upload size={36} className="mx-auto mb-4 text-textSecondary" />
        <Typography variant="h6" className="mb-1">
          Drop images here or click to upload
        </Typography>
        <Typography variant="body2" color="textSecondary" className="mb-4">
          Supported formats: JPG, PNG, GIF (Max 5MB each)
        </Typography>
        <Button variant="outlined" disabled={disabled || uploading}>
          {uploading ? <CircularProgress size={24} className="mr-2" /> : "Select Files"}
        </Button>
      </Box>

      {/* Preview */}
      {images.length > 0 && (
        <Box className="mt-6">
          <Typography variant="subtitle1" className="mb-3">
            {images.length} {images.length === 1 ? "Image" : "Images"} Selected
          </Typography>
          <Box className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
            {images.map((file, index) => (
              <Box key={index} className="relative group">
                <Box className="aspect-square rounded-md overflow-hidden border bg-background">
                  {file.type?.startsWith("image/") ? (
                    <img
                      src={URL.createObjectURL(file) || "/placeholder.svg"}
                      alt={`Preview ${index + 1}`}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <Box className="w-full h-full flex items-center justify-center">
                      <ImageIcon size={40} className="text-textSecondary" />
                    </Box>
                  )}
                </Box>
                <IconButton
                  size="small"
                  className="absolute top-2 right-2 bg-background opacity-0 group-hover:opacity-100 transition-opacity"
                  onClick={(e) => {
                    e.stopPropagation()
                    removeImage(index)
                  }}
                  disabled={disabled}
                >
                  <X size={16} />
                </IconButton>
              </Box>
            ))}
          </Box>
        </Box>
      )}
    </Box>
  )
}

export default ImageUpload








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\become-buisness\CreateService\rent\index.jsx
"use client"

import { useState } from "react"

import { Box, Typography, Card, CardContent, Tabs, Tab, Alert, Snackbar } from "@mui/material"
import StudioTab from "./StudioTab"
import CoworkingTab from "./CoworkingTab"

const ServiceTab = () => {
  const [activeTab, setActiveTab] = useState("studio")
  const [notification, setNotification] = useState({
    open: false,
    message: "",
    severity: "success",
  })

  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue)
  }

  const handleSuccess = (message) => {
    setNotification({
      open: true,
      message,
      severity: "success",
    })
  }

  const handleError = (message) => {
    setNotification({
      open: true,
      message,
      severity: "error",
    })
  }

  const handleCloseNotification = () => {
    setNotification({
      ...notification,
      open: false,
    })
  }

  return (
    <Box>
      <Typography variant="h5" className="mb-6">
        Create New Space
      </Typography>

      <Card>
        <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
          <Tabs value={activeTab} onChange={handleTabChange} aria-label="space type tabs">
            <Tab label="Studio Space" value="studio" />
            <Tab label="Coworking Space" value="coworking" />
          </Tabs>
        </Box>
        <CardContent>
          {activeTab === "studio" ? (
            <StudioTab onSuccess={handleSuccess} onError={handleError} />
          ) : (
            <CoworkingTab onSuccess={handleSuccess} onError={handleError} />
          )}
        </CardContent>
      </Card>

      <Snackbar
        open={notification.open}
        autoHideDuration={6000}
        onClose={handleCloseNotification}
        anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
      >
        <Alert onClose={handleCloseNotification} severity={notification.severity} sx={{ width: "100%" }}>
          {notification.message}
        </Alert>
      </Snackbar>
    </Box>
  )
}

export default ServiceTab








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\become-buisness\CreateService\rent\OpeningHoursInput.jsx
"use client"

import { Box, Grid, Typography, Switch, FormControlLabel, TextField } from "@mui/material"

const days = [
  { key: "monday", label: "Monday" },
  { key: "tuesday", label: "Tuesday" },
  { key: "wednesday", label: "Wednesday" },
  { key: "thursday", label: "Thursday" },
  { key: "friday", label: "Friday" },
  { key: "saturday", label: "Saturday" },
  { key: "sunday", label: "Sunday" },
]

const OpeningHoursInput = ({ openingHours, onChange, disabled }) => {
  return (
    <Box>
      <Grid container spacing={2}>
        {days.map((day) => (
          <Grid item xs={12} key={day.key}>
            <Box className="flex flex-col sm:flex-row sm:items-center gap-4 p-3 border rounded-md">
              <Box className="flex items-center justify-between sm:w-1/3">
                <Typography variant="body1">{day.label}</Typography>
                <FormControlLabel
                  control={
                    <Switch
                      checked={openingHours[day.key].open}
                      onChange={(e) => onChange(day.key, "open", e.target.checked)}
                      disabled={disabled}
                    />
                  }
                  label={openingHours[day.key].open ? "Open" : "Closed"}
                />
              </Box>
              <Box className="flex items-center gap-4 sm:w-2/3">
                <TextField
                  label="Opening Time"
                  type="time"
                  value={openingHours[day.key].openTime}
                  onChange={(e) => onChange(day.key, "openTime", e.target.value)}
                  disabled={!openingHours[day.key].open || disabled}
                  InputLabelProps={{ shrink: true }}
                  inputProps={{ step: 300 }}
                  fullWidth
                />
                <Typography variant="body2">to</Typography>
                <TextField
                  label="Closing Time"
                  type="time"
                  value={openingHours[day.key].closeTime}
                  onChange={(e) => onChange(day.key, "closeTime", e.target.value)}
                  disabled={!openingHours[day.key].open || disabled}
                  InputLabelProps={{ shrink: true }}
                  inputProps={{ step: 300 }}
                  fullWidth
                />
              </Box>
            </Box>
          </Grid>
        ))}
      </Grid>
    </Box>
  )
}

export default OpeningHoursInput








// C:\Users\hadjb\Documents\easycom\PFE-Next.js\javascript-version\starter-kit\src\views\apps\become-buisness\CreateService\rent\StudioTab.jsx
"use client"

import { useState } from "react"
import { useForm, Controller } from "react-hook-form"
import { yupResolver } from "@hookform/resolvers/yup"
import * as yup from "yup"
import apiClient from "@/libs/api"

// MUI Imports
import {
  Box,
  Grid,
  TextField,
  Button,
  FormControlLabel,
  Switch,
  Typography,
  Divider,
  CircularProgress,
  InputAdornment,
} from "@mui/material"

// Icon Imports
import { Upload, Clock, Building } from "lucide-react"

// Component Imports
import OpeningHoursInput from "./OpeningHoursInput"
import ImageUpload from "./ImageUpload"

// Form validation schema
const studioSchema = yup.object({
  business_name: yup.string().required("Business name is required"),
  phone_number: yup.string().required("Phone number is required"),
  email: yup.string().email("Enter a valid email").required("Email is required"),
  location: yup.string().required("Location is required"),
  address: yup.string().required("Address is required"),
  description: yup.string().required("Description is required"),
  is_active: yup.boolean(),
  price_per_hour: yup.number().positive("Price must be positive").required("Price per hour is required"),
  price_per_day: yup.number().positive("Price must be positive").required("Price per day is required"),
})

const StudioTab = ({ onSuccess, onError }) => {
  const [loading, setLoading] = useState(false)
  const [images, setImages] = useState([])
  const [openingHours, setOpeningHours] = useState({
    monday: { open: true, openTime: "09:00", closeTime: "17:00" },
    tuesday: { open: true, openTime: "09:00", closeTime: "17:00" },
    wednesday: { open: true, openTime: "09:00", closeTime: "17:00" },
    thursday: { open: true, openTime: "09:00", closeTime: "17:00" },
    friday: { open: true, openTime: "09:00", closeTime: "17:00" },
    saturday: { open: false, openTime: "10:00", closeTime: "15:00" },
    sunday: { open: false, openTime: "10:00", closeTime: "15:00" },
  })

  const {
    control,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm({
    defaultValues: {
      business_name: "",
      phone_number: "",
      email: "",
      location: "",
      address: "",
      description: "",
      is_active: true,
      price_per_hour: "",
      price_per_day: "",
    },
    resolver: yupResolver(studioSchema),
  })

  const handleImageChange = (newImages) => {
    setImages(newImages)
  }

  const handleOpeningHoursChange = (day, field, value) => {
    setOpeningHours((prev) => ({
      ...prev,
      [day]: {
        ...prev[day],
        [field]: value,
      },
    }))
  }

  const onSubmit = async (data) => {
    try {
      setLoading(true)

      // Prepare the form data
      const formData = {
        ...data,
        opening_hours: JSON.stringify(openingHours),
        type: "studio",
      }

      // Create the studio space
      const response = await apiClient.post("/workspaces/studio/create", formData)

      // If successful, upload images
      if (response.data && response.data.data && response.data.data.id) {
        const workspaceId = response.data.data.id

        if (images.length > 0) {
          await uploadImages(workspaceId)
        }

        onSuccess("Studio space created successfully!")
        reset()
        setImages([])
      }
    } catch (error) {
      console.error("Error creating studio space:", error)
      onError(error.response?.data?.message || "Failed to create studio space. Please try again.")
    } finally {
      setLoading(false)
    }
  }

  const uploadImages = async (workspaceId) => {
    try {
      const formData = new FormData()

      images.forEach((image, index) => {
        formData.append(`images[${index}]`, image)
      })

      await apiClient.post(`/workspaces/${workspaceId}/studio/images`, formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      })
    } catch (error) {
      console.error("Error uploading images:", error)
      throw error
    }
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <Box className="mb-6">
        <Typography variant="h6" className="mb-4">
          Basic Information
        </Typography>
        <Grid container spacing={4}>
          {/* Business Name */}
          <Grid item xs={12} md={6}>
            <Controller
              name="business_name"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Business Name"
                  fullWidth
                  error={!!errors.business_name}
                  helperText={errors.business_name?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Phone Number */}
          <Grid item xs={12} md={6}>
            <Controller
              name="phone_number"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Phone Number"
                  fullWidth
                  error={!!errors.phone_number}
                  helperText={errors.phone_number?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Email */}
          <Grid item xs={12} md={6}>
            <Controller
              name="email"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Email"
                  fullWidth
                  error={!!errors.email}
                  helperText={errors.email?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Location */}
          <Grid item xs={12} md={6}>
            <Controller
              name="location"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Location (City)"
                  fullWidth
                  error={!!errors.location}
                  helperText={errors.location?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Address */}
          <Grid item xs={12}>
            <Controller
              name="address"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Full Address"
                  fullWidth
                  error={!!errors.address}
                  helperText={errors.address?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Description */}
          <Grid item xs={12}>
            <Controller
              name="description"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Description"
                  fullWidth
                  multiline
                  rows={4}
                  error={!!errors.description}
                  helperText={errors.description?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Is Active */}
          <Grid item xs={12}>
            <Controller
              name="is_active"
              control={control}
              render={({ field }) => (
                <FormControlLabel
                  control={
                    <Switch
                      checked={field.value}
                      onChange={(e) => field.onChange(e.target.checked)}
                      disabled={loading}
                    />
                  }
                  label="Studio is active and available for booking"
                />
              )}
            />
          </Grid>
        </Grid>
      </Box>

      <Divider className="my-6" />

      {/* Opening Hours */}
      <Box className="mb-6">
        <Typography variant="h6" className="mb-4 flex items-center">
          <Clock size={20} className="mr-2" />
          Opening Hours
        </Typography>
        <OpeningHoursInput openingHours={openingHours} onChange={handleOpeningHoursChange} disabled={loading} />
      </Box>

      <Divider className="my-6" />

      {/* Studio-specific fields */}
      <Box className="mb-6">
        <Typography variant="h6" className="mb-4 flex items-center">
          <Building size={20} className="mr-2" />
          Studio Details
        </Typography>

        <Grid container spacing={4}>
          {/* Price per hour */}
          <Grid item xs={12} md={6}>
            <Controller
              name="price_per_hour"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Price per Hour"
                  fullWidth
                  type="number"
                  InputProps={{
                    startAdornment: <InputAdornment position="start">$</InputAdornment>,
                  }}
                  error={!!errors.price_per_hour}
                  helperText={errors.price_per_hour?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>

          {/* Price per day */}
          <Grid item xs={12} md={6}>
            <Controller
              name="price_per_day"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Price per Day"
                  fullWidth
                  type="number"
                  InputProps={{
                    startAdornment: <InputAdornment position="start">$</InputAdornment>,
                  }}
                  error={!!errors.price_per_day}
                  helperText={errors.price_per_day?.message}
                  disabled={loading}
                />
              )}
            />
          </Grid>
        </Grid>
      </Box>

      <Divider className="my-6" />

      {/* Image Upload */}
      <Box className="mb-6">
        <Typography variant="h6" className="mb-4 flex items-center">
          <Upload size={20} className="mr-2" />
          Studio Images
        </Typography>
        <ImageUpload images={images} onChange={handleImageChange} disabled={loading} />
      </Box>

      {/* Submit Button */}
      <Box className="mt-8 flex justify-end">
        <Button
          type="submit"
          variant="contained"
          color="primary"
          size="large"
          disabled={loading}
          startIcon={loading ? <CircularProgress size={20} /> : null}
        >
          {loading ? "Creating..." : "Create Studio Space"}
        </Button>
      </Box>
    </form>
  )
}

export default StudioTab
